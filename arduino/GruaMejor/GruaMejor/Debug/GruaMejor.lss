
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  00001cc4  00001d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020b  008002ec  008002ec  00001f44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024e8  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001223  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b16  00000000  00000000  000059c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  000074e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b6c  00000000  00000000  00007d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184e  00000000  00000000  000088a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000a0ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_1>
       8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_11>
      30:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_18>
      4c:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3e       	cpi	r26, 0xEC	; 236
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac ee       	ldi	r26, 0xEC	; 236
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3f       	cpi	r26, 0xF7	; 247
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
      9e:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <contAOFF>
		if(++contAON>15){
      c8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <contAON>
		if(++contAOFF>15){
      e8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <__data_end>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <button_Actulizar+0x68>
		if(++contB>10){
     112:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <contB>
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <contB>
     11c:	8b 30       	cpi	r24, 0x0B	; 11
     11e:	30 f0       	brcs	.+12     	; 0x12c <button_Actulizar+0x6c>
			FLAG_button_B=1;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <FLAG_button_B>
     126:	08 95       	ret
		}
	}else{
		contB=0;
     128:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <contB>
     12c:	08 95       	ret

0000012e <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	8a eb       	ldi	r24, 0xBA	; 186
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
     138:	08 95       	ret

0000013a <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	ec 01       	movw	r28, r24
     140:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     142:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     148:	1b c0       	rjmp	.+54     	; 0x180 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     14a:	fe 01       	movw	r30, r28
     14c:	e4 23       	and	r30, r20
     14e:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     150:	23 e0       	ldi	r18, 0x03	; 3
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	29 1b       	sub	r18, r25
     156:	31 09       	sbc	r19, r1
     158:	22 0f       	add	r18, r18
     15a:	33 1f       	adc	r19, r19
     15c:	22 0f       	add	r18, r18
     15e:	33 1f       	adc	r19, r19
     160:	02 c0       	rjmp	.+4      	; 0x166 <Descomponerint16aHex+0x2c>
     162:	f6 95       	lsr	r31
     164:	e7 95       	ror	r30
     166:	2a 95       	dec	r18
     168:	e2 f7       	brpl	.-8      	; 0x162 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     16a:	e0 50       	subi	r30, 0x00	; 0
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	80 81       	ld	r24, Z
     170:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     172:	52 95       	swap	r21
     174:	42 95       	swap	r20
     176:	4f 70       	andi	r20, 0x0F	; 15
     178:	45 27       	eor	r20, r21
     17a:	5f 70       	andi	r21, 0x0F	; 15
     17c:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     17e:	9f 5f       	subi	r25, 0xFF	; 255
     180:	94 30       	cpi	r25, 0x04	; 4
     182:	18 f3       	brcs	.-58     	; 0x14a <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     184:	1c 92       	st	X, r1
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	cf 93       	push	r28
     196:	6b 01       	movw	r12, r22
     198:	7c 01       	movw	r14, r24
     19a:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     19c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1a6:	24 c0       	rjmp	.+72     	; 0x1f0 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1a8:	db 01       	movw	r26, r22
     1aa:	ca 01       	movw	r24, r20
     1ac:	8c 21       	and	r24, r12
     1ae:	9d 21       	and	r25, r13
     1b0:	ae 21       	and	r26, r14
     1b2:	bf 21       	and	r27, r15
     1b4:	27 e0       	ldi	r18, 0x07	; 7
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	2c 1b       	sub	r18, r28
     1ba:	31 09       	sbc	r19, r1
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <Descomponeruint32aHex+0x42>
     1c6:	b6 95       	lsr	r27
     1c8:	a7 95       	ror	r26
     1ca:	97 95       	ror	r25
     1cc:	87 95       	ror	r24
     1ce:	2a 95       	dec	r18
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <Descomponeruint32aHex+0x3a>
     1d2:	dc 01       	movw	r26, r24
     1d4:	a0 50       	subi	r26, 0x00	; 0
     1d6:	bf 4f       	sbci	r27, 0xFF	; 255
     1d8:	8c 91       	ld	r24, X
     1da:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	76 95       	lsr	r23
     1e2:	67 95       	ror	r22
     1e4:	57 95       	ror	r21
     1e6:	47 95       	ror	r20
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1ec:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ee:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1f0:	c8 30       	cpi	r28, 0x08	; 8
     1f2:	d0 f2       	brcs	.-76     	; 0x1a8 <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     1f4:	10 82       	st	Z, r1
}
     1f6:	cf 91       	pop	r28
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	6f 97       	sbiw	r28, 0x1f	; 31
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     216:	0e 94 17 0b 	call	0x162e	; 0x162e <getEspacioDisponibleBuffer>
     21a:	8f 3d       	cpi	r24, 0xDF	; 223
     21c:	20 f0       	brcs	.+8      	; 0x226 <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <FLAGmandarDatos>
     224:	06 c0       	rjmp	.+12     	; 0x232 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     226:	0e 94 17 0b 	call	0x162e	; 0x162e <getEspacioDisponibleBuffer>
     22a:	88 32       	cpi	r24, 0x28	; 40
     22c:	10 f4       	brcc	.+4      	; 0x232 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     22e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <FLAGmandarDatos>
		}
	}
	if(FLAGmandarDatos){
     232:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <FLAGmandarDatos>
     236:	88 23       	and	r24, r24
     238:	09 f4       	brne	.+2      	; 0x23c <Informar_Actulizar+0x3a>
     23a:	5a c0       	rjmp	.+180    	; 0x2f0 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     23c:	0e 94 a2 09 	call	0x1344	; 0x1344 <getTiempoInforme>
     240:	ae 01       	movw	r20, r28
     242:	4f 5f       	subi	r20, 0xFF	; 255
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	0e 94 c6 00 	call	0x18c	; 0x18c <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     24a:	6a e0       	ldi	r22, 0x0A	; 10
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
		UART_TransmitChar(';');
     254:	8b e3       	ldi	r24, 0x3B	; 59
     256:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     25a:	0e 94 92 04 	call	0x924	; 0x924 <getValor>
     25e:	be 01       	movw	r22, r28
     260:	67 5e       	subi	r22, 0xE7	; 231
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(error,7);
     268:	67 e0       	ldi	r22, 0x07	; 7
     26a:	ce 01       	movw	r24, r28
     26c:	49 96       	adiw	r24, 0x19	; 25
     26e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     272:	8b e3       	ldi	r24, 0x3B	; 59
     274:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     278:	0e 94 86 04 	call	0x90c	; 0x90c <getIntegralPID>
     27c:	be 01       	movw	r22, r28
     27e:	6e 5e       	subi	r22, 0xEE	; 238
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     286:	67 e0       	ldi	r22, 0x07	; 7
     288:	ce 01       	movw	r24, r28
     28a:	42 96       	adiw	r24, 0x12	; 18
     28c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     290:	8b e3       	ldi	r24, 0x3B	; 59
     292:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     296:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getDerivadaPID>
     29a:	be 01       	movw	r22, r28
     29c:	65 5f       	subi	r22, 0xF5	; 245
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2a4:	67 e0       	ldi	r22, 0x07	; 7
     2a6:	ce 01       	movw	r24, r28
     2a8:	0b 96       	adiw	r24, 0x0b	; 11
     2aa:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
		UART_TransmitChar(';');
     2ae:	8b e3       	ldi	r24, 0x3B	; 59
     2b0:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2b4:	0e 94 86 0a 	call	0x150c	; 0x150c <getSlideResistor>
     2b8:	bc 01       	movw	r22, r24
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatunsisf>
     2c2:	2d ec       	ldi	r18, 0xCD	; 205
     2c4:	3c ec       	ldi	r19, 0xCC	; 204
     2c6:	44 e5       	ldi	r20, 0x54	; 84
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     2ce:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	be 01       	movw	r22, r28
     2d8:	67 5e       	subi	r22, 0xE7	; 231
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(error,7);
     2e0:	67 e0       	ldi	r22, 0x07	; 7
     2e2:	ce 01       	movw	r24, r28
     2e4:	49 96       	adiw	r24, 0x19	; 25
     2e6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
		UART_TransmitChar('\n');
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
	}
}
     2f0:	6f 96       	adiw	r28, 0x1f	; 31
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     302:	3f 92       	push	r3
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	c2 54       	subi	r28, 0x42	; 66
     32a:	d1 09       	sbc	r29, r1
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	0e 94 88 0b 	call	0x1710	; 0x1710 <SacarDatosBufferEnter>
     33e:	88 23       	and	r24, r24
     340:	09 f4       	brne	.+2      	; 0x344 <actulizar_leerDatos+0x42>
     342:	1a c1       	rjmp	.+564    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     344:	fe 01       	movw	r30, r28
     346:	f3 96       	adiw	r30, 0x33	; 51
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	df 01       	movw	r26, r30
     34c:	1d 92       	st	X+, r1
     34e:	8a 95       	dec	r24
     350:	e9 f7       	brne	.-6      	; 0x34c <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     352:	6a e0       	ldi	r22, 0x0A	; 10
     354:	83 ee       	ldi	r24, 0xE3	; 227
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     35c:	6a e0       	ldi	r22, 0x0A	; 10
     35e:	ce 01       	movw	r24, r28
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 3c 0b 	call	0x1678	; 0x1678 <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     366:	e1 2c       	mov	r14, r1
     368:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     36a:	c4 c0       	rjmp	.+392    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     36c:	bd e2       	ldi	r27, 0x2D	; 45
     36e:	3b 12       	cpse	r3, r27
     370:	05 c0       	rjmp	.+10     	; 0x37c <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     372:	b7 fa       	bst	r11, 7
     374:	b0 94       	com	r11
     376:	b7 f8       	bld	r11, 7
     378:	b0 94       	com	r11
     37a:	2f c0       	rjmp	.+94     	; 0x3da <actulizar_leerDatos+0xd8>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     37c:	c3 2c       	mov	r12, r3
     37e:	d1 2c       	mov	r13, r1
     380:	e0 e3       	ldi	r30, 0x30	; 48
     382:	ce 1a       	sub	r12, r30
     384:	d1 08       	sbc	r13, r1
     386:	0e 2d       	mov	r16, r14
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	00 0f       	add	r16, r16
     38c:	11 1f       	adc	r17, r17
     38e:	00 0f       	add	r16, r16
     390:	11 1f       	adc	r17, r17
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	8c 0f       	add	r24, r28
     398:	9d 1f       	adc	r25, r29
     39a:	08 0f       	add	r16, r24
     39c:	19 1f       	adc	r17, r25
     39e:	d8 01       	movw	r26, r16
     3a0:	d2 96       	adiw	r26, 0x32	; 50
     3a2:	6d 91       	ld	r22, X+
     3a4:	7d 91       	ld	r23, X+
     3a6:	8d 91       	ld	r24, X+
     3a8:	9c 91       	ld	r25, X
     3aa:	d5 97       	sbiw	r26, 0x35	; 53
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e2       	ldi	r20, 0x20	; 32
     3b2:	51 e4       	ldi	r21, 0x41	; 65
     3b4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     3b8:	2b 01       	movw	r4, r22
     3ba:	3c 01       	movw	r6, r24
     3bc:	b6 01       	movw	r22, r12
     3be:	dd 0c       	add	r13, r13
     3c0:	88 0b       	sbc	r24, r24
     3c2:	99 0b       	sbc	r25, r25
     3c4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     3c8:	a3 01       	movw	r20, r6
     3ca:	92 01       	movw	r18, r4
     3cc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     3d0:	f8 01       	movw	r30, r16
     3d2:	62 ab       	std	Z+50, r22	; 0x32
     3d4:	73 ab       	std	Z+51, r23	; 0x33
     3d6:	84 ab       	std	Z+52, r24	; 0x34
     3d8:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     3da:	83 2d       	mov	r24, r3
     3dc:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
					i++;
     3e0:	f3 94       	inc	r15
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <actulizar_leerDatos+0xf2>
     3e4:	0f 2e       	mov	r0, r31
     3e6:	81 2c       	mov	r8, r1
     3e8:	91 2c       	mov	r9, r1
     3ea:	f0 e8       	ldi	r31, 0x80	; 128
     3ec:	af 2e       	mov	r10, r31
     3ee:	ff e3       	ldi	r31, 0x3F	; 63
     3f0:	bf 2e       	mov	r11, r31
     3f2:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     3f4:	e1 e0       	ldi	r30, 0x01	; 1
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ec 0f       	add	r30, r28
     3fa:	fd 1f       	adc	r31, r29
     3fc:	ef 0d       	add	r30, r15
     3fe:	f1 1d       	adc	r31, r1
     400:	30 80       	ld	r3, Z
     402:	fc e2       	ldi	r31, 0x2C	; 44
     404:	3f 16       	cp	r3, r31
     406:	09 f4       	brne	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     408:	47 c0       	rjmp	.+142    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     40a:	8e e2       	ldi	r24, 0x2E	; 46
     40c:	38 16       	cp	r3, r24
     40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     410:	43 c0       	rjmp	.+134    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     412:	90 e2       	ldi	r25, 0x20	; 32
     414:	39 16       	cp	r3, r25
     416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	3f c0       	rjmp	.+126    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     41a:	31 10       	cpse	r3, r1
     41c:	a7 cf       	rjmp	.-178    	; 0x36c <actulizar_leerDatos+0x6a>
     41e:	3c c0       	rjmp	.+120    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     420:	0e 32       	cpi	r16, 0x2E	; 46
     422:	c9 f1       	breq	.+114    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     424:	0c 32       	cpi	r16, 0x2C	; 44
     426:	b9 f1       	breq	.+110    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     428:	10 e0       	ldi	r17, 0x00	; 0
     42a:	00 53       	subi	r16, 0x30	; 48
     42c:	11 09       	sbc	r17, r1
     42e:	ce 2c       	mov	r12, r14
     430:	d1 2c       	mov	r13, r1
     432:	cc 0c       	add	r12, r12
     434:	dd 1c       	adc	r13, r13
     436:	cc 0c       	add	r12, r12
     438:	dd 1c       	adc	r13, r13
     43a:	a1 e0       	ldi	r26, 0x01	; 1
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	ac 0f       	add	r26, r28
     440:	bd 1f       	adc	r27, r29
     442:	ca 0e       	add	r12, r26
     444:	db 1e       	adc	r13, r27
     446:	f6 01       	movw	r30, r12
     448:	62 a9       	ldd	r22, Z+50	; 0x32
     44a:	73 a9       	ldd	r23, Z+51	; 0x33
     44c:	84 a9       	ldd	r24, Z+52	; 0x34
     44e:	95 a9       	ldd	r25, Z+53	; 0x35
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e2       	ldi	r20, 0x20	; 32
     456:	51 e4       	ldi	r21, 0x41	; 65
     458:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     45c:	2b 01       	movw	r4, r22
     45e:	3c 01       	movw	r6, r24
     460:	b8 01       	movw	r22, r16
     462:	11 0f       	add	r17, r17
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     46c:	a3 01       	movw	r20, r6
     46e:	92 01       	movw	r18, r4
     470:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     474:	d6 01       	movw	r26, r12
     476:	d2 96       	adiw	r26, 0x32	; 50
     478:	6d 93       	st	X+, r22
     47a:	7d 93       	st	X+, r23
     47c:	8d 93       	st	X+, r24
     47e:	9c 93       	st	X, r25
     480:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	c5 01       	movw	r24, r10
     48c:	b4 01       	movw	r22, r8
     48e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     492:	4b 01       	movw	r8, r22
     494:	5c 01       	movw	r10, r24
					
				}
				i++;
     496:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ec 0f       	add	r30, r28
     49e:	fd 1f       	adc	r31, r29
     4a0:	ef 0d       	add	r30, r15
     4a2:	f1 1d       	adc	r31, r1
     4a4:	00 81       	ld	r16, Z
     4a6:	00 32       	cpi	r16, 0x20	; 32
     4a8:	11 f0       	breq	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4aa:	01 11       	cpse	r16, r1
     4ac:	b9 cf       	rjmp	.-142    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4ae:	ce 2c       	mov	r12, r14
     4b0:	d1 2c       	mov	r13, r1
     4b2:	cc 0c       	add	r12, r12
     4b4:	dd 1c       	adc	r13, r13
     4b6:	cc 0c       	add	r12, r12
     4b8:	dd 1c       	adc	r13, r13
     4ba:	e1 e0       	ldi	r30, 0x01	; 1
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ec 0f       	add	r30, r28
     4c0:	fd 1f       	adc	r31, r29
     4c2:	ce 0e       	add	r12, r30
     4c4:	df 1e       	adc	r13, r31
     4c6:	d6 01       	movw	r26, r12
     4c8:	d2 96       	adiw	r26, 0x32	; 50
     4ca:	6d 91       	ld	r22, X+
     4cc:	7d 91       	ld	r23, X+
     4ce:	8d 91       	ld	r24, X+
     4d0:	9c 91       	ld	r25, X
     4d2:	d5 97       	sbiw	r26, 0x35	; 53
     4d4:	a5 01       	movw	r20, r10
     4d6:	94 01       	movw	r18, r8
     4d8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
     4dc:	f6 01       	movw	r30, r12
     4de:	62 ab       	std	Z+50, r22	; 0x32
     4e0:	73 ab       	std	Z+51, r23	; 0x33
     4e2:	84 ab       	std	Z+52, r24	; 0x34
     4e4:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     4e6:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     4e8:	00 32       	cpi	r16, 0x20	; 32
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4ec:	80 2f       	mov	r24, r16
     4ee:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
     4f2:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     4f4:	e1 e0       	ldi	r30, 0x01	; 1
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 1f       	adc	r31, r29
     4fc:	ef 0d       	add	r30, r15
     4fe:	f1 1d       	adc	r31, r1
     500:	80 81       	ld	r24, Z
     502:	81 11       	cpse	r24, r1
     504:	6f cf       	rjmp	.-290    	; 0x3e4 <actulizar_leerDatos+0xe2>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     506:	6b a9       	ldd	r22, Y+51	; 0x33
     508:	7c a9       	ldd	r23, Y+52	; 0x34
     50a:	8d a9       	ldd	r24, Y+53	; 0x35
     50c:	9e a9       	ldd	r25, Y+54	; 0x36
     50e:	23 e3       	ldi	r18, 0x33	; 51
     510:	33 e3       	ldi	r19, 0x33	; 51
     512:	43 e4       	ldi	r20, 0x43	; 67
     514:	51 ec       	ldi	r21, 0xC1	; 193
     516:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     51a:	81 11       	cpse	r24, r1
     51c:	04 c0       	rjmp	.+8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			ONLEDBLUE;
     51e:	8b b1       	in	r24, 0x0b	; 11
     520:	80 64       	ori	r24, 0x40	; 64
     522:	8b b9       	out	0x0b, r24	; 11
     524:	03 c0       	rjmp	.+6      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
		}else{
			OFFLEDBLUE;
     526:	8b b1       	in	r24, 0x0b	; 11
     528:	8f 7b       	andi	r24, 0xBF	; 191
     52a:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     52c:	f4 e0       	ldi	r31, 0x04	; 4
     52e:	ef 12       	cpse	r14, r31
     530:	23 c0       	rjmp	.+70     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
			setKp(valores[0]);
     532:	6b a9       	ldd	r22, Y+51	; 0x33
     534:	7c a9       	ldd	r23, Y+52	; 0x34
     536:	8d a9       	ldd	r24, Y+53	; 0x35
     538:	9e a9       	ldd	r25, Y+54	; 0x36
     53a:	0e 94 a1 05 	call	0xb42	; 0xb42 <setKp>
			setKi(valores[1]);
     53e:	6f a9       	ldd	r22, Y+55	; 0x37
     540:	78 ad       	ldd	r23, Y+56	; 0x38
     542:	89 ad       	ldd	r24, Y+57	; 0x39
     544:	9a ad       	ldd	r25, Y+58	; 0x3a
     546:	0e 94 8f 05 	call	0xb1e	; 0xb1e <setKi>
			setKd(valores[2]);
     54a:	6b ad       	ldd	r22, Y+59	; 0x3b
     54c:	7c ad       	ldd	r23, Y+60	; 0x3c
     54e:	8d ad       	ldd	r24, Y+61	; 0x3d
     550:	9e ad       	ldd	r25, Y+62	; 0x3e
     552:	0e 94 98 05 	call	0xb30	; 0xb30 <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     556:	23 96       	adiw	r28, 0x03	; 3
     558:	6c ad       	ldd	r22, Y+60	; 0x3c
     55a:	7d ad       	ldd	r23, Y+61	; 0x3d
     55c:	8e ad       	ldd	r24, Y+62	; 0x3e
     55e:	9f ad       	ldd	r25, Y+63	; 0x3f
     560:	23 97       	sbiw	r28, 0x03	; 3
     562:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fixunssfsi>
     566:	16 2f       	mov	r17, r22
     568:	86 2f       	mov	r24, r22
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 aa 05 	call	0xb54	; 0xb54 <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     570:	80 e3       	ldi	r24, 0x30	; 48
     572:	81 0f       	add	r24, r17
     574:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
		}
	}
     578:	ce 5b       	subi	r28, 0xBE	; 190
     57a:	df 4f       	sbci	r29, 0xFF	; 255
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	5f 90       	pop	r5
     5a4:	4f 90       	pop	r4
     5a6:	3f 90       	pop	r3
     5a8:	08 95       	ret

000005aa <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5aa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <UART_Init>
	Inicializacion_Motor();
     5ae:	0e 94 80 03 	call	0x700	; 0x700 <Inicializacion_Motor>
	SensorEncoder_init();
     5b2:	0e 94 c3 08 	call	0x1186	; 0x1186 <SensorEncoder_init>
	Inicializacion_slideResistor();
     5b6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <Inicializacion_slideResistor>
	button_init();
     5ba:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5be:	8a b1       	in	r24, 0x0a	; 10
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5c4:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5c6:	0e 94 97 00 	call	0x12e	; 0x12e <Informar_MensajeInicial>
	OFFLEDGREEN;
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
	*/
	SEOS_Init();
     5ca:	0e 94 fd 09 	call	0x13fa	; 0x13fa <SEOS_Init>
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     5ce:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SEOS_Dispatch_Tasks>
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <main+0x24>

000005d4 <setVelocidad>:
	}
	
	PASOS16;salto=16;
	//apago el led
	OFFLEDBLUE;
	pos = 0;
     5d4:	bc 01       	movw	r22, r24
     5d6:	00 97       	sbiw	r24, 0x00	; 0
     5d8:	61 f4       	brne	.+24     	; 0x5f2 <setVelocidad+0x1e>
     5da:	85 b1       	in	r24, 0x05	; 5
     5dc:	87 70       	andi	r24, 0x07	; 7
     5de:	88 63       	ori	r24, 0x38	; 56
     5e0:	85 b9       	out	0x05, r24	; 5
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     5e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	7a ef       	ldi	r23, 0xFA	; 250
     5f0:	66 c0       	rjmp	.+204    	; 0x6be <setVelocidad+0xea>
     5f2:	99 23       	and	r25, r25
     5f4:	84 f4       	brge	.+32     	; 0x616 <setVelocidad+0x42>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <lado>
     5fc:	71 95       	neg	r23
     5fe:	61 95       	neg	r22
     600:	71 09       	sbc	r23, r1
     602:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <ladoAnt>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	11 f4       	brne	.+4      	; 0x60e <setVelocidad+0x3a>
     60a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <ladoAnt>
     614:	0d c0       	rjmp	.+26     	; 0x630 <setVelocidad+0x5c>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <lado>
     61c:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <ladoAnt>
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	19 f4       	brne	.+6      	; 0x62a <setVelocidad+0x56>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <ladoAnt>
     630:	65 3f       	cpi	r22, 0xF5	; 245
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	78 07       	cpc	r23, r24
     636:	5c f0       	brlt	.+22     	; 0x64e <setVelocidad+0x7a>
     638:	88 e1       	ldi	r24, 0x18	; 24
     63a:	99 e7       	ldi	r25, 0x79	; 121
     63c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     640:	80 e1       	ldi	r24, 0x10	; 16
     642:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     646:	85 b1       	in	r24, 0x05	; 5
     648:	87 70       	andi	r24, 0x07	; 7
     64a:	85 b9       	out	0x05, r24	; 5
     64c:	38 c0       	rjmp	.+112    	; 0x6be <setVelocidad+0xea>
     64e:	6b 3f       	cpi	r22, 0xFB	; 251
     650:	71 05       	cpc	r23, r1
     652:	64 f0       	brlt	.+24     	; 0x66c <setVelocidad+0x98>
     654:	88 e9       	ldi	r24, 0x98	; 152
     656:	9a e3       	ldi	r25, 0x3A	; 58
     658:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     662:	85 b1       	in	r24, 0x05	; 5
     664:	87 70       	andi	r24, 0x07	; 7
     666:	80 62       	ori	r24, 0x20	; 32
     668:	85 b9       	out	0x05, r24	; 5
     66a:	29 c0       	rjmp	.+82     	; 0x6be <setVelocidad+0xea>
     66c:	6e 37       	cpi	r22, 0x7E	; 126
     66e:	71 05       	cpc	r23, r1
     670:	64 f0       	brlt	.+24     	; 0x68a <setVelocidad+0xb6>
     672:	8c e4       	ldi	r24, 0x4C	; 76
     674:	9d e1       	ldi	r25, 0x1D	; 29
     676:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     680:	85 b1       	in	r24, 0x05	; 5
     682:	87 70       	andi	r24, 0x07	; 7
     684:	80 61       	ori	r24, 0x10	; 16
     686:	85 b9       	out	0x05, r24	; 5
     688:	1a c0       	rjmp	.+52     	; 0x6be <setVelocidad+0xea>
     68a:	60 34       	cpi	r22, 0x40	; 64
     68c:	71 05       	cpc	r23, r1
     68e:	64 f0       	brlt	.+24     	; 0x6a8 <setVelocidad+0xd4>
     690:	86 ea       	ldi	r24, 0xA6	; 166
     692:	9e e0       	ldi	r25, 0x0E	; 14
     694:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     69e:	85 b1       	in	r24, 0x05	; 5
     6a0:	87 70       	andi	r24, 0x07	; 7
     6a2:	80 63       	ori	r24, 0x30	; 48
     6a4:	85 b9       	out	0x05, r24	; 5
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <setVelocidad+0xea>
     6a8:	83 e5       	ldi	r24, 0x53	; 83
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6b6:	85 b1       	in	r24, 0x05	; 5
     6b8:	87 70       	andi	r24, 0x07	; 7
     6ba:	88 63       	ori	r24, 0x38	; 56
     6bc:	85 b9       	out	0x05, r24	; 5
     6be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6c2:	88 23       	and	r24, r24
     6c4:	21 f0       	breq	.+8      	; 0x6ce <setVelocidad+0xfa>
     6c6:	64 5c       	subi	r22, 0xC4	; 196
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
     6ce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     6d2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     6d6:	cb 01       	movw	r24, r22
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	82 17       	cp	r24, r18
     6dc:	93 07       	cpc	r25, r19
     6de:	58 f4       	brcc	.+22     	; 0x6f6 <setVelocidad+0x122>
     6e0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6e4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     6e8:	62 50       	subi	r22, 0x02	; 2
     6ea:	71 09       	sbc	r23, r1
     6ec:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     6f0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     6f4:	08 95       	ret
     6f6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6fa:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     6fe:	08 95       	ret

00000700 <Inicializacion_Motor>:
     700:	84 b1       	in	r24, 0x04	; 4
     702:	8e 63       	ori	r24, 0x3E	; 62
     704:	84 b9       	out	0x04, r24	; 4
     706:	8a b1       	in	r24, 0x0a	; 10
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	8a b9       	out	0x0a, r24	; 10
     70c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     710:	8d e0       	ldi	r24, 0x0D	; 13
     712:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	86 bb       	out	0x16, r24	; 22
     71a:	20 e1       	ldi	r18, 0x10	; 16
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     722:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     726:	20 e7       	ldi	r18, 0x70	; 112
     728:	37 e1       	ldi	r19, 0x17	; 23
     72a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     72e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     732:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     736:	08 95       	ret

00000738 <getPos>:
     738:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     73c:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     740:	08 95       	ret

00000742 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     754:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     758:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     75c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     760:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     764:	32 02       	muls	r19, r18
     766:	80 0d       	add	r24, r0
     768:	91 1d       	adc	r25, r1
     76a:	11 24       	eor	r1, r1
     76c:	80 33       	cpi	r24, 0x30	; 48
     76e:	95 43       	sbci	r25, 0x35	; 53
     770:	08 f5       	brcc	.+66     	; 0x7b4 <__vector_11+0x72>
     772:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     776:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     77a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     77e:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     782:	32 02       	muls	r19, r18
     784:	80 0d       	add	r24, r0
     786:	91 1d       	adc	r25, r1
     788:	11 24       	eor	r1, r1
     78a:	89 2b       	or	r24, r25
     78c:	99 f0       	breq	.+38     	; 0x7b4 <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     78e:	85 b1       	in	r24, 0x05	; 5
     790:	84 60       	ori	r24, 0x04	; 4
     792:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     794:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     798:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     79c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     7a0:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     7a4:	32 02       	muls	r19, r18
     7a6:	80 0d       	add	r24, r0
     7a8:	91 1d       	adc	r25, r1
     7aa:	11 24       	eor	r1, r1
     7ac:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <pos+0x1>
     7b0:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <pos>
	}		
}
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     7d2:	85 b1       	in	r24, 0x05	; 5
     7d4:	8b 7f       	andi	r24, 0xFB	; 251
     7d6:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     7d8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <lado>
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	19 f4       	brne	.+6      	; 0x7e6 <__vector_12+0x20>
		IRDER;
     7e0:	85 b1       	in	r24, 0x05	; 5
     7e2:	8d 7f       	andi	r24, 0xFD	; 253
     7e4:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     7e6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <lado>
     7ea:	8f 3f       	cpi	r24, 0xFF	; 255
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <__vector_12+0x2e>
		IRIZQ;
     7ee:	85 b1       	in	r24, 0x05	; 5
     7f0:	82 60       	ori	r24, 0x02	; 2
     7f2:	85 b9       	out	0x05, r24	; 5
// 		break;
// 		default:
// 		// Manejar el caso por defecto, si es necesario
// 		break;
// 	}
}
     7f4:	8f 91       	pop	r24
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <Actulizar_PID>:
	return s;
}

int16_t getError(){
	return e;
}
     800:	68 ef       	ldi	r22, 0xF8	; 248
     802:	72 e0       	ldi	r23, 0x02	; 2
     804:	8c ef       	ldi	r24, 0xFC	; 252
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 08 08 	call	0x1010	; 0x1010 <getAnguloEncoder>
     80c:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <indice_ec_error>
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ee 5e       	subi	r30, 0xEE	; 238
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	01 90       	ld	r0, Z+
     81c:	f0 81       	ld	r31, Z
     81e:	e0 2d       	mov	r30, r0
     820:	09 95       	icall
     822:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <vel>
     826:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <vel+0x1>
     82a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <vel+0x2>
     82e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <vel+0x3>
     832:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__data_end>
     836:	22 23       	and	r18, r18
     838:	61 f0       	breq	.+24     	; 0x852 <Actulizar_PID+0x52>
     83a:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <FLAG_habilitar_PID>
     83e:	22 23       	and	r18, r18
     840:	19 f0       	breq	.+6      	; 0x848 <Actulizar_PID+0x48>
     842:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <FLAG_habilitar_PID>
     846:	03 c0       	rjmp	.+6      	; 0x84e <Actulizar_PID+0x4e>
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <FLAG_habilitar_PID>
     84e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <__data_end>
     852:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <FLAG_habilitar_PID>
     856:	22 23       	and	r18, r18
     858:	a1 f1       	breq	.+104    	; 0x8c2 <Actulizar_PID+0xc2>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	4a e7       	ldi	r20, 0x7A	; 122
     860:	54 e4       	ldi	r21, 0x44	; 68
     862:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	64 f4       	brge	.+24     	; 0x882 <Actulizar_PID+0x82>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	aa e7       	ldi	r26, 0x7A	; 122
     870:	b4 e4       	ldi	r27, 0x44	; 68
     872:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <vel>
     876:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <vel+0x1>
     87a:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <vel+0x2>
     87e:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <vel+0x3>
     882:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <vel>
     886:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <vel+0x1>
     88a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <vel+0x2>
     88e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <vel+0x3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	54 ec       	ldi	r21, 0xC4	; 196
     89a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     89e:	88 23       	and	r24, r24
     8a0:	64 f4       	brge	.+24     	; 0x8ba <Actulizar_PID+0xba>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	aa e7       	ldi	r26, 0x7A	; 122
     8a8:	b4 ec       	ldi	r27, 0xC4	; 196
     8aa:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <vel>
     8ae:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <vel+0x1>
     8b2:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <vel+0x2>
     8b6:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <vel+0x3>
     8ba:	8b b1       	in	r24, 0x0b	; 11
     8bc:	80 62       	ori	r24, 0x20	; 32
     8be:	8b b9       	out	0x0b, r24	; 11
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <Actulizar_PID+0xd8>
     8c2:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <vel>
     8c6:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <vel+0x1>
     8ca:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <vel+0x2>
     8ce:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <vel+0x3>
     8d2:	8b b1       	in	r24, 0x0b	; 11
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	8b b9       	out	0x0b, r24	; 11
     8d8:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <vel>
     8dc:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <vel+0x1>
     8e0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <vel+0x2>
     8e4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <vel+0x3>
     8e8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     8ec:	cb 01       	movw	r24, r22
     8ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <setVelocidad>
     8f2:	08 95       	ret

000008f4 <getDerivadaPID>:
     8f4:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <derivada>
     8f8:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <derivada+0x1>
     8fc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <derivada+0x2>
     900:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <derivada+0x3>
     904:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     908:	cb 01       	movw	r24, r22
     90a:	08 95       	ret

0000090c <getIntegralPID>:
     90c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <s>
     910:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <s+0x1>
     914:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <s+0x2>
     918:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <s+0x3>
     91c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     920:	cb 01       	movw	r24, r22
     922:	08 95       	ret

00000924 <getValor>:

int16_t getValor(){
	return valor;
}
     924:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <valor>
     928:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <valor+0x1>
     92c:	08 95       	ret

0000092e <calcularIntegral>:

void calcularIntegral(int16_t e){
	s += Ki*e;
     92e:	bc 01       	movw	r22, r24
     930:	99 0f       	add	r25, r25
     932:	88 0b       	sbc	r24, r24
     934:	99 0b       	sbc	r25, r25
     936:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     93a:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <Ki>
     93e:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <Ki+0x1>
     942:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <Ki+0x2>
     946:	50 91 12 03 	lds	r21, 0x0312	; 0x800312 <Ki+0x3>
     94a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     94e:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     952:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     956:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     95a:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     95e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     962:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <s>
     966:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <s+0x1>
     96a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <s+0x2>
     96e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <s+0x3>
	if(s > LIMITESUPI) s = LIMITESUPI;
     972:	20 e8       	ldi	r18, 0x80	; 128
     974:	36 e9       	ldi	r19, 0x96	; 150
     976:	48 e1       	ldi	r20, 0x18	; 24
     978:	5b e4       	ldi	r21, 0x4B	; 75
     97a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	64 f4       	brge	.+24     	; 0x99a <calcularIntegral+0x6c>
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	96 e9       	ldi	r25, 0x96	; 150
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	bb e4       	ldi	r27, 0x4B	; 75
     98a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <s>
     98e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <s+0x1>
     992:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <s+0x2>
     996:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <s+0x3>
	if(s < -LIMITESUPI) s = -LIMITESUPI;
     99a:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <s>
     99e:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <s+0x1>
     9a2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <s+0x2>
     9a6:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <s+0x3>
     9aa:	20 e8       	ldi	r18, 0x80	; 128
     9ac:	36 e9       	ldi	r19, 0x96	; 150
     9ae:	48 e1       	ldi	r20, 0x18	; 24
     9b0:	5b ec       	ldi	r21, 0xCB	; 203
     9b2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	64 f4       	brge	.+24     	; 0x9d2 <calcularIntegral+0xa4>
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	96 e9       	ldi	r25, 0x96	; 150
     9be:	a8 e1       	ldi	r26, 0x18	; 24
     9c0:	bb ec       	ldi	r27, 0xCB	; 203
     9c2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <s>
     9c6:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <s+0x1>
     9ca:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <s+0x2>
     9ce:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <s+0x3>
     9d2:	08 95       	ret

000009d4 <calcularDerivada>:
}

void calcularDerivada(int16_t e){
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
	posAnt[0]=e;*/
	
	//derivada = (float)5000/tiempoMuestra;
	
	
	i_derivative = (i_derivative+1)%CANT_DERIVATE;
     9e0:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <i_derivative>
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	6b e0       	ldi	r22, 0x0B	; 11
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     9f0:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <i_derivative>
	derivadas[i_derivative] = (float)(tiempoMuestra);
     9f4:	c8 2f       	mov	r28, r24
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <tiempoMuestra>
     9fc:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <tiempoMuestra+0x1>
     a00:	07 2e       	mov	r0, r23
     a02:	00 0c       	add	r0, r0
     a04:	88 0b       	sbc	r24, r24
     a06:	99 0b       	sbc	r25, r25
     a08:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     a0c:	6b 01       	movw	r12, r22
     a0e:	7c 01       	movw	r14, r24
     a10:	cc 0f       	add	r28, r28
     a12:	dd 1f       	adc	r29, r29
     a14:	cc 0f       	add	r28, r28
     a16:	dd 1f       	adc	r29, r29
     a18:	c5 53       	subi	r28, 0x35	; 53
     a1a:	db 4f       	sbci	r29, 0xFB	; 251
     a1c:	68 83       	st	Y, r22
     a1e:	79 83       	std	Y+1, r23	; 0x01
     a20:	8a 83       	std	Y+2, r24	; 0x02
     a22:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	float total = 0;
	for(k=0;k<CANT_DERIVATE;k++){
     a24:	c0 e0       	ldi	r28, 0x00	; 0
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <calcularDerivada+0x66>
		derivada = (float)5000/tiempoMuestra;//total = total + derivadas[(i_derivative+CANT_DERIVATE-k)%CANT_DERIVATE];
     a28:	a7 01       	movw	r20, r14
     a2a:	96 01       	movw	r18, r12
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e4       	ldi	r23, 0x40	; 64
     a30:	8c e9       	ldi	r24, 0x9C	; 156
     a32:	95 e4       	ldi	r25, 0x45	; 69
     a34:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
	
	i_derivative = (i_derivative+1)%CANT_DERIVATE;
	derivadas[i_derivative] = (float)(tiempoMuestra);
	uint8_t k;
	float total = 0;
	for(k=0;k<CANT_DERIVATE;k++){
     a38:	cf 5f       	subi	r28, 0xFF	; 255
     a3a:	cb 30       	cpi	r28, 0x0B	; 11
     a3c:	a8 f3       	brcs	.-22     	; 0xa28 <calcularDerivada+0x54>
		derivada = (float)5000/tiempoMuestra;//total = total + derivadas[(i_derivative+CANT_DERIVATE-k)%CANT_DERIVATE];
	}
	derivada = total/CANT_DERIVATE;
     a3e:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <derivada>
     a42:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <derivada+0x1>
     a46:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <derivada+0x2>
     a4a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <derivada+0x3>
// 		posAnt[1]=posAnt[0];
// 		derivada=(e-posAnt[0])/(tiempo-tiempoAnt[0]);
// 		posAnt[0]=e;
// 		tiempoAnt[0]=tiempo;
// 	}
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <ec_sin_sen>:
	calcularIntegral(e);
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
}

float ec_sin_sen(){	
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
	
	//hago que vuelva
	e= e;//%800;
     a64:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     a68:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
	valor = e;
     a6c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     a70:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	
	calcularDerivada(e);
     a74:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	calcularIntegral(e);
     a78:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     a7c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     a80:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	
	return( Kp*e + Kd*derivada + Ki*s);
     a84:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     a88:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     a98:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     a9c:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     aa0:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     aa4:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     aa8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     aac:	6b 01       	movw	r12, r22
     aae:	7c 01       	movw	r14, r24
     ab0:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     ab4:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     ab8:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     abc:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     ac0:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <Kd>
     ac4:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <Kd+0x1>
     ac8:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <Kd+0x2>
     acc:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <Kd+0x3>
     ad0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	c7 01       	movw	r24, r14
     ada:	b6 01       	movw	r22, r12
     adc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
     ae4:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     ae8:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     aec:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     af0:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     af4:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <Ki>
     af8:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <Ki+0x1>
     afc:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Ki+0x2>
     b00:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Ki+0x3>
     b04:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
}
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	08 95       	ret

00000b1e <setKi>:
// 		tiempoAnt[0]=tiempo;
// 	}
}

void setKi(float val){
	Ki=val;
     b1e:	60 93 0f 03 	sts	0x030F, r22	; 0x80030f <Ki>
     b22:	70 93 10 03 	sts	0x0310, r23	; 0x800310 <Ki+0x1>
     b26:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <Ki+0x2>
     b2a:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <Ki+0x3>
     b2e:	08 95       	ret

00000b30 <setKd>:
}
void setKd(float val){
	Kd=val;
     b30:	60 93 13 03 	sts	0x0313, r22	; 0x800313 <Kd>
     b34:	70 93 14 03 	sts	0x0314, r23	; 0x800314 <Kd+0x1>
     b38:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <Kd+0x2>
     b3c:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <Kd+0x3>
     b40:	08 95       	ret

00000b42 <setKp>:
}
void setKp(float val){
	Kp=val;
     b42:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <Kp>
     b46:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <Kp+0x1>
     b4a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Kp+0x2>
     b4e:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <Kp+0x3>
     b52:	08 95       	ret

00000b54 <setIndice_ec_error>:
}

void setIndice_ec_error(uint8_t indice){
	if (indice != indice_ec_error)
     b54:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <indice_ec_error>
     b58:	98 17       	cp	r25, r24
     b5a:	51 f0       	breq	.+20     	; 0xb70 <setIndice_ec_error+0x1c>
	{
		indice_ec_error = indice;
     b5c:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <indice_ec_error>
		s = 0; //reseteo el valor de la suma de la integral se resetea
     b60:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <s>
     b64:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <s+0x1>
     b68:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <s+0x2>
     b6c:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <s+0x3>
     b70:	08 95       	ret

00000b72 <calcularSen>:
	}
}

int16_t calcularSen(int16_t sen){
	sen= sen%800;
     b72:	60 e2       	ldi	r22, 0x20	; 32
     b74:	73 e0       	ldi	r23, 0x03	; 3
     b76:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
	if(sen<0){
     b7a:	99 23       	and	r25, r25
     b7c:	14 f4       	brge	.+4      	; 0xb82 <calcularSen+0x10>
		sen = 800+sen;
     b7e:	80 5e       	subi	r24, 0xE0	; 224
     b80:	9c 4f       	sbci	r25, 0xFC	; 252
	}
	if(sen>399){
     b82:	80 39       	cpi	r24, 0x90	; 144
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	92 07       	cpc	r25, r18
     b88:	dc f0       	brlt	.+54     	; 0xbc0 <calcularSen+0x4e>
		sen = sen%400;
     b8a:	60 e9       	ldi	r22, 0x90	; 144
     b8c:	71 e0       	ldi	r23, 0x01	; 1
     b8e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     b92:	89 3c       	cpi	r24, 0xC9	; 201
     b94:	91 05       	cpc	r25, r1
     b96:	4c f0       	brlt	.+18     	; 0xbaa <calcularSen+0x38>
     b98:	28 ec       	ldi	r18, 0xC8	; 200
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     ba2:	a9 01       	movw	r20, r18
     ba4:	48 1b       	sub	r20, r24
     ba6:	59 0b       	sbc	r21, r25
     ba8:	ca 01       	movw	r24, r20
		sen = - sen2[sen];
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	fc 01       	movw	r30, r24
     bb0:	e8 5e       	subi	r30, 0xE8	; 232
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	91 95       	neg	r25
     bba:	81 95       	neg	r24
     bbc:	91 09       	sbc	r25, r1
     bbe:	08 95       	ret
	}else{
		sen = sen%400;
     bc0:	60 e9       	ldi	r22, 0x90	; 144
     bc2:	71 e0       	ldi	r23, 0x01	; 1
     bc4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     bc8:	89 3c       	cpi	r24, 0xC9	; 201
     bca:	91 05       	cpc	r25, r1
     bcc:	4c f0       	brlt	.+18     	; 0xbe0 <calcularSen+0x6e>
     bce:	28 ec       	ldi	r18, 0xC8	; 200
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	b9 01       	movw	r22, r18
     bd4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     bd8:	a9 01       	movw	r20, r18
     bda:	48 1b       	sub	r20, r24
     bdc:	59 0b       	sbc	r21, r25
     bde:	ca 01       	movw	r24, r20
		sen = sen2[sen];
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	fc 01       	movw	r30, r24
     be6:	e8 5e       	subi	r30, 0xE8	; 232
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
	}
	return sen;
}
     bee:	08 95       	ret

00000bf0 <ec_basico>:

float ec_basico(){
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	cf 93       	push	r28
	int8_t multi=1;
	e = e % 800;
     bfa:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     bfe:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     c02:	60 e2       	ldi	r22, 0x20	; 32
     c04:	73 e0       	ldi	r23, 0x03	; 3
     c06:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
     c0a:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     c0e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	if(e<0){
     c12:	99 23       	and	r25, r25
     c14:	34 f4       	brge	.+12     	; 0xc22 <ec_basico+0x32>
		e = 800+e;
     c16:	80 5e       	subi	r24, 0xE0	; 224
     c18:	9c 4f       	sbci	r25, 0xFC	; 252
     c1a:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     c1e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	}
	if(e > 350 && e < 450){
     c22:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     c26:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     c2a:	9c 01       	movw	r18, r24
     c2c:	2f 55       	subi	r18, 0x5F	; 95
     c2e:	31 40       	sbci	r19, 0x01	; 1
     c30:	23 36       	cpi	r18, 0x63	; 99
     c32:	31 05       	cpc	r19, r1
     c34:	10 f0       	brcs	.+4      	; 0xc3a <ec_basico+0x4a>
	}
	return sen;
}

float ec_basico(){
	int8_t multi=1;
     c36:	c1 e0       	ldi	r28, 0x01	; 1
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <ec_basico+0x4c>
	e = e % 800;
	if(e<0){
		e = 800+e;
	}
	if(e > 350 && e < 450){
		multi = -1;
     c3a:	cf ef       	ldi	r28, 0xFF	; 255
	}
	e=calcularSen(e);
     c3c:	0e 94 b9 05 	call	0xb72	; 0xb72 <calcularSen>
     c40:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     c44:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	valor = e;
     c48:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     c4c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	calcularDerivada(e);
     c50:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	calcularIntegral(e);
     c54:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     c58:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     c5c:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
     c60:	6c 2f       	mov	r22, r28
     c62:	cc 0f       	add	r28, r28
     c64:	77 0b       	sbc	r23, r23
     c66:	88 0b       	sbc	r24, r24
     c68:	99 0b       	sbc	r25, r25
     c6a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     c6e:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     c72:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     c76:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     c7a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     c7e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     c82:	6b 01       	movw	r12, r22
     c84:	7c 01       	movw	r14, r24
     c86:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     c8a:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     c8e:	07 2e       	mov	r0, r23
     c90:	00 0c       	add	r0, r0
     c92:	88 0b       	sbc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     c9a:	a7 01       	movw	r20, r14
     c9c:	96 01       	movw	r18, r12
     c9e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     ca2:	6b 01       	movw	r12, r22
     ca4:	7c 01       	movw	r14, r24
     ca6:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     caa:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     cae:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     cb2:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     cb6:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <Kd>
     cba:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <Kd+0x1>
     cbe:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <Kd+0x2>
     cc2:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <Kd+0x3>
     cc6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
     cce:	c7 01       	movw	r24, r14
     cd0:	b6 01       	movw	r22, r12
     cd2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     cd6:	6b 01       	movw	r12, r22
     cd8:	7c 01       	movw	r14, r24
     cda:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     cde:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     ce2:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     ce6:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     cea:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <Ki>
     cee:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <Ki+0x1>
     cf2:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Ki+0x2>
     cf6:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Ki+0x3>
     cfa:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
}
     d0a:	cf 91       	pop	r28
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	08 95       	ret

00000d16 <ec_pos>:
	
	return( Kp*e + Kd*derivada + Ki*s);
}


float ec_pos(){
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
	e=calcularSen(e);
     d22:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     d26:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     d2a:	0e 94 b9 05 	call	0xb72	; 0xb72 <calcularSen>
     d2e:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     d32:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
     d36:	0e 94 86 0a 	call	0x150c	; 0x150c <getSlideResistor>
     d3a:	bc 01       	movw	r22, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatunsisf>
     d44:	2d ec       	ldi	r18, 0xCD	; 205
     d46:	3c ec       	ldi	r19, 0xCC	; 204
     d48:	44 e5       	ldi	r20, 0x54	; 84
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     d50:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <posRef>
     d54:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <posRef+0x1>
     d58:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <posRef+0x2>
     d5c:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;
     d60:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     d64:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     d68:	07 2e       	mov	r0, r23
     d6a:	00 0c       	add	r0, r0
     d6c:	88 0b       	sbc	r24, r24
     d6e:	99 0b       	sbc	r25, r25
     d70:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 ed       	ldi	r20, 0xD0	; 208
     d7a:	50 e4       	ldi	r21, 0x40	; 64
     d7c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     d80:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     d84:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <e+0x1>
     d88:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <e>
	valor = getPos()+e;
     d8c:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     d90:	c0 91 fc 02 	lds	r28, 0x02FC	; 0x8002fc <e>
     d94:	d0 91 fd 02 	lds	r29, 0x02FD	; 0x8002fd <e+0x1>
     d98:	8c 0f       	add	r24, r28
     d9a:	9d 1f       	adc	r25, r29
     d9c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     da0:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	calcularDerivada(e-getPos());
     da4:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     da8:	9e 01       	movw	r18, r28
     daa:	28 1b       	sub	r18, r24
     dac:	39 0b       	sbc	r19, r25
     dae:	c9 01       	movw	r24, r18
     db0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
     db4:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <posRef>
     db8:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <posRef+0x1>
     dbc:	e0 90 04 03 	lds	r14, 0x0304	; 0x800304 <posRef+0x2>
     dc0:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <posRef+0x3>
     dc4:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     dc8:	bc 01       	movw	r22, r24
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatunsisf>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	c7 01       	movw	r24, r14
     dd8:	b6 01       	movw	r22, r12
     dda:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__subsf3>
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
     de2:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     de6:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     dea:	07 2e       	mov	r0, r23
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     df6:	a7 01       	movw	r20, r14
     df8:	96 01       	movw	r18, r12
     dfa:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     dfe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
     e02:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <e+0x1>
     e06:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	calcularIntegral(e);
     e0a:	cb 01       	movw	r24, r22
     e0c:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	return( Kp*e + Kd*derivada + Ki*s );
     e10:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     e14:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     e18:	07 2e       	mov	r0, r23
     e1a:	00 0c       	add	r0, r0
     e1c:	88 0b       	sbc	r24, r24
     e1e:	99 0b       	sbc	r25, r25
     e20:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
     e24:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     e28:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     e2c:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     e30:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     e34:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     e38:	6b 01       	movw	r12, r22
     e3a:	7c 01       	movw	r14, r24
     e3c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     e40:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     e44:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     e48:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     e4c:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <Kd>
     e50:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <Kd+0x1>
     e54:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <Kd+0x2>
     e58:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <Kd+0x3>
     e5c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     e60:	9b 01       	movw	r18, r22
     e62:	ac 01       	movw	r20, r24
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     e6c:	6b 01       	movw	r12, r22
     e6e:	7c 01       	movw	r14, r24
     e70:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     e74:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     e78:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     e7c:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     e80:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <Ki>
     e84:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <Ki+0x1>
     e88:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Ki+0x2>
     e8c:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Ki+0x3>
     e90:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__mulsf3>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	cf 90       	pop	r12
     eac:	08 95       	ret

00000eae <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
     eae:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <DER>
     eb2:	88 23       	and	r24, r24
     eb4:	91 f0       	breq	.+36     	; 0xeda <f00+0x2c>
		angulo--;
     eb6:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     eba:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     ec4:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=-1;
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     ed0:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = CeroUno;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	}
	if (IZQ){
     eda:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <IZQ>
     ede:	88 23       	and	r24, r24
     ee0:	89 f0       	breq	.+34     	; 0xf04 <f00+0x56>
		angulo++;
     ee2:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     ee6:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     ef0:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     efc:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = UnoCero;
     f00:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
     f04:	08 95       	ret

00000f06 <f10>:
	}
}
void f10(void){
	if(DER){
     f06:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <DER>
     f0a:	88 23       	and	r24, r24
     f0c:	91 f0       	breq	.+36     	; 0xf32 <f10+0x2c>
		angulo++;
     f0e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     f12:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     f1c:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     f28:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = UnoUno;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	}
	if(!IZQ){
     f32:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <IZQ>
     f36:	81 11       	cpse	r24, r1
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <f10+0x56>
		angulo--;
     f3a:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     f3e:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     f48:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=-1;
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     f54:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = CeroCero;
     f58:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <estado>
     f5c:	08 95       	ret

00000f5e <f01>:
	}
}
void f01(void){
	if(!DER){
     f5e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <DER>
     f62:	81 11       	cpse	r24, r1
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <f01+0x2a>
		angulo++;
     f66:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     f6a:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     f74:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     f80:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = CeroCero;
     f84:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <estado>
	}
	if(IZQ){
     f88:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <IZQ>
     f8c:	88 23       	and	r24, r24
     f8e:	91 f0       	breq	.+36     	; 0xfb4 <f01+0x56>
		angulo--;
     f90:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     f94:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     f9e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=-1;
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	9f ef       	ldi	r25, 0xFF	; 255
     fa6:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     faa:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = UnoUno;
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
     fb4:	08 95       	ret

00000fb6 <f11>:
	}
}
void f11(void){
	if(!DER){
     fb6:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <DER>
     fba:	81 11       	cpse	r24, r1
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <f11+0x2c>
		angulo--;
     fbe:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     fc2:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     fcc:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=-1;
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
     fd8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = UnoCero;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	}
	if(!IZQ){
     fe2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <IZQ>
     fe6:	81 11       	cpse	r24, r1
     fe8:	12 c0       	rjmp	.+36     	; 0x100e <f11+0x58>
		angulo++;
     fea:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <angulo>
     fee:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <angulo+0x1>
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <angulo+0x1>
     ff8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <angulo>
		anguloANt=1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <anguloANt+0x1>
    1004:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <anguloANt>
		estado = CeroUno;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
    100e:	08 95       	ret

00001010 <getAnguloEncoder>:

//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	eb 01       	movw	r28, r22
	*anguloOUT = angulo;
    1016:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <angulo>
    101a:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <angulo+0x1>
    101e:	fc 01       	movw	r30, r24
    1020:	31 83       	std	Z+1, r19	; 0x01
    1022:	20 83       	st	Z, r18
	if(tiempoMuestraOUT!=0){
    1024:	20 97       	sbiw	r28, 0x00	; 0
    1026:	09 f4       	brne	.+2      	; 0x102a <getAnguloEncoder+0x1a>
    1028:	4f c0       	rjmp	.+158    	; 0x10c8 <getAnguloEncoder+0xb8>
		//*tiempoMuestraOUT = tiempoMuestra;
		int16_t axi = (derivate_D + derivate_I)/2;
    102a:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <derivate_D>
    102e:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <derivate_D+0x1>
    1032:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <derivate_I>
    1036:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <derivate_I+0x1>
    103a:	68 0f       	add	r22, r24
    103c:	79 1f       	adc	r23, r25
    103e:	77 23       	and	r23, r23
    1040:	14 f4       	brge	.+4      	; 0x1046 <getAnguloEncoder+0x36>
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	9b 01       	movw	r18, r22
    1048:	35 95       	asr	r19
    104a:	27 95       	ror	r18
		//puedo hacer que duvuelva el mismo y que no cambie
		
		//*tiempoMuestraOUT = anguloANt * axi;
		if(anguloANt == signoAnt){
    104c:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <anguloANt>
    1050:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <anguloANt+0x1>
    1054:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <signoAnt>
    1058:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <signoAnt+0x1>
    105c:	e8 17       	cp	r30, r24
    105e:	f9 07       	cpc	r31, r25
    1060:	59 f5       	brne	.+86     	; 0x10b8 <getAnguloEncoder+0xa8>
			if(axiAnt != axi){
    1062:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <axiAnt>
    1066:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <axiAnt+0x1>
    106a:	28 17       	cp	r18, r24
    106c:	39 07       	cpc	r19, r25
    106e:	81 f0       	breq	.+32     	; 0x1090 <getAnguloEncoder+0x80>
				axiAnt = (derivate_D + derivate_I)/2;
    1070:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <axiAnt+0x1>
    1074:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <axiAnt>
				*tiempoMuestraOUT = anguloANt * axiAnt;
    1078:	2e 9f       	mul	r18, r30
    107a:	c0 01       	movw	r24, r0
    107c:	2f 9f       	mul	r18, r31
    107e:	90 0d       	add	r25, r0
    1080:	3e 9f       	mul	r19, r30
    1082:	90 0d       	add	r25, r0
    1084:	11 24       	eor	r1, r1
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	88 83       	st	Y, r24
				count_equals=0;
    108a:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <count_equals>
    108e:	18 c0       	rjmp	.+48     	; 0x10c0 <getAnguloEncoder+0xb0>
			}else{
				*tiempoMuestraOUT = anguloANt*((derivate_D + derivate_I)/2+derivate_counter_D/5);
    1090:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <derivate_counter_D>
    1094:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <derivate_counter_D+0x1>
    1098:	65 e0       	ldi	r22, 0x05	; 5
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    10a0:	62 0f       	add	r22, r18
    10a2:	73 1f       	adc	r23, r19
    10a4:	e6 9f       	mul	r30, r22
    10a6:	c0 01       	movw	r24, r0
    10a8:	e7 9f       	mul	r30, r23
    10aa:	90 0d       	add	r25, r0
    10ac:	f6 9f       	mul	r31, r22
    10ae:	90 0d       	add	r25, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	99 83       	std	Y+1, r25	; 0x01
    10b4:	88 83       	st	Y, r24
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <getAnguloEncoder+0xb0>
				//*tiempoMuestraOUT = anguloANt * ((derivate_D + derivate_I)/2+(derivate_counter_D+derivate_counter_I)/2)/2;
			}
		}else{
			*tiempoMuestraOUT = 16000;
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	9e e3       	ldi	r25, 0x3E	; 62
    10bc:	99 83       	std	Y+1, r25	; 0x01
    10be:	88 83       	st	Y, r24
		}
		signoAnt= anguloANt;
    10c0:	f0 93 22 03 	sts	0x0322, r31	; 0x800322 <signoAnt+0x1>
    10c4:	e0 93 21 03 	sts	0x0321, r30	; 0x800321 <signoAnt>
	}
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <set_origen>:

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    10ce:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <DER>
    10d2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <IZQ>
    10d6:	89 23       	and	r24, r25
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <set_origen+0x12>
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    10e0:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <DER>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	22 23       	and	r18, r18
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <set_origen+0x22>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <IZQ>
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	82 23       	and	r24, r18
    10f8:	93 23       	and	r25, r19
    10fa:	89 2b       	or	r24, r25
    10fc:	19 f0       	breq	.+6      	; 0x1104 <set_origen+0x36>
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    1104:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <DER>
    1108:	30 91 20 03 	lds	r19, 0x0320	; 0x800320 <IZQ>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	33 23       	and	r19, r19
    1112:	11 f0       	breq	.+4      	; 0x1118 <set_origen+0x4a>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	82 23       	and	r24, r18
    111c:	93 23       	and	r25, r19
    111e:	89 2b       	or	r24, r25
    1120:	19 f0       	breq	.+6      	; 0x1128 <set_origen+0x5a>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    1128:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <DER>
    112c:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <IZQ>
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	81 11       	cpse	r24, r1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	21 11       	cpse	r18, r1
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	89 23       	and	r24, r25
    113e:	11 f0       	breq	.+4      	; 0x1144 <set_origen+0x76>
    1140:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <estado>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1144:	2f ef       	ldi	r18, 0xFF	; 255
    1146:	80 e7       	ldi	r24, 0x70	; 112
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	90 40       	sbci	r25, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <set_origen+0x7c>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <set_origen+0x86>
    1154:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    1156:	89 b1       	in	r24, 0x09	; 9
    1158:	88 70       	andi	r24, 0x08	; 8
    115a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <IZQ>
	DER = LEERDER;
    115e:	89 b1       	in	r24, 0x09	; 9
    1160:	84 70       	andi	r24, 0x04	; 4
    1162:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1166:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <estado>
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	e1 55       	subi	r30, 0x51	; 81
    1172:	fd 4f       	sbci	r31, 0xFD	; 253
    1174:	01 90       	ld	r0, Z+
    1176:	f0 81       	ld	r31, Z
    1178:	e0 2d       	mov	r30, r0
    117a:	09 95       	icall
	
	angulo = 0;	
    117c:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <angulo+0x1>
    1180:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <angulo>
    1184:	08 95       	ret

00001186 <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    1186:	8a b1       	in	r24, 0x0a	; 10
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    118c:	8b b1       	in	r24, 0x0b	; 11
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    1192:	8a b1       	in	r24, 0x0a	; 10
    1194:	87 7f       	andi	r24, 0xF7	; 247
    1196:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    1198:	8b b1       	in	r24, 0x0b	; 11
    119a:	88 60       	ori	r24, 0x08	; 8
    119c:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    119e:	8d b3       	in	r24, 0x1d	; 29
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    11a4:	e9 e6       	ldi	r30, 0x69	; 105
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	81 60       	ori	r24, 0x01	; 1
    11ac:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    11ae:	80 81       	ld	r24, Z
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    11b4:	8d b3       	in	r24, 0x1d	; 29
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    11ba:	80 81       	ld	r24, Z
    11bc:	84 60       	ori	r24, 0x04	; 4
    11be:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    11c0:	80 81       	ld	r24, Z
    11c2:	87 7f       	andi	r24, 0xF7	; 247
    11c4:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    11cc:	94 e0       	ldi	r25, 0x04	; 4
    11ce:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    11d2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    11d6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    11da:	0e 94 67 08 	call	0x10ce	; 0x10ce <set_origen>
    11de:	08 95       	ret

000011e0 <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    1202:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <derivate_counter_I>
    1206:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <derivate_counter_I+0x1>
    120a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <derivate_I+0x1>
    120e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <derivate_I>
	derivate_counter_I = 0;
    1212:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <derivate_counter_I+0x1>
    1216:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <derivate_counter_I>
	IZQ = LEERIZQ;
    121a:	89 b1       	in	r24, 0x09	; 9
    121c:	88 70       	andi	r24, 0x08	; 8
    121e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <IZQ>
	DER = LEERDER;
    1222:	89 b1       	in	r24, 0x09	; 9
    1224:	84 70       	andi	r24, 0x04	; 4
    1226:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    122a:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <estado>
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	e1 55       	subi	r30, 0x51	; 81
    1236:	fd 4f       	sbci	r31, 0xFD	; 253
    1238:	01 90       	ld	r0, Z+
    123a:	f0 81       	ld	r31, Z
    123c:	e0 2d       	mov	r30, r0
    123e:	09 95       	icall
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    1284:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <derivate_counter_D>
    1288:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <derivate_counter_D+0x1>
    128c:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <derivate_D+0x1>
    1290:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <derivate_D>
	derivate_counter_D = 0;
    1294:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <derivate_counter_D+0x1>
    1298:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <derivate_counter_D>
	IZQ = LEERIZQ;
    129c:	89 b1       	in	r24, 0x09	; 9
    129e:	88 70       	andi	r24, 0x08	; 8
    12a0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <IZQ>
	DER = LEERDER;
    12a4:	89 b1       	in	r24, 0x09	; 9
    12a6:	84 70       	andi	r24, 0x04	; 4
    12a8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    12ac:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <estado>
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e1 55       	subi	r30, 0x51	; 81
    12b8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ba:	01 90       	ld	r0, Z+
    12bc:	f0 81       	ld	r31, Z
    12be:	e0 2d       	mov	r30, r0
    12c0:	09 95       	icall
}
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	2f 93       	push	r18
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D!=3200)derivate_counter_D++;
    12f4:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <derivate_counter_D>
    12f8:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <derivate_counter_D+0x1>
    12fc:	80 38       	cpi	r24, 0x80	; 128
    12fe:	9c 40       	sbci	r25, 0x0C	; 12
    1300:	49 f0       	breq	.+18     	; 0x1314 <__vector_7+0x30>
    1302:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <derivate_counter_D>
    1306:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <derivate_counter_D+0x1>
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <derivate_counter_D+0x1>
    1310:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <derivate_counter_D>
	if(derivate_counter_I!=3200)derivate_counter_I++;
    1314:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <derivate_counter_I>
    1318:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <derivate_counter_I+0x1>
    131c:	80 38       	cpi	r24, 0x80	; 128
    131e:	9c 40       	sbci	r25, 0x0C	; 12
    1320:	49 f0       	breq	.+18     	; 0x1334 <__vector_7+0x50>
    1322:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <derivate_counter_I>
    1326:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <derivate_counter_I+0x1>
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <derivate_counter_I+0x1>
    1330:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <derivate_counter_I>
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <getTiempoInforme>:
	return tiempoInforme;
}

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
}
    1344:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <tiempoInforme>
    1348:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <tiempoInforme+0x1>
    134c:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <tiempoInforme+0x2>
    1350:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <tiempoInforme+0x3>
    1354:	08 95       	ret

00001356 <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    1356:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <contPID>
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <contPID>
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	29 f4       	brne	.+10     	; 0x136e <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <Flag_PID>
		contPID=0;
    136a:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    136e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <contInformo>
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <contInformo>
    1378:	84 31       	cpi	r24, 0x14	; 20
    137a:	29 f4       	brne	.+10     	; 0x1386 <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Flag_Informo>
		contInformo=0;
    1382:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    1386:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <contButtton>
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <contButtton>
    1390:	8a 30       	cpi	r24, 0x0A	; 10
    1392:	29 f4       	brne	.+10     	; 0x139e <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Flag_Button>
		contButtton=0;
    139a:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    139e:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <contLeerDatos>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <contLeerDatos>
    13a8:	88 32       	cpi	r24, 0x28	; 40
    13aa:	29 f4       	brne	.+10     	; 0x13b6 <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <Flag_leerDatos>
		contLeerDatos=0;
    13b2:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <contLeerDatos>
    13b6:	08 95       	ret

000013b8 <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    13b8:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <Flag_PID>
    13bc:	88 23       	and	r24, r24
    13be:	21 f0       	breq	.+8      	; 0x13c8 <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    13c0:	0e 94 00 04 	call	0x800	; 0x800 <Actulizar_PID>
		Flag_PID = 0;
    13c4:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <Flag_PID>
	}
	if(Flag_Informo){
    13c8:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Flag_Informo>
    13cc:	88 23       	and	r24, r24
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    13d0:	0e 94 01 01 	call	0x202	; 0x202 <Informar_Actulizar>
		Flag_Informo = 0;
    13d4:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <Flag_Informo>
	}
	if(Flag_Button){
    13d8:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Flag_Button>
    13dc:	88 23       	and	r24, r24
    13de:	21 f0       	breq	.+8      	; 0x13e8 <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    13e0:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    13e4:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <Flag_Button>
	}
	if(Flag_leerDatos){
    13e8:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Flag_leerDatos>
    13ec:	88 23       	and	r24, r24
    13ee:	21 f0       	breq	.+8      	; 0x13f8 <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    13f0:	0e 94 81 01 	call	0x302	; 0x302 <actulizar_leerDatos>
		Flag_leerDatos=0;
    13f4:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <Flag_leerDatos>
    13f8:	08 95       	ret

000013fa <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    13fe:	93 e0       	ldi	r25, 0x03	; 3
    1400:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    1402:	9c e7       	ldi	r25, 0x7C	; 124
    1404:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    1406:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    140a:	08 95       	ret

0000140c <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    142e:	0e 94 ab 09 	call	0x1356	; 0x1356 <SEOS_SCH_Tasks>
	tiempoSEOS++;
    1432:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <tiempoSEOS>
    1436:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <tiempoSEOS+0x1>
    143a:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <tiempoSEOS+0x2>
    143e:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <tiempoSEOS+0x3>
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	a1 1d       	adc	r26, r1
    1446:	b1 1d       	adc	r27, r1
    1448:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <tiempoSEOS>
    144c:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <tiempoSEOS+0x1>
    1450:	a0 93 31 03 	sts	0x0331, r26	; 0x800331 <tiempoSEOS+0x2>
    1454:	b0 93 32 03 	sts	0x0332, r27	; 0x800332 <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    1458:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <contTiempo>
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	98 0f       	add	r25, r24
    1460:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <contTiempo>
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	a8 f0       	brcs	.+42     	; 0x1492 <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    1468:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <tiempoInforme>
    146c:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <tiempoInforme+0x1>
    1470:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <tiempoInforme+0x2>
    1474:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <tiempoInforme+0x3>
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	a1 1d       	adc	r26, r1
    147c:	b1 1d       	adc	r27, r1
    147e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <tiempoInforme>
    1482:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <tiempoInforme+0x1>
    1486:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <tiempoInforme+0x2>
    148a:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <tiempoInforme+0x3>
		contTiempo=0;
    148e:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <contTiempo>
	}
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14ca:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <valor+0x1>
    14ce:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <valor>
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <Inicializacion_slideResistor>:
    14e0:	87 b1       	in	r24, 0x07	; 7
    14e2:	8e 7f       	andi	r24, 0xFE	; 254
    14e4:	87 b9       	out	0x07, r24	; 7
    14e6:	88 b1       	in	r24, 0x08	; 8
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	88 b9       	out	0x08, r24	; 8
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    14f2:	ea e7       	ldi	r30, 0x7A	; 122
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ea       	ldi	r24, 0xAF	; 175
    14f8:	80 83       	st	Z, r24
    14fa:	ac e7       	ldi	r26, 0x7C	; 124
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	8c 91       	ld	r24, X
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	8c 93       	st	X, r24
    1504:	80 81       	ld	r24, Z
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	80 83       	st	Z, r24
    150a:	08 95       	ret

0000150c <getSlideResistor>:

uint16_t getSlideResistor(){
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    1510:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <i>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	96 39       	cpi	r25, 0x96	; 150
    1518:	08 f4       	brcc	.+2      	; 0x151c <getSlideResistor+0x10>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	2a e6       	ldi	r18, 0x6A	; 106
    151e:	82 9f       	mul	r24, r18
    1520:	90 0d       	add	r25, r0
    1522:	11 24       	eor	r1, r1
    1524:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <i>
	i = (i+1)%CANT;
    1528:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <i>
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	6f e0       	ldi	r22, 0x0F	; 15
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    1538:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <i>
	valores[i]=valor;
    153c:	c0 91 39 03 	lds	r28, 0x0339	; 0x800339 <i>
    1540:	d0 e0       	ldi	r29, 0x00	; 0
    1542:	cc 0f       	add	r28, r28
    1544:	dd 1f       	adc	r29, r29
    1546:	cc 0f       	add	r28, r28
    1548:	dd 1f       	adc	r29, r29
    154a:	c2 5c       	subi	r28, 0xC2	; 194
    154c:	dc 4f       	sbci	r29, 0xFC	; 252
    154e:	60 91 7a 03 	lds	r22, 0x037A	; 0x80037a <valor>
    1552:	70 91 7b 03 	lds	r23, 0x037B	; 0x80037b <valor+0x1>
    1556:	07 2e       	mov	r0, r23
    1558:	00 0c       	add	r0, r0
    155a:	88 0b       	sbc	r24, r24
    155c:	99 0b       	sbc	r25, r25
    155e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__floatsisf>
    1562:	68 83       	st	Y, r22
    1564:	79 83       	std	Y+1, r23	; 0x01
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    156a:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <total>
    156e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <total+0x1>
    1572:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <total+0x2>
    1576:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <total+0x3>
	for(k=0;k<CANT;k++){
    157a:	c0 e0       	ldi	r28, 0x00	; 0
    157c:	28 c0       	rjmp	.+80     	; 0x15ce <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    157e:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <i>
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0f 96       	adiw	r24, 0x0f	; 15
    1586:	8c 1b       	sub	r24, r28
    1588:	91 09       	sbc	r25, r1
    158a:	6f e0       	ldi	r22, 0x0F	; 15
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    1592:	fc 01       	movw	r30, r24
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	e2 5c       	subi	r30, 0xC2	; 194
    159e:	fc 4f       	sbci	r31, 0xFC	; 252
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <total>
    15ac:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <total+0x1>
    15b0:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <total+0x2>
    15b4:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <total+0x3>
    15b8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
    15bc:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <total>
    15c0:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <total+0x1>
    15c4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <total+0x2>
    15c8:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    15cc:	cf 5f       	subi	r28, 0xFF	; 255
    15ce:	cf 30       	cpi	r28, 0x0F	; 15
    15d0:	b0 f2       	brcs	.-84     	; 0x157e <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e7       	ldi	r20, 0x70	; 112
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <total>
    15de:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <total+0x1>
    15e2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <total+0x2>
    15e6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <total+0x3>
    15ea:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
    15ee:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fixunssfsi>
    15f2:	cb 01       	movw	r24, r22
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    15fa:	86 e0       	ldi	r24, 0x06	; 6
    15fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1606:	e1 ec       	ldi	r30, 0xC1	; 193
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	80 83       	st	Z, r24
    1610:	80 81       	ld	r24, Z
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	80 83       	st	Z, r24
    1616:	80 81       	ld	r24, Z
    1618:	88 60       	ori	r24, 0x08	; 8
    161a:	80 83       	st	Z, r24
    161c:	80 81       	ld	r24, Z
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	80 83       	st	Z, r24
    1622:	e0 ec       	ldi	r30, 0xC0	; 192
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 62       	ori	r24, 0x20	; 32
    162a:	80 83       	st	Z, r24
    162c:	08 95       	ret

0000162e <getEspacioDisponibleBuffer>:
    162e:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <tx_buffer_write>
    1632:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <tx_buffer_read>
    1636:	98 17       	cp	r25, r24
    1638:	18 f0       	brcs	.+6      	; 0x1640 <getEspacioDisponibleBuffer+0x12>
    163a:	89 1b       	sub	r24, r25
    163c:	8a 51       	subi	r24, 0x1A	; 26
    163e:	08 95       	ret
    1640:	89 1b       	sub	r24, r25
    1642:	08 95       	ret

00001644 <UART_TransmitChar>:
    1644:	48 2f       	mov	r20, r24
    1646:	20 91 e3 03 	lds	r18, 0x03E3	; 0x8003e3 <tx_buffer_write>
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	c9 01       	movw	r24, r18
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	66 ee       	ldi	r22, 0xE6	; 230
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    1658:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <tx_buffer_read>
    165c:	98 17       	cp	r25, r24
    165e:	59 f0       	breq	.+22     	; 0x1676 <UART_TransmitChar+0x32>
    1660:	f9 01       	movw	r30, r18
    1662:	eb 51       	subi	r30, 0x1B	; 27
    1664:	fc 4f       	sbci	r31, 0xFC	; 252
    1666:	40 83       	st	Z, r20
    1668:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <tx_buffer_write>
    166c:	e1 ec       	ldi	r30, 0xC1	; 193
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 62       	ori	r24, 0x20	; 32
    1674:	80 83       	st	Z, r24
    1676:	08 95       	ret

00001678 <UART_TransmitString>:
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	ec 01       	movw	r28, r24
    1680:	16 2f       	mov	r17, r22
    1682:	0e 94 17 0b 	call	0x162e	; 0x162e <getEspacioDisponibleBuffer>
    1686:	18 17       	cp	r17, r24
    1688:	20 f0       	brcs	.+8      	; 0x1692 <UART_TransmitString+0x1a>
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <UART_TransmitString+0x20>
    168c:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_TransmitChar>
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	88 81       	ld	r24, Y
    1694:	81 11       	cpse	r24, r1
    1696:	fa cf       	rjmp	.-12     	; 0x168c <UART_TransmitString+0x14>
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	08 95       	ret

000016a0 <__vector_19>:
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	5f 93       	push	r21
    16ac:	6f 93       	push	r22
    16ae:	7f 93       	push	r23
    16b0:	8f 93       	push	r24
    16b2:	9f 93       	push	r25
    16b4:	af 93       	push	r26
    16b6:	bf 93       	push	r27
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	e0 91 e4 03 	lds	r30, 0x03E4	; 0x8003e4 <tx_buffer_read>
    16c0:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <tx_buffer_write>
    16c4:	e8 17       	cp	r30, r24
    16c6:	89 f0       	breq	.+34     	; 0x16ea <__vector_19+0x4a>
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	eb 51       	subi	r30, 0x1B	; 27
    16cc:	fc 4f       	sbci	r31, 0xFC	; 252
    16ce:	80 81       	ld	r24, Z
    16d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    16d4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <tx_buffer_read>
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	66 ee       	ldi	r22, 0xE6	; 230
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    16e4:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <tx_buffer_read>
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__vector_19+0x54>
    16ea:	e1 ec       	ldi	r30, 0xC1	; 193
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 7d       	andi	r24, 0xDF	; 223
    16f2:	80 83       	st	Z, r24
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <SacarDatosBufferEnter>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	ec 01       	movw	r28, r24
    1716:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <recibioEnter>
    171a:	88 23       	and	r24, r24
    171c:	21 f1       	breq	.+72     	; 0x1766 <SacarDatosBufferEnter+0x56>
    171e:	f8 94       	cli
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <SacarDatosBufferEnter+0x36>
    1724:	fe 01       	movw	r30, r28
    1726:	e2 0f       	add	r30, r18
    1728:	f1 1d       	adc	r31, r1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	dc 01       	movw	r26, r24
    172e:	a1 58       	subi	r26, 0x81	; 129
    1730:	bc 4f       	sbci	r27, 0xFC	; 252
    1732:	3c 91       	ld	r19, X
    1734:	30 83       	st	Z, r19
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	64 e6       	ldi	r22, 0x64	; 100
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
    1740:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <rx_buffer_read>
    1744:	2f 5f       	subi	r18, 0xFF	; 255
    1746:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <rx_buffer_write>
    174a:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <rx_buffer_read>
    174e:	98 17       	cp	r25, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <SacarDatosBufferEnter+0x46>
    1752:	23 36       	cpi	r18, 0x63	; 99
    1754:	38 f3       	brcs	.-50     	; 0x1724 <SacarDatosBufferEnter+0x14>
    1756:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <recibioEnter>
    175a:	78 94       	sei
    175c:	c2 0f       	add	r28, r18
    175e:	d1 1d       	adc	r29, r1
    1760:	18 82       	st	Y, r1
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <SacarDatosBufferEnter+0x58>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <__vector_18>:

ISR(USART_RX_vect){
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    178e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <rx_buffer_write>
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	64 e6       	ldi	r22, 0x64	; 100
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__divmodhi4>
	uint8_t receivedChar = UDR0;
    179e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    17a2:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <rx_buffer_read>
    17a6:	28 17       	cp	r18, r24
    17a8:	a9 f0       	breq	.+42     	; 0x17d4 <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    17aa:	9a 30       	cpi	r25, 0x0A	; 10
    17ac:	11 f0       	breq	.+4      	; 0x17b2 <__vector_18+0x44>
    17ae:	9d 30       	cpi	r25, 0x0D	; 13
    17b0:	21 f4       	brne	.+8      	; 0x17ba <__vector_18+0x4c>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <recibioEnter>
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    17ba:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <recibioEnter>
    17be:	31 11       	cpse	r19, r1
    17c0:	20 93 7d 03 	sts	0x037D, r18	; 0x80037d <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    17c4:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <rx_buffer_write>
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	e1 58       	subi	r30, 0x81	; 129
    17cc:	fc 4f       	sbci	r31, 0xFC	; 252
    17ce:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    17d0:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <rx_buffer_write>
		}
	}
}
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	3f 91       	pop	r19
    17e8:	2f 91       	pop	r18
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <__subsf3>:
    17f4:	50 58       	subi	r21, 0x80	; 128

000017f6 <__addsf3>:
    17f6:	bb 27       	eor	r27, r27
    17f8:	aa 27       	eor	r26, r26
    17fa:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3x>
    17fe:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    1802:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscA>
    1806:	38 f0       	brcs	.+14     	; 0x1816 <__addsf3+0x20>
    1808:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_pscB>
    180c:	20 f0       	brcs	.+8      	; 0x1816 <__addsf3+0x20>
    180e:	39 f4       	brne	.+14     	; 0x181e <__addsf3+0x28>
    1810:	9f 3f       	cpi	r25, 0xFF	; 255
    1812:	19 f4       	brne	.+6      	; 0x181a <__addsf3+0x24>
    1814:	26 f4       	brtc	.+8      	; 0x181e <__addsf3+0x28>
    1816:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_nan>
    181a:	0e f4       	brtc	.+2      	; 0x181e <__addsf3+0x28>
    181c:	e0 95       	com	r30
    181e:	e7 fb       	bst	r30, 7
    1820:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_inf>

00001824 <__addsf3x>:
    1824:	e9 2f       	mov	r30, r25
    1826:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fp_split3>
    182a:	58 f3       	brcs	.-42     	; 0x1802 <__addsf3+0xc>
    182c:	ba 17       	cp	r27, r26
    182e:	62 07       	cpc	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	95 07       	cpc	r25, r21
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__addsf3x+0x1c>
    1838:	79 f4       	brne	.+30     	; 0x1858 <__addsf3x+0x34>
    183a:	a6 f5       	brtc	.+104    	; 0x18a4 <__addsf3x+0x80>
    183c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_zero>
    1840:	0e f4       	brtc	.+2      	; 0x1844 <__addsf3x+0x20>
    1842:	e0 95       	com	r30
    1844:	0b 2e       	mov	r0, r27
    1846:	ba 2f       	mov	r27, r26
    1848:	a0 2d       	mov	r26, r0
    184a:	0b 01       	movw	r0, r22
    184c:	b9 01       	movw	r22, r18
    184e:	90 01       	movw	r18, r0
    1850:	0c 01       	movw	r0, r24
    1852:	ca 01       	movw	r24, r20
    1854:	a0 01       	movw	r20, r0
    1856:	11 24       	eor	r1, r1
    1858:	ff 27       	eor	r31, r31
    185a:	59 1b       	sub	r21, r25
    185c:	99 f0       	breq	.+38     	; 0x1884 <__addsf3x+0x60>
    185e:	59 3f       	cpi	r21, 0xF9	; 249
    1860:	50 f4       	brcc	.+20     	; 0x1876 <__addsf3x+0x52>
    1862:	50 3e       	cpi	r21, 0xE0	; 224
    1864:	68 f1       	brcs	.+90     	; 0x18c0 <__addsf3x+0x9c>
    1866:	1a 16       	cp	r1, r26
    1868:	f0 40       	sbci	r31, 0x00	; 0
    186a:	a2 2f       	mov	r26, r18
    186c:	23 2f       	mov	r18, r19
    186e:	34 2f       	mov	r19, r20
    1870:	44 27       	eor	r20, r20
    1872:	58 5f       	subi	r21, 0xF8	; 248
    1874:	f3 cf       	rjmp	.-26     	; 0x185c <__addsf3x+0x38>
    1876:	46 95       	lsr	r20
    1878:	37 95       	ror	r19
    187a:	27 95       	ror	r18
    187c:	a7 95       	ror	r26
    187e:	f0 40       	sbci	r31, 0x00	; 0
    1880:	53 95       	inc	r21
    1882:	c9 f7       	brne	.-14     	; 0x1876 <__addsf3x+0x52>
    1884:	7e f4       	brtc	.+30     	; 0x18a4 <__addsf3x+0x80>
    1886:	1f 16       	cp	r1, r31
    1888:	ba 0b       	sbc	r27, r26
    188a:	62 0b       	sbc	r22, r18
    188c:	73 0b       	sbc	r23, r19
    188e:	84 0b       	sbc	r24, r20
    1890:	ba f0       	brmi	.+46     	; 0x18c0 <__addsf3x+0x9c>
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	a1 f0       	breq	.+40     	; 0x18be <__addsf3x+0x9a>
    1896:	ff 0f       	add	r31, r31
    1898:	bb 1f       	adc	r27, r27
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	c2 f7       	brpl	.-16     	; 0x1892 <__addsf3x+0x6e>
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <__addsf3x+0x9c>
    18a4:	ba 0f       	add	r27, r26
    18a6:	62 1f       	adc	r22, r18
    18a8:	73 1f       	adc	r23, r19
    18aa:	84 1f       	adc	r24, r20
    18ac:	48 f4       	brcc	.+18     	; 0x18c0 <__addsf3x+0x9c>
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	f7 95       	ror	r31
    18b8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ba:	08 f0       	brcs	.+2      	; 0x18be <__addsf3x+0x9a>
    18bc:	b0 cf       	rjmp	.-160    	; 0x181e <__addsf3+0x28>
    18be:	93 95       	inc	r25
    18c0:	88 0f       	add	r24, r24
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <__addsf3x+0xa2>
    18c4:	99 27       	eor	r25, r25
    18c6:	ee 0f       	add	r30, r30
    18c8:	97 95       	ror	r25
    18ca:	87 95       	ror	r24
    18cc:	08 95       	ret

000018ce <__cmpsf2>:
    18ce:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fp_cmp>
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <__cmpsf2+0x8>
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	08 95       	ret

000018d8 <__divsf3>:
    18d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <__divsf3x>
    18dc:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    18e0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_pscB>
    18e4:	58 f0       	brcs	.+22     	; 0x18fc <__divsf3+0x24>
    18e6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscA>
    18ea:	40 f0       	brcs	.+16     	; 0x18fc <__divsf3+0x24>
    18ec:	29 f4       	brne	.+10     	; 0x18f8 <__divsf3+0x20>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	29 f0       	breq	.+10     	; 0x18fc <__divsf3+0x24>
    18f2:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_inf>
    18f6:	51 11       	cpse	r21, r1
    18f8:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_szero>
    18fc:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_nan>

00001900 <__divsf3x>:
    1900:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fp_split3>
    1904:	68 f3       	brcs	.-38     	; 0x18e0 <__divsf3+0x8>

00001906 <__divsf3_pse>:
    1906:	99 23       	and	r25, r25
    1908:	b1 f3       	breq	.-20     	; 0x18f6 <__divsf3+0x1e>
    190a:	55 23       	and	r21, r21
    190c:	91 f3       	breq	.-28     	; 0x18f2 <__divsf3+0x1a>
    190e:	95 1b       	sub	r25, r21
    1910:	55 0b       	sbc	r21, r21
    1912:	bb 27       	eor	r27, r27
    1914:	aa 27       	eor	r26, r26
    1916:	62 17       	cp	r22, r18
    1918:	73 07       	cpc	r23, r19
    191a:	84 07       	cpc	r24, r20
    191c:	38 f0       	brcs	.+14     	; 0x192c <__divsf3_pse+0x26>
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	44 1f       	adc	r20, r20
    1928:	aa 1f       	adc	r26, r26
    192a:	a9 f3       	breq	.-22     	; 0x1916 <__divsf3_pse+0x10>
    192c:	35 d0       	rcall	.+106    	; 0x1998 <__divsf3_pse+0x92>
    192e:	0e 2e       	mov	r0, r30
    1930:	3a f0       	brmi	.+14     	; 0x1940 <__divsf3_pse+0x3a>
    1932:	e0 e8       	ldi	r30, 0x80	; 128
    1934:	32 d0       	rcall	.+100    	; 0x199a <__divsf3_pse+0x94>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	e6 95       	lsr	r30
    193c:	00 1c       	adc	r0, r0
    193e:	ca f7       	brpl	.-14     	; 0x1932 <__divsf3_pse+0x2c>
    1940:	2b d0       	rcall	.+86     	; 0x1998 <__divsf3_pse+0x92>
    1942:	fe 2f       	mov	r31, r30
    1944:	29 d0       	rcall	.+82     	; 0x1998 <__divsf3_pse+0x92>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	bb 1f       	adc	r27, r27
    194e:	26 17       	cp	r18, r22
    1950:	37 07       	cpc	r19, r23
    1952:	48 07       	cpc	r20, r24
    1954:	ab 07       	cpc	r26, r27
    1956:	b0 e8       	ldi	r27, 0x80	; 128
    1958:	09 f0       	breq	.+2      	; 0x195c <__divsf3_pse+0x56>
    195a:	bb 0b       	sbc	r27, r27
    195c:	80 2d       	mov	r24, r0
    195e:	bf 01       	movw	r22, r30
    1960:	ff 27       	eor	r31, r31
    1962:	93 58       	subi	r25, 0x83	; 131
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	3a f0       	brmi	.+14     	; 0x1976 <__divsf3_pse+0x70>
    1968:	9e 3f       	cpi	r25, 0xFE	; 254
    196a:	51 05       	cpc	r21, r1
    196c:	78 f0       	brcs	.+30     	; 0x198c <__divsf3_pse+0x86>
    196e:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_inf>
    1972:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_szero>
    1976:	5f 3f       	cpi	r21, 0xFF	; 255
    1978:	e4 f3       	brlt	.-8      	; 0x1972 <__divsf3_pse+0x6c>
    197a:	98 3e       	cpi	r25, 0xE8	; 232
    197c:	d4 f3       	brlt	.-12     	; 0x1972 <__divsf3_pse+0x6c>
    197e:	86 95       	lsr	r24
    1980:	77 95       	ror	r23
    1982:	67 95       	ror	r22
    1984:	b7 95       	ror	r27
    1986:	f7 95       	ror	r31
    1988:	9f 5f       	subi	r25, 0xFF	; 255
    198a:	c9 f7       	brne	.-14     	; 0x197e <__divsf3_pse+0x78>
    198c:	88 0f       	add	r24, r24
    198e:	91 1d       	adc	r25, r1
    1990:	96 95       	lsr	r25
    1992:	87 95       	ror	r24
    1994:	97 f9       	bld	r25, 7
    1996:	08 95       	ret
    1998:	e1 e0       	ldi	r30, 0x01	; 1
    199a:	66 0f       	add	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	bb 1f       	adc	r27, r27
    19a2:	62 17       	cp	r22, r18
    19a4:	73 07       	cpc	r23, r19
    19a6:	84 07       	cpc	r24, r20
    19a8:	ba 07       	cpc	r27, r26
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <__divsf3_pse+0xae>
    19ac:	62 1b       	sub	r22, r18
    19ae:	73 0b       	sbc	r23, r19
    19b0:	84 0b       	sbc	r24, r20
    19b2:	ba 0b       	sbc	r27, r26
    19b4:	ee 1f       	adc	r30, r30
    19b6:	88 f7       	brcc	.-30     	; 0x199a <__divsf3_pse+0x94>
    19b8:	e0 95       	com	r30
    19ba:	08 95       	ret

000019bc <__fixsfsi>:
    19bc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fixunssfsi>
    19c0:	68 94       	set
    19c2:	b1 11       	cpse	r27, r1
    19c4:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_szero>
    19c8:	08 95       	ret

000019ca <__fixunssfsi>:
    19ca:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_splitA>
    19ce:	88 f0       	brcs	.+34     	; 0x19f2 <__fixunssfsi+0x28>
    19d0:	9f 57       	subi	r25, 0x7F	; 127
    19d2:	98 f0       	brcs	.+38     	; 0x19fa <__fixunssfsi+0x30>
    19d4:	b9 2f       	mov	r27, r25
    19d6:	99 27       	eor	r25, r25
    19d8:	b7 51       	subi	r27, 0x17	; 23
    19da:	b0 f0       	brcs	.+44     	; 0x1a08 <__fixunssfsi+0x3e>
    19dc:	e1 f0       	breq	.+56     	; 0x1a16 <__fixunssfsi+0x4c>
    19de:	66 0f       	add	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	1a f0       	brmi	.+6      	; 0x19ee <__fixunssfsi+0x24>
    19e8:	ba 95       	dec	r27
    19ea:	c9 f7       	brne	.-14     	; 0x19de <__fixunssfsi+0x14>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <__fixunssfsi+0x4c>
    19ee:	b1 30       	cpi	r27, 0x01	; 1
    19f0:	91 f0       	breq	.+36     	; 0x1a16 <__fixunssfsi+0x4c>
    19f2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_zero>
    19f6:	b1 e0       	ldi	r27, 0x01	; 1
    19f8:	08 95       	ret
    19fa:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_zero>
    19fe:	67 2f       	mov	r22, r23
    1a00:	78 2f       	mov	r23, r24
    1a02:	88 27       	eor	r24, r24
    1a04:	b8 5f       	subi	r27, 0xF8	; 248
    1a06:	39 f0       	breq	.+14     	; 0x1a16 <__fixunssfsi+0x4c>
    1a08:	b9 3f       	cpi	r27, 0xF9	; 249
    1a0a:	cc f3       	brlt	.-14     	; 0x19fe <__fixunssfsi+0x34>
    1a0c:	86 95       	lsr	r24
    1a0e:	77 95       	ror	r23
    1a10:	67 95       	ror	r22
    1a12:	b3 95       	inc	r27
    1a14:	d9 f7       	brne	.-10     	; 0x1a0c <__fixunssfsi+0x42>
    1a16:	3e f4       	brtc	.+14     	; 0x1a26 <__fixunssfsi+0x5c>
    1a18:	90 95       	com	r25
    1a1a:	80 95       	com	r24
    1a1c:	70 95       	com	r23
    1a1e:	61 95       	neg	r22
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	8f 4f       	sbci	r24, 0xFF	; 255
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	08 95       	ret

00001a28 <__floatunsisf>:
    1a28:	e8 94       	clt
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <__floatsisf+0x12>

00001a2c <__floatsisf>:
    1a2c:	97 fb       	bst	r25, 7
    1a2e:	3e f4       	brtc	.+14     	; 0x1a3e <__floatsisf+0x12>
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	99 23       	and	r25, r25
    1a40:	a9 f0       	breq	.+42     	; 0x1a6c <__floatsisf+0x40>
    1a42:	f9 2f       	mov	r31, r25
    1a44:	96 e9       	ldi	r25, 0x96	; 150
    1a46:	bb 27       	eor	r27, r27
    1a48:	93 95       	inc	r25
    1a4a:	f6 95       	lsr	r31
    1a4c:	87 95       	ror	r24
    1a4e:	77 95       	ror	r23
    1a50:	67 95       	ror	r22
    1a52:	b7 95       	ror	r27
    1a54:	f1 11       	cpse	r31, r1
    1a56:	f8 cf       	rjmp	.-16     	; 0x1a48 <__floatsisf+0x1c>
    1a58:	fa f4       	brpl	.+62     	; 0x1a98 <__floatsisf+0x6c>
    1a5a:	bb 0f       	add	r27, r27
    1a5c:	11 f4       	brne	.+4      	; 0x1a62 <__floatsisf+0x36>
    1a5e:	60 ff       	sbrs	r22, 0
    1a60:	1b c0       	rjmp	.+54     	; 0x1a98 <__floatsisf+0x6c>
    1a62:	6f 5f       	subi	r22, 0xFF	; 255
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	16 c0       	rjmp	.+44     	; 0x1a98 <__floatsisf+0x6c>
    1a6c:	88 23       	and	r24, r24
    1a6e:	11 f0       	breq	.+4      	; 0x1a74 <__floatsisf+0x48>
    1a70:	96 e9       	ldi	r25, 0x96	; 150
    1a72:	11 c0       	rjmp	.+34     	; 0x1a96 <__floatsisf+0x6a>
    1a74:	77 23       	and	r23, r23
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <__floatsisf+0x54>
    1a78:	9e e8       	ldi	r25, 0x8E	; 142
    1a7a:	87 2f       	mov	r24, r23
    1a7c:	76 2f       	mov	r23, r22
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <__floatsisf+0x5e>
    1a80:	66 23       	and	r22, r22
    1a82:	71 f0       	breq	.+28     	; 0x1aa0 <__floatsisf+0x74>
    1a84:	96 e8       	ldi	r25, 0x86	; 134
    1a86:	86 2f       	mov	r24, r22
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	2a f0       	brmi	.+10     	; 0x1a98 <__floatsisf+0x6c>
    1a8e:	9a 95       	dec	r25
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	da f7       	brpl	.-10     	; 0x1a8e <__floatsisf+0x62>
    1a98:	88 0f       	add	r24, r24
    1a9a:	96 95       	lsr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret

00001aa2 <__fp_cmp>:
    1aa2:	99 0f       	add	r25, r25
    1aa4:	00 08       	sbc	r0, r0
    1aa6:	55 0f       	add	r21, r21
    1aa8:	aa 0b       	sbc	r26, r26
    1aaa:	e0 e8       	ldi	r30, 0x80	; 128
    1aac:	fe ef       	ldi	r31, 0xFE	; 254
    1aae:	16 16       	cp	r1, r22
    1ab0:	17 06       	cpc	r1, r23
    1ab2:	e8 07       	cpc	r30, r24
    1ab4:	f9 07       	cpc	r31, r25
    1ab6:	c0 f0       	brcs	.+48     	; 0x1ae8 <__fp_cmp+0x46>
    1ab8:	12 16       	cp	r1, r18
    1aba:	13 06       	cpc	r1, r19
    1abc:	e4 07       	cpc	r30, r20
    1abe:	f5 07       	cpc	r31, r21
    1ac0:	98 f0       	brcs	.+38     	; 0x1ae8 <__fp_cmp+0x46>
    1ac2:	62 1b       	sub	r22, r18
    1ac4:	73 0b       	sbc	r23, r19
    1ac6:	84 0b       	sbc	r24, r20
    1ac8:	95 0b       	sbc	r25, r21
    1aca:	39 f4       	brne	.+14     	; 0x1ada <__fp_cmp+0x38>
    1acc:	0a 26       	eor	r0, r26
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <__fp_cmp+0x46>
    1ad0:	23 2b       	or	r18, r19
    1ad2:	24 2b       	or	r18, r20
    1ad4:	25 2b       	or	r18, r21
    1ad6:	21 f4       	brne	.+8      	; 0x1ae0 <__fp_cmp+0x3e>
    1ad8:	08 95       	ret
    1ada:	0a 26       	eor	r0, r26
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <__fp_cmp+0x3e>
    1ade:	a1 40       	sbci	r26, 0x01	; 1
    1ae0:	a6 95       	lsr	r26
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	81 1d       	adc	r24, r1
    1ae6:	81 1d       	adc	r24, r1
    1ae8:	08 95       	ret

00001aea <__fp_inf>:
    1aea:	97 f9       	bld	r25, 7
    1aec:	9f 67       	ori	r25, 0x7F	; 127
    1aee:	80 e8       	ldi	r24, 0x80	; 128
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	08 95       	ret

00001af6 <__fp_nan>:
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	80 ec       	ldi	r24, 0xC0	; 192
    1afa:	08 95       	ret

00001afc <__fp_pscA>:
    1afc:	00 24       	eor	r0, r0
    1afe:	0a 94       	dec	r0
    1b00:	16 16       	cp	r1, r22
    1b02:	17 06       	cpc	r1, r23
    1b04:	18 06       	cpc	r1, r24
    1b06:	09 06       	cpc	r0, r25
    1b08:	08 95       	ret

00001b0a <__fp_pscB>:
    1b0a:	00 24       	eor	r0, r0
    1b0c:	0a 94       	dec	r0
    1b0e:	12 16       	cp	r1, r18
    1b10:	13 06       	cpc	r1, r19
    1b12:	14 06       	cpc	r1, r20
    1b14:	05 06       	cpc	r0, r21
    1b16:	08 95       	ret

00001b18 <__fp_round>:
    1b18:	09 2e       	mov	r0, r25
    1b1a:	03 94       	inc	r0
    1b1c:	00 0c       	add	r0, r0
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <__fp_round+0xc>
    1b20:	88 23       	and	r24, r24
    1b22:	52 f0       	brmi	.+20     	; 0x1b38 <__fp_round+0x20>
    1b24:	bb 0f       	add	r27, r27
    1b26:	40 f4       	brcc	.+16     	; 0x1b38 <__fp_round+0x20>
    1b28:	bf 2b       	or	r27, r31
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <__fp_round+0x18>
    1b2c:	60 ff       	sbrs	r22, 0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <__fp_round+0x20>
    1b30:	6f 5f       	subi	r22, 0xFF	; 255
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	08 95       	ret

00001b3a <__fp_split3>:
    1b3a:	57 fd       	sbrc	r21, 7
    1b3c:	90 58       	subi	r25, 0x80	; 128
    1b3e:	44 0f       	add	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	59 f0       	breq	.+22     	; 0x1b5a <__fp_splitA+0x10>
    1b44:	5f 3f       	cpi	r21, 0xFF	; 255
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <__fp_splitA+0x1a>
    1b48:	47 95       	ror	r20

00001b4a <__fp_splitA>:
    1b4a:	88 0f       	add	r24, r24
    1b4c:	97 fb       	bst	r25, 7
    1b4e:	99 1f       	adc	r25, r25
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <__fp_splitA+0x20>
    1b52:	9f 3f       	cpi	r25, 0xFF	; 255
    1b54:	79 f0       	breq	.+30     	; 0x1b74 <__fp_splitA+0x2a>
    1b56:	87 95       	ror	r24
    1b58:	08 95       	ret
    1b5a:	12 16       	cp	r1, r18
    1b5c:	13 06       	cpc	r1, r19
    1b5e:	14 06       	cpc	r1, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	f2 cf       	rjmp	.-28     	; 0x1b48 <__fp_split3+0xe>
    1b64:	46 95       	lsr	r20
    1b66:	f1 df       	rcall	.-30     	; 0x1b4a <__fp_splitA>
    1b68:	08 c0       	rjmp	.+16     	; 0x1b7a <__fp_splitA+0x30>
    1b6a:	16 16       	cp	r1, r22
    1b6c:	17 06       	cpc	r1, r23
    1b6e:	18 06       	cpc	r1, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	f1 cf       	rjmp	.-30     	; 0x1b56 <__fp_splitA+0xc>
    1b74:	86 95       	lsr	r24
    1b76:	71 05       	cpc	r23, r1
    1b78:	61 05       	cpc	r22, r1
    1b7a:	08 94       	sec
    1b7c:	08 95       	ret

00001b7e <__fp_zero>:
    1b7e:	e8 94       	clt

00001b80 <__fp_szero>:
    1b80:	bb 27       	eor	r27, r27
    1b82:	66 27       	eor	r22, r22
    1b84:	77 27       	eor	r23, r23
    1b86:	cb 01       	movw	r24, r22
    1b88:	97 f9       	bld	r25, 7
    1b8a:	08 95       	ret

00001b8c <__gesf2>:
    1b8c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fp_cmp>
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <__gesf2+0x8>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	08 95       	ret

00001b96 <__mulsf3>:
    1b96:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__mulsf3x>
    1b9a:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    1b9e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscA>
    1ba2:	38 f0       	brcs	.+14     	; 0x1bb2 <__mulsf3+0x1c>
    1ba4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_pscB>
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <__mulsf3+0x1c>
    1baa:	95 23       	and	r25, r21
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <__mulsf3+0x1c>
    1bae:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_inf>
    1bb2:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_nan>
    1bb6:	11 24       	eor	r1, r1
    1bb8:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_szero>

00001bbc <__mulsf3x>:
    1bbc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fp_split3>
    1bc0:	70 f3       	brcs	.-36     	; 0x1b9e <__mulsf3+0x8>

00001bc2 <__mulsf3_pse>:
    1bc2:	95 9f       	mul	r25, r21
    1bc4:	c1 f3       	breq	.-16     	; 0x1bb6 <__mulsf3+0x20>
    1bc6:	95 0f       	add	r25, r21
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	55 1f       	adc	r21, r21
    1bcc:	62 9f       	mul	r22, r18
    1bce:	f0 01       	movw	r30, r0
    1bd0:	72 9f       	mul	r23, r18
    1bd2:	bb 27       	eor	r27, r27
    1bd4:	f0 0d       	add	r31, r0
    1bd6:	b1 1d       	adc	r27, r1
    1bd8:	63 9f       	mul	r22, r19
    1bda:	aa 27       	eor	r26, r26
    1bdc:	f0 0d       	add	r31, r0
    1bde:	b1 1d       	adc	r27, r1
    1be0:	aa 1f       	adc	r26, r26
    1be2:	64 9f       	mul	r22, r20
    1be4:	66 27       	eor	r22, r22
    1be6:	b0 0d       	add	r27, r0
    1be8:	a1 1d       	adc	r26, r1
    1bea:	66 1f       	adc	r22, r22
    1bec:	82 9f       	mul	r24, r18
    1bee:	22 27       	eor	r18, r18
    1bf0:	b0 0d       	add	r27, r0
    1bf2:	a1 1d       	adc	r26, r1
    1bf4:	62 1f       	adc	r22, r18
    1bf6:	73 9f       	mul	r23, r19
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	62 1f       	adc	r22, r18
    1bfe:	83 9f       	mul	r24, r19
    1c00:	a0 0d       	add	r26, r0
    1c02:	61 1d       	adc	r22, r1
    1c04:	22 1f       	adc	r18, r18
    1c06:	74 9f       	mul	r23, r20
    1c08:	33 27       	eor	r19, r19
    1c0a:	a0 0d       	add	r26, r0
    1c0c:	61 1d       	adc	r22, r1
    1c0e:	23 1f       	adc	r18, r19
    1c10:	84 9f       	mul	r24, r20
    1c12:	60 0d       	add	r22, r0
    1c14:	21 1d       	adc	r18, r1
    1c16:	82 2f       	mov	r24, r18
    1c18:	76 2f       	mov	r23, r22
    1c1a:	6a 2f       	mov	r22, r26
    1c1c:	11 24       	eor	r1, r1
    1c1e:	9f 57       	subi	r25, 0x7F	; 127
    1c20:	50 40       	sbci	r21, 0x00	; 0
    1c22:	9a f0       	brmi	.+38     	; 0x1c4a <__mulsf3_pse+0x88>
    1c24:	f1 f0       	breq	.+60     	; 0x1c62 <__mulsf3_pse+0xa0>
    1c26:	88 23       	and	r24, r24
    1c28:	4a f0       	brmi	.+18     	; 0x1c3c <__mulsf3_pse+0x7a>
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	66 1f       	adc	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	91 50       	subi	r25, 0x01	; 1
    1c38:	50 40       	sbci	r21, 0x00	; 0
    1c3a:	a9 f7       	brne	.-22     	; 0x1c26 <__mulsf3_pse+0x64>
    1c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3e:	51 05       	cpc	r21, r1
    1c40:	80 f0       	brcs	.+32     	; 0x1c62 <__mulsf3_pse+0xa0>
    1c42:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_inf>
    1c46:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_szero>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	e4 f3       	brlt	.-8      	; 0x1c46 <__mulsf3_pse+0x84>
    1c4e:	98 3e       	cpi	r25, 0xE8	; 232
    1c50:	d4 f3       	brlt	.-12     	; 0x1c46 <__mulsf3_pse+0x84>
    1c52:	86 95       	lsr	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	b7 95       	ror	r27
    1c5a:	f7 95       	ror	r31
    1c5c:	e7 95       	ror	r30
    1c5e:	9f 5f       	subi	r25, 0xFF	; 255
    1c60:	c1 f7       	brne	.-16     	; 0x1c52 <__mulsf3_pse+0x90>
    1c62:	fe 2b       	or	r31, r30
    1c64:	88 0f       	add	r24, r24
    1c66:	91 1d       	adc	r25, r1
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	08 95       	ret

00001c70 <__udivmodhi4>:
    1c70:	aa 1b       	sub	r26, r26
    1c72:	bb 1b       	sub	r27, r27
    1c74:	51 e1       	ldi	r21, 0x11	; 17
    1c76:	07 c0       	rjmp	.+14     	; 0x1c86 <__udivmodhi4_ep>

00001c78 <__udivmodhi4_loop>:
    1c78:	aa 1f       	adc	r26, r26
    1c7a:	bb 1f       	adc	r27, r27
    1c7c:	a6 17       	cp	r26, r22
    1c7e:	b7 07       	cpc	r27, r23
    1c80:	10 f0       	brcs	.+4      	; 0x1c86 <__udivmodhi4_ep>
    1c82:	a6 1b       	sub	r26, r22
    1c84:	b7 0b       	sbc	r27, r23

00001c86 <__udivmodhi4_ep>:
    1c86:	88 1f       	adc	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	5a 95       	dec	r21
    1c8c:	a9 f7       	brne	.-22     	; 0x1c78 <__udivmodhi4_loop>
    1c8e:	80 95       	com	r24
    1c90:	90 95       	com	r25
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	08 95       	ret

00001c98 <__divmodhi4>:
    1c98:	97 fb       	bst	r25, 7
    1c9a:	07 2e       	mov	r0, r23
    1c9c:	16 f4       	brtc	.+4      	; 0x1ca2 <__divmodhi4+0xa>
    1c9e:	00 94       	com	r0
    1ca0:	07 d0       	rcall	.+14     	; 0x1cb0 <__divmodhi4_neg1>
    1ca2:	77 fd       	sbrc	r23, 7
    1ca4:	09 d0       	rcall	.+18     	; 0x1cb8 <__divmodhi4_neg2>
    1ca6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__udivmodhi4>
    1caa:	07 fc       	sbrc	r0, 7
    1cac:	05 d0       	rcall	.+10     	; 0x1cb8 <__divmodhi4_neg2>
    1cae:	3e f4       	brtc	.+14     	; 0x1cbe <__divmodhi4_exit>

00001cb0 <__divmodhi4_neg1>:
    1cb0:	90 95       	com	r25
    1cb2:	81 95       	neg	r24
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	08 95       	ret

00001cb8 <__divmodhi4_neg2>:
    1cb8:	70 95       	com	r23
    1cba:	61 95       	neg	r22
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255

00001cbe <__divmodhi4_exit>:
    1cbe:	08 95       	ret

00001cc0 <_exit>:
    1cc0:	f8 94       	cli

00001cc2 <__stop_program>:
    1cc2:	ff cf       	rjmp	.-2      	; 0x1cc2 <__stop_program>
