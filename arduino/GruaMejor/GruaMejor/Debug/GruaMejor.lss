
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800100  000026ca  0000275e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  008002f6  008002f6  00002954  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a73  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135e  00000000  00000000  0000576f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eb7  00000000  00000000  00006acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  00008984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1d  00000000  00000000  000092f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b13  00000000  00000000  0000a015  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000bb28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__vector_1>
       8:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_11>
      30:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_18>
      4c:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3f       	cpi	r26, 0xF6	; 246
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 ef       	ldi	r26, 0xF6	; 246
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 31       	cpi	r26, 0x1A	; 26
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      9e:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0,FLAG_button_B_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <contAOFF>
		if(++contAON>15){
      c8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <contAON>
		if(++contAOFF>15){
      e8:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <FLAG_button_A_change>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0d c0       	rjmp	.+26     	; 0x12c <button_Actulizar+0x6c>
		//apretado
		contBOFF=0;
     112:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <contBOFF>
		if(++contB>15){
     116:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <contB>
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <contB>
     120:	80 31       	cpi	r24, 0x10	; 16
     122:	b8 f0       	brcs	.+46     	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B=1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <FLAG_button_B>
     12a:	08 95       	ret
			contBON=100;
		}
	}else{
		//lo solto
		contBON=0;
		if(++contBOFF>15){
     12c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contBOFF>
     130:	8f 5f       	subi	r24, 0xFF	; 255
     132:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contBOFF>
     136:	80 31       	cpi	r24, 0x10	; 16
     138:	28 f0       	brcs	.+10     	; 0x144 <button_Actulizar+0x84>
			FLAG_button_B=0;
     13a:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <FLAG_button_B>
			contBOFF=100;
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contBOFF>
		}
		if(contBOFF==13){
     144:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contBOFF>
     148:	8d 30       	cpi	r24, 0x0D	; 13
     14a:	19 f4       	brne	.+6      	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B_change=1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     152:	08 95       	ret

00000154 <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	84 ec       	ldi	r24, 0xC4	; 196
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
     15e:	08 95       	ret

00000160 <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     168:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     16e:	1b c0       	rjmp	.+54     	; 0x1a6 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     170:	fe 01       	movw	r30, r28
     172:	e4 23       	and	r30, r20
     174:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	29 1b       	sub	r18, r25
     17c:	31 09       	sbc	r19, r1
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	02 c0       	rjmp	.+4      	; 0x18c <Descomponerint16aHex+0x2c>
     188:	f6 95       	lsr	r31
     18a:	e7 95       	ror	r30
     18c:	2a 95       	dec	r18
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     190:	e0 50       	subi	r30, 0x00	; 0
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     198:	52 95       	swap	r21
     19a:	42 95       	swap	r20
     19c:	4f 70       	andi	r20, 0x0F	; 15
     19e:	45 27       	eor	r20, r21
     1a0:	5f 70       	andi	r21, 0x0F	; 15
     1a2:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     1a4:	9f 5f       	subi	r25, 0xFF	; 255
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	18 f3       	brcs	.-58     	; 0x170 <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     1aa:	1c 92       	st	X, r1
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
     1c0:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1cc:	24 c0       	rjmp	.+72     	; 0x216 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ce:	db 01       	movw	r26, r22
     1d0:	ca 01       	movw	r24, r20
     1d2:	8c 21       	and	r24, r12
     1d4:	9d 21       	and	r25, r13
     1d6:	ae 21       	and	r26, r14
     1d8:	bf 21       	and	r27, r15
     1da:	27 e0       	ldi	r18, 0x07	; 7
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	2c 1b       	sub	r18, r28
     1e0:	31 09       	sbc	r19, r1
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <Descomponeruint32aHex+0x42>
     1ec:	b6 95       	lsr	r27
     1ee:	a7 95       	ror	r26
     1f0:	97 95       	ror	r25
     1f2:	87 95       	ror	r24
     1f4:	2a 95       	dec	r18
     1f6:	d2 f7       	brpl	.-12     	; 0x1ec <Descomponeruint32aHex+0x3a>
     1f8:	dc 01       	movw	r26, r24
     1fa:	a0 50       	subi	r26, 0x00	; 0
     1fc:	bf 4f       	sbci	r27, 0xFF	; 255
     1fe:	8c 91       	ld	r24, X
     200:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     202:	68 94       	set
     204:	13 f8       	bld	r1, 3
     206:	76 95       	lsr	r23
     208:	67 95       	ror	r22
     20a:	57 95       	ror	r21
     20c:	47 95       	ror	r20
     20e:	16 94       	lsr	r1
     210:	d1 f7       	brne	.-12     	; 0x206 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     212:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     214:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     216:	c8 30       	cpi	r28, 0x08	; 8
     218:	d0 f2       	brcs	.-76     	; 0x1ce <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     21a:	10 82       	st	Z, r1
}
     21c:	cf 91       	pop	r28
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	08 95       	ret

00000228 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6f 97       	sbiw	r28, 0x1f	; 31
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     23c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <getEspacioDisponibleBuffer>
     240:	8f 3d       	cpi	r24, 0xDF	; 223
     242:	20 f0       	brcs	.+8      	; 0x24c <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <FLAGmandarDatos>
     24a:	06 c0       	rjmp	.+12     	; 0x258 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     24c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <getEspacioDisponibleBuffer>
     250:	88 32       	cpi	r24, 0x28	; 40
     252:	10 f4       	brcc	.+4      	; 0x258 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     254:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <FLAGmandarDatos>
		}
	}
	//la lectura de las variables tiene que ser en un unico momento
	//if momento == 0
	// guardar todos los datos
	if(FLAGmandarDatos){
     258:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <FLAGmandarDatos>
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <Informar_Actulizar+0x3a>
     260:	5a c0       	rjmp	.+180    	; 0x316 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     262:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <getTiempoInforme>
     266:	ae 01       	movw	r20, r28
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	ce 01       	movw	r24, r28
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
		UART_TransmitChar(';');
     27a:	8b e3       	ldi	r24, 0x3B	; 59
     27c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     280:	0e 94 93 06 	call	0xd26	; 0xd26 <getValor>
     284:	be 01       	movw	r22, r28
     286:	67 5e       	subi	r22, 0xE7	; 231
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	ce 01       	movw	r24, r28
     292:	49 96       	adiw	r24, 0x19	; 25
     294:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     298:	8b e3       	ldi	r24, 0x3B	; 59
     29a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     29e:	0e 94 87 06 	call	0xd0e	; 0xd0e <getIntegralPID>
     2a2:	be 01       	movw	r22, r28
     2a4:	6e 5e       	subi	r22, 0xEE	; 238
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     2ac:	67 e0       	ldi	r22, 0x07	; 7
     2ae:	ce 01       	movw	r24, r28
     2b0:	42 96       	adiw	r24, 0x12	; 18
     2b2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     2bc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <getDerivadaPID>
     2c0:	be 01       	movw	r22, r28
     2c2:	65 5f       	subi	r22, 0xF5	; 245
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2ca:	67 e0       	ldi	r22, 0x07	; 7
     2cc:	ce 01       	movw	r24, r28
     2ce:	0b 96       	adiw	r24, 0x0b	; 11
     2d0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
		UART_TransmitChar(';');
     2d4:	8b e3       	ldi	r24, 0x3B	; 59
     2d6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2da:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <getSlideResistor>
     2de:	bc 01       	movw	r22, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	44 e5       	ldi	r20, 0x54	; 84
     2ee:	51 e4       	ldi	r21, 0x41	; 65
     2f0:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     2f4:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	be 01       	movw	r22, r28
     2fe:	67 5e       	subi	r22, 0xE7	; 231
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	ce 01       	movw	r24, r28
     30a:	49 96       	adiw	r24, 0x19	; 25
     30c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
		UART_TransmitChar('\n');
     310:	8a e0       	ldi	r24, 0x0A	; 10
     312:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
	}
}
     316:	6f 96       	adiw	r28, 0x1f	; 31
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     328:	3f 92       	push	r3
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	c2 54       	subi	r28, 0x42	; 66
     350:	d1 09       	sbc	r29, r1
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	0e 94 30 10 	call	0x2060	; 0x2060 <SacarDatosBufferEnter>
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <actulizar_leerDatos+0x42>
     368:	1a c1       	rjmp	.+564    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     36a:	fe 01       	movw	r30, r28
     36c:	f3 96       	adiw	r30, 0x33	; 51
     36e:	80 e1       	ldi	r24, 0x10	; 16
     370:	df 01       	movw	r26, r30
     372:	1d 92       	st	X+, r1
     374:	8a 95       	dec	r24
     376:	e9 f7       	brne	.-6      	; 0x372 <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	8d ee       	ldi	r24, 0xED	; 237
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     38c:	e1 2c       	mov	r14, r1
     38e:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     390:	c4 c0       	rjmp	.+392    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     392:	bd e2       	ldi	r27, 0x2D	; 45
     394:	3b 12       	cpse	r3, r27
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     398:	b7 fa       	bst	r11, 7
     39a:	b0 94       	com	r11
     39c:	b7 f8       	bld	r11, 7
     39e:	b0 94       	com	r11
     3a0:	2f c0       	rjmp	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     3a2:	c3 2c       	mov	r12, r3
     3a4:	d1 2c       	mov	r13, r1
     3a6:	e0 e3       	ldi	r30, 0x30	; 48
     3a8:	ce 1a       	sub	r12, r30
     3aa:	d1 08       	sbc	r13, r1
     3ac:	0e 2d       	mov	r16, r14
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	00 0f       	add	r16, r16
     3b2:	11 1f       	adc	r17, r17
     3b4:	00 0f       	add	r16, r16
     3b6:	11 1f       	adc	r17, r17
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8c 0f       	add	r24, r28
     3be:	9d 1f       	adc	r25, r29
     3c0:	08 0f       	add	r16, r24
     3c2:	19 1f       	adc	r17, r25
     3c4:	d8 01       	movw	r26, r16
     3c6:	d2 96       	adiw	r26, 0x32	; 50
     3c8:	6d 91       	ld	r22, X+
     3ca:	7d 91       	ld	r23, X+
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	d5 97       	sbiw	r26, 0x35	; 53
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e2       	ldi	r20, 0x20	; 32
     3d8:	51 e4       	ldi	r21, 0x41	; 65
     3da:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     3de:	2b 01       	movw	r4, r22
     3e0:	3c 01       	movw	r6, r24
     3e2:	b6 01       	movw	r22, r12
     3e4:	dd 0c       	add	r13, r13
     3e6:	88 0b       	sbc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
     3ee:	a3 01       	movw	r20, r6
     3f0:	92 01       	movw	r18, r4
     3f2:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     3f6:	f8 01       	movw	r30, r16
     3f8:	62 ab       	std	Z+50, r22	; 0x32
     3fa:	73 ab       	std	Z+51, r23	; 0x33
     3fc:	84 ab       	std	Z+52, r24	; 0x34
     3fe:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     400:	83 2d       	mov	r24, r3
     402:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
					i++;
     406:	f3 94       	inc	r15
     408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     40a:	0f 2e       	mov	r0, r31
     40c:	81 2c       	mov	r8, r1
     40e:	91 2c       	mov	r9, r1
     410:	f0 e8       	ldi	r31, 0x80	; 128
     412:	af 2e       	mov	r10, r31
     414:	ff e3       	ldi	r31, 0x3F	; 63
     416:	bf 2e       	mov	r11, r31
     418:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	ef 0d       	add	r30, r15
     424:	f1 1d       	adc	r31, r1
     426:	30 80       	ld	r3, Z
     428:	fc e2       	ldi	r31, 0x2C	; 44
     42a:	3f 16       	cp	r3, r31
     42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42e:	47 c0       	rjmp	.+142    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	38 16       	cp	r3, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	43 c0       	rjmp	.+134    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	39 16       	cp	r3, r25
     43c:	09 f4       	brne	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	3f c0       	rjmp	.+126    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     440:	31 10       	cpse	r3, r1
     442:	a7 cf       	rjmp	.-178    	; 0x392 <actulizar_leerDatos+0x6a>
     444:	3c c0       	rjmp	.+120    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     446:	0e 32       	cpi	r16, 0x2E	; 46
     448:	c9 f1       	breq	.+114    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     44a:	0c 32       	cpi	r16, 0x2C	; 44
     44c:	b9 f1       	breq	.+110    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	00 53       	subi	r16, 0x30	; 48
     452:	11 09       	sbc	r17, r1
     454:	ce 2c       	mov	r12, r14
     456:	d1 2c       	mov	r13, r1
     458:	cc 0c       	add	r12, r12
     45a:	dd 1c       	adc	r13, r13
     45c:	cc 0c       	add	r12, r12
     45e:	dd 1c       	adc	r13, r13
     460:	a1 e0       	ldi	r26, 0x01	; 1
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	ac 0f       	add	r26, r28
     466:	bd 1f       	adc	r27, r29
     468:	ca 0e       	add	r12, r26
     46a:	db 1e       	adc	r13, r27
     46c:	f6 01       	movw	r30, r12
     46e:	62 a9       	ldd	r22, Z+50	; 0x32
     470:	73 a9       	ldd	r23, Z+51	; 0x33
     472:	84 a9       	ldd	r24, Z+52	; 0x34
     474:	95 a9       	ldd	r25, Z+53	; 0x35
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e2       	ldi	r20, 0x20	; 32
     47c:	51 e4       	ldi	r21, 0x41	; 65
     47e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     482:	2b 01       	movw	r4, r22
     484:	3c 01       	movw	r6, r24
     486:	b8 01       	movw	r22, r16
     488:	11 0f       	add	r17, r17
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
     492:	a3 01       	movw	r20, r6
     494:	92 01       	movw	r18, r4
     496:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     49a:	d6 01       	movw	r26, r12
     49c:	d2 96       	adiw	r26, 0x32	; 50
     49e:	6d 93       	st	X+, r22
     4a0:	7d 93       	st	X+, r23
     4a2:	8d 93       	st	X+, r24
     4a4:	9c 93       	st	X, r25
     4a6:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e2       	ldi	r20, 0x20	; 32
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	c5 01       	movw	r24, r10
     4b2:	b4 01       	movw	r22, r8
     4b4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
					
				}
				i++;
     4bc:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     4be:	e1 e0       	ldi	r30, 0x01	; 1
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	ef 0d       	add	r30, r15
     4c8:	f1 1d       	adc	r31, r1
     4ca:	00 81       	ld	r16, Z
     4cc:	00 32       	cpi	r16, 0x20	; 32
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d0:	01 11       	cpse	r16, r1
     4d2:	b9 cf       	rjmp	.-142    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4d4:	ce 2c       	mov	r12, r14
     4d6:	d1 2c       	mov	r13, r1
     4d8:	cc 0c       	add	r12, r12
     4da:	dd 1c       	adc	r13, r13
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	ce 0e       	add	r12, r30
     4ea:	df 1e       	adc	r13, r31
     4ec:	d6 01       	movw	r26, r12
     4ee:	d2 96       	adiw	r26, 0x32	; 50
     4f0:	6d 91       	ld	r22, X+
     4f2:	7d 91       	ld	r23, X+
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	d5 97       	sbiw	r26, 0x35	; 53
     4fa:	a5 01       	movw	r20, r10
     4fc:	94 01       	movw	r18, r8
     4fe:	0e 94 14 11 	call	0x2228	; 0x2228 <__divsf3>
     502:	f6 01       	movw	r30, r12
     504:	62 ab       	std	Z+50, r22	; 0x32
     506:	73 ab       	std	Z+51, r23	; 0x33
     508:	84 ab       	std	Z+52, r24	; 0x34
     50a:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     50c:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     50e:	00 32       	cpi	r16, 0x20	; 32
     510:	21 f4       	brne	.+8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     512:	80 2f       	mov	r24, r16
     514:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
     518:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	ef 0d       	add	r30, r15
     524:	f1 1d       	adc	r31, r1
     526:	80 81       	ld	r24, Z
     528:	81 11       	cpse	r24, r1
     52a:	6f cf       	rjmp	.-290    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     52c:	6b a9       	ldd	r22, Y+51	; 0x33
     52e:	7c a9       	ldd	r23, Y+52	; 0x34
     530:	8d a9       	ldd	r24, Y+53	; 0x35
     532:	9e a9       	ldd	r25, Y+54	; 0x36
     534:	23 e3       	ldi	r18, 0x33	; 51
     536:	33 e3       	ldi	r19, 0x33	; 51
     538:	43 e4       	ldi	r20, 0x43	; 67
     53a:	51 ec       	ldi	r21, 0xC1	; 193
     53c:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     540:	81 11       	cpse	r24, r1
     542:	04 c0       	rjmp	.+8      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
			ONLEDBLUE;
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8b b9       	out	0x0b, r24	; 11
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		}else{
			OFFLEDBLUE;
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 7b       	andi	r24, 0xBF	; 191
     550:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     552:	f4 e0       	ldi	r31, 0x04	; 4
     554:	ef 12       	cpse	r14, r31
     556:	23 c0       	rjmp	.+70     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			setKp(valores[0]);
     558:	6b a9       	ldd	r22, Y+51	; 0x33
     55a:	7c a9       	ldd	r23, Y+52	; 0x34
     55c:	8d a9       	ldd	r24, Y+53	; 0x35
     55e:	9e a9       	ldd	r25, Y+54	; 0x36
     560:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <setKp>
			setKi(valores[1]);
     564:	6f a9       	ldd	r22, Y+55	; 0x37
     566:	78 ad       	ldd	r23, Y+56	; 0x38
     568:	89 ad       	ldd	r24, Y+57	; 0x39
     56a:	9a ad       	ldd	r25, Y+58	; 0x3a
     56c:	0e 94 d7 07 	call	0xfae	; 0xfae <setKi>
			setKd(valores[2]);
     570:	6b ad       	ldd	r22, Y+59	; 0x3b
     572:	7c ad       	ldd	r23, Y+60	; 0x3c
     574:	8d ad       	ldd	r24, Y+61	; 0x3d
     576:	9e ad       	ldd	r25, Y+62	; 0x3e
     578:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     57c:	23 96       	adiw	r28, 0x03	; 3
     57e:	6c ad       	ldd	r22, Y+60	; 0x3c
     580:	7d ad       	ldd	r23, Y+61	; 0x3d
     582:	8e ad       	ldd	r24, Y+62	; 0x3e
     584:	9f ad       	ldd	r25, Y+63	; 0x3f
     586:	23 97       	sbiw	r28, 0x03	; 3
     588:	0e 94 8d 11 	call	0x231a	; 0x231a <__fixunssfsi>
     58c:	16 2f       	mov	r17, r22
     58e:	86 2f       	mov	r24, r22
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	81 0f       	add	r24, r17
     59a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
		}
	}
     59e:	ce 5b       	subi	r28, 0xBE	; 190
     5a0:	df 4f       	sbci	r29, 0xFF	; 255
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	08 95       	ret

000005d0 <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5d0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <UART_Init>
	Inicializacion_Motor();
     5d4:	0e 94 98 03 	call	0x730	; 0x730 <Inicializacion_Motor>
	SensorEncoder_init();
     5d8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <SensorEncoder_init>
	Inicializacion_slideResistor();
     5dc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <Inicializacion_slideResistor>
	button_init();
     5e0:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5ea:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5ec:	0e 94 aa 00 	call	0x154	; 0x154 <Informar_MensajeInicial>
	
	setVelocidad(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	buscarOrigen();
     5f8:	0e 94 37 04 	call	0x86e	; 0x86e <buscarOrigen>
	
	irPos(7000);
     5fc:	88 e5       	ldi	r24, 0x58	; 88
     5fe:	9b e1       	ldi	r25, 0x1B	; 27
     600:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	ONLEDGREEN;
     604:	8b b1       	in	r24, 0x0b	; 11
     606:	80 62       	ori	r24, 0x20	; 32
     608:	8b b9       	out	0x0b, r24	; 11
	
	getAnguloEncoder(&anguloAnt, 0);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	88 ee       	ldi	r24, 0xE8	; 232
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	0e 94 95 0c 	call	0x192a	; 0x192a <getAnguloEncoder>
#include "global.h"

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
     616:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     618:	21 c0       	rjmp	.+66     	; 0x65c <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	87 ea       	ldi	r24, 0xA7	; 167
     61e:	91 e6       	ldi	r25, 0x61	; 97
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <main+0x50>
     628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x5a>
     62a:	00 00       	nop
		_delay_ms(2000);
		getAnguloEncoder(&angulo, 0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	86 ee       	ldi	r24, 0xE6	; 230
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	0e 94 95 0c 	call	0x192a	; 0x192a <getAnguloEncoder>
		if (anguloAnt == angulo)
     638:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <anguloAnt>
     63c:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <anguloAnt+0x1>
     640:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <angulo>
     644:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <angulo+0x1>
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	11 f4       	brne	.+4      	; 0x652 <main+0x82>
		{
			i++;
     64e:	cf 5f       	subi	r28, 0xFF	; 255
     650:	05 c0       	rjmp	.+10     	; 0x65c <main+0x8c>
		}else{
			anguloAnt = angulo;
     652:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <anguloAnt+0x1>
     656:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <anguloAnt>
			i=0;
     65a:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     65c:	c3 30       	cpi	r28, 0x03	; 3
     65e:	e8 f2       	brcs	.-70     	; 0x61a <main+0x4a>
			i=0;
		}
	}

	//setea el centro de pendulo
	set_origen();
     660:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <set_origen>
	OFFLEDGREEN;
     664:	8b b1       	in	r24, 0x0b	; 11
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	8b b9       	out	0x0b, r24	; 11
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
     66a:	88 ea       	ldi	r24, 0xA8	; 168
     66c:	9b e1       	ldi	r25, 0x1B	; 27
     66e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	SEOS_Init();
     672:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <SEOS_Init>
	uint32_t inicio;
	uint8_t flag = 0;
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     676:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <SEOS_Dispatch_Tasks>
     67a:	fd cf       	rjmp	.-6      	; 0x676 <main+0xa6>

0000067c <setVelocidad>:
static volatile uint16_t pos=0;
static volatile int8_t lado=0,ladoAnt,salto=1;
// 1 es derecha -1 es izquierd


void setVelocidad(int16_t velocidad){
     67c:	bc 01       	movw	r22, r24
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	61 f4       	brne	.+24     	; 0x69a <setVelocidad+0x1e>
		espera = 64000;
		PASOS1;salto=1;
     682:	85 b1       	in	r24, 0x05	; 5
     684:	87 70       	andi	r24, 0x07	; 7
     686:	88 63       	ori	r24, 0x38	; 56
     688:	85 b9       	out	0x05, r24	; 5
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
		fueCero=1;
     690:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>

void setVelocidad(int16_t velocidad){
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
		espera = 64000;
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	7a ef       	ldi	r23, 0xFA	; 250
     698:	2a c0       	rjmp	.+84     	; 0x6ee <setVelocidad+0x72>
		PASOS1;salto=1;
		fueCero=1;
	}else{
	if(velocidad<0) {
     69a:	99 23       	and	r25, r25
     69c:	84 f4       	brge	.+32     	; 0x6be <setVelocidad+0x42>
		lado=-1;//IRIZQ;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
		velocidad = (-1)*velocidad;
     6a4:	71 95       	neg	r23
     6a6:	61 95       	neg	r22
     6a8:	71 09       	sbc	r23, r1
		if(ladoAnt==1){
     6aa:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <ladoAnt>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <setVelocidad+0x3a>
			fueCero=1;
     6b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=-1;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <ladoAnt>
     6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <setVelocidad+0x5c>
	}
	else {
		lado = 1;//IRDER;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
		if(ladoAnt==-1){
     6c4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <ladoAnt>
     6c8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <setVelocidad+0x56>
			fueCero=1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <ladoAnt>
		}
		
	espera = 31000/velocidad;	//era 1875
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	99 e7       	ldi	r25, 0x79	; 121
     6dc:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
	salto=1;PASOS1;// el paso no tendria que poner siempre en 1 los otros tienen que dejar en 1
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6e6:	85 b1       	in	r24, 0x05	; 5
     6e8:	87 70       	andi	r24, 0x07	; 7
     6ea:	88 63       	ori	r24, 0x38	; 56
     6ec:	85 b9       	out	0x05, r24	; 5
	}
	
	//el tiempo de espera minimo esta 33 pero se puede mas hacer pruebas
	//velocidad maxima de 1000
	//tiempo espera = 33000/velociadad
	if (fueCero)
     6ee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6f2:	88 23       	and	r24, r24
     6f4:	21 f0       	breq	.+8      	; 0x6fe <setVelocidad+0x82>
	{
		espera+=60;
     6f6:	64 5c       	subi	r22, 0xC4	; 196
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
		fueCero=0;
     6fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
	}
	if(espera-1 < TCNT1){
     6fe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     702:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     706:	cb 01       	movw	r24, r22
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	82 17       	cp	r24, r18
     70c:	93 07       	cpc	r25, r19
     70e:	58 f4       	brcc	.+22     	; 0x726 <setVelocidad+0xaa>
		OCR1A = espera;
     710:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     714:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCNT1 = espera-2;
     718:	62 50       	subi	r22, 0x02	; 2
     71a:	71 09       	sbc	r23, r1
     71c:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     720:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     724:	08 95       	ret
	}else{
		OCR1A = espera;
     726:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     72a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     72e:	08 95       	ret

00000730 <Inicializacion_Motor>:
	}
}

void Inicializacion_Motor(){
	//pongo como salida
	DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5);
     730:	84 b1       	in	r24, 0x04	; 4
     732:	8e 63       	ori	r24, 0x3E	; 62
     734:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD7);
     736:	8a b1       	in	r24, 0x0a	; 10
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	8a b9       	out	0x0a, r24	; 10
	
	//pongo como salida los pines que controlan el tamaio de paso
	//borrar viejo DDRC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2);
	
	TCCR1A =  0;
     73c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10); //modo CTC y preescaler de 1024
	
	TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10); //el que tengo que modificar modo CTC y preescaler de 64
     740:	8b e0       	ldi	r24, 0x0B	; 11
     742:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIFR1 = (1<<OCF1B)|(1<<OCF1A);
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	86 bb       	out	0x16, r24	; 22
	
	//timer
	OCR1B = 1;			//tenia16+1
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     752:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 6000;			//32+1 velocidad maxima
     756:	20 e7       	ldi	r18, 0x70	; 112
     758:	37 e1       	ldi	r19, 0x17	; 23
     75a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     75e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	 // Habilitar interrupciones
	TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B);
     762:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     766:	08 95       	ret

00000768 <getPos>:
}

uint16_t getPos(){
	return pos;
     768:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     76c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
}
     770:	08 95       	ret

00000772 <darPaso>:
	setVelocidad(0);
}

//-1 izq z der
void darPaso(int8_t sentido){
	if (sentido < 0){
     772:	88 23       	and	r24, r24
     774:	3c f4       	brge	.+14     	; 0x784 <darPaso+0x12>
		IRIZQ;
     776:	85 b1       	in	r24, 0x05	; 5
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	85 b9       	out	0x05, r24	; 5
		lado = -1;
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
     782:	06 c0       	rjmp	.+12     	; 0x790 <darPaso+0x1e>
	}
	else{
		IRDER;
     784:	85 b1       	in	r24, 0x05	; 5
     786:	8d 7f       	andi	r24, 0xFD	; 253
     788:	85 b9       	out	0x05, r24	; 5
		lado = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
	}
	PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     790:	85 b1       	in	r24, 0x05	; 5
     792:	84 60       	ori	r24, 0x04	; 4
     794:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     796:	87 ec       	ldi	r24, 0xC7	; 199
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <darPaso+0x28>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <darPaso+0x2e>
     7a0:	00 00       	nop
	//_delay_ms(1);
	_delay_us(50);
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     7a2:	85 b1       	in	r24, 0x05	; 5
     7a4:	8b 7f       	andi	r24, 0xFB	; 251
     7a6:	85 b9       	out	0x05, r24	; 5
     7a8:	87 ec       	ldi	r24, 0xC7	; 199
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <darPaso+0x3a>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <darPaso+0x40>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <irPos>:

uint16_t getPos(){
	return pos;
}

void irPos(uint16_t destino){
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
	PASOS1;salto=1;
     7bc:	85 b1       	in	r24, 0x05	; 5
     7be:	87 70       	andi	r24, 0x07	; 7
     7c0:	88 63       	ori	r24, 0x38	; 56
     7c2:	85 b9       	out	0x05, r24	; 5
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	81 ee       	ldi	r24, 0xE1	; 225
     7ce:	94 e0       	ldi	r25, 0x04	; 4
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	90 40       	sbci	r25, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <irPos+0x1a>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <irPos+0x24>
     7da:	00 00       	nop
	_delay_ms(100);
	if(destino>0 && destino<FIN){
     7dc:	ce 01       	movw	r24, r28
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	8f 32       	cpi	r24, 0x2F	; 47
     7e2:	95 43       	sbci	r25, 0x35	; 53
     7e4:	e8 f5       	brcc	.+122    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		if(pos<destino)
     7e6:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     7ea:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     7ee:	8c 17       	cp	r24, r28
     7f0:	9d 07       	cpc	r25, r29
     7f2:	a0 f0       	brcs	.+40     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7f4:	2e c0       	rjmp	.+92     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			while(pos<destino){
				darPaso(1);pos += lado*salto;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     7fc:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     800:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     804:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     808:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     80c:	32 02       	muls	r19, r18
     80e:	80 0d       	add	r24, r0
     810:	91 1d       	adc	r25, r1
     812:	11 24       	eor	r1, r1
     814:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     818:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
void irPos(uint16_t destino){
	PASOS1;salto=1;
	_delay_ms(100);
	if(destino>0 && destino<FIN){
		if(pos<destino)
			while(pos<destino){
     81c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     820:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     824:	8c 17       	cp	r24, r28
     826:	9d 07       	cpc	r25, r29
     828:	30 f3       	brcs	.-52     	; 0x7f6 <irPos+0x40>
     82a:	1a c0       	rjmp	.+52     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
				darPaso(-1);pos += lado*salto;
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     832:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     836:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     83a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     83e:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     842:	32 02       	muls	r19, r18
     844:	80 0d       	add	r24, r0
     846:	91 1d       	adc	r25, r1
     848:	11 24       	eor	r1, r1
     84a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     84e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
		if(pos<destino)
			while(pos<destino){
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
     852:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     856:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     85a:	c8 17       	cp	r28, r24
     85c:	d9 07       	cpc	r29, r25
     85e:	30 f3       	brcs	.-52     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
				darPaso(-1);pos += lado*salto;
			}
	}
	setVelocidad(0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <buscarOrigen>:
}


void buscarOrigen(){
	//configurar el puerto de entrada pin6 D6
	DDRD &= ~(1<<PORTD4);
     86e:	8a b1       	in	r24, 0x0a	; 10
     870:	8f 7e       	andi	r24, 0xEF	; 239
     872:	8a b9       	out	0x0a, r24	; 10
	//colocar el pin con pull up
	PORTD |= (1<<PORTD4);
     874:	8b b1       	in	r24, 0x0b	; 11
     876:	80 61       	ori	r24, 0x10	; 16
     878:	8b b9       	out	0x0b, r24	; 11
	
	setVelocidad(0);
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	
	//prendo el led
	ONLEDBLUE;
     882:	8b b1       	in	r24, 0x0b	; 11
     884:	80 64       	ori	r24, 0x40	; 64
     886:	8b b9       	out	0x0b, r24	; 11
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	89 e6       	ldi	r24, 0x69	; 105
     88c:	98 e1       	ldi	r25, 0x18	; 24
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <buscarOrigen+0x20>
     896:	00 c0       	rjmp	.+0      	; 0x898 <buscarOrigen+0x2a>
     898:	00 00       	nop
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS1;salto=1;
     89a:	85 b1       	in	r24, 0x05	; 5
     89c:	87 70       	andi	r24, 0x07	; 7
     89e:	88 63       	ori	r24, 0x38	; 56
     8a0:	85 b9       	out	0x05, r24	; 5
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <buscarOrigen+0x42>
		darPaso(-1);
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	//prendo el led
	ONLEDBLUE;
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS1;salto=1;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8b0:	4c 99       	sbic	0x09, 4	; 9
     8b2:	fb cf       	rjmp	.-10     	; 0x8aa <buscarOrigen+0x3c>
		darPaso(-1);
	}
	//encuntra el inicio de a pasos muy grandes, lo vuelvo a buscar con pasos mas chiquitos
	
	OFFLEDBLUE;
     8b4:	8b b1       	in	r24, 0x0b	; 11
     8b6:	8f 7b       	andi	r24, 0xBF	; 191
     8b8:	8b b9       	out	0x0b, r24	; 11
	
	pos=0;
     8ba:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <pos+0x1>
     8be:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <pos>
	irPos(50);
     8c2:	82 e3       	ldi	r24, 0x32	; 50
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
     8ca:	2f ef       	ldi	r18, 0xFF	; 255
     8cc:	89 e6       	ldi	r24, 0x69	; 105
     8ce:	98 e1       	ldi	r25, 0x18	; 24
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	80 40       	sbci	r24, 0x00	; 0
     8d4:	90 40       	sbci	r25, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <buscarOrigen+0x62>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <buscarOrigen+0x6c>
     8da:	00 00       	nop
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
     8dc:	8b b1       	in	r24, 0x0b	; 11
     8de:	8f 7b       	andi	r24, 0xBF	; 191
     8e0:	8b b9       	out	0x0b, r24	; 11
	PASOS1;salto=1;
     8e2:	85 b1       	in	r24, 0x05	; 5
     8e4:	87 70       	andi	r24, 0x07	; 7
     8e6:	88 63       	ori	r24, 0x38	; 56
     8e8:	85 b9       	out	0x05, r24	; 5
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <buscarOrigen+0x8a>
		darPaso(-1);
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
	PASOS1;salto=1;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8f8:	4c 99       	sbic	0x09, 4	; 9
     8fa:	fb cf       	rjmp	.-10     	; 0x8f2 <buscarOrigen+0x84>
		darPaso(-1);
	}
	
	PASOS16;salto=16;
     8fc:	85 b1       	in	r24, 0x05	; 5
     8fe:	87 70       	andi	r24, 0x07	; 7
     900:	85 b9       	out	0x05, r24	; 5
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	//apago el led
	OFFLEDBLUE;
     908:	8b b1       	in	r24, 0x0b	; 11
     90a:	8f 7b       	andi	r24, 0xBF	; 191
     90c:	8b b9       	out	0x0b, r24	; 11
	pos = 0;
     90e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <pos+0x1>
     912:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <pos>
     916:	08 95       	ret

00000918 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     918:	1f 92       	push	r1
     91a:	0f 92       	push	r0
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	0f 92       	push	r0
     920:	11 24       	eor	r1, r1
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     92a:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     92e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     932:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     936:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     93a:	32 02       	muls	r19, r18
     93c:	80 0d       	add	r24, r0
     93e:	91 1d       	adc	r25, r1
     940:	11 24       	eor	r1, r1
     942:	80 33       	cpi	r24, 0x30	; 48
     944:	95 43       	sbci	r25, 0x35	; 53
     946:	08 f5       	brcc	.+66     	; 0x98a <__vector_11+0x72>
     948:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     94c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     950:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     954:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     958:	32 02       	muls	r19, r18
     95a:	80 0d       	add	r24, r0
     95c:	91 1d       	adc	r25, r1
     95e:	11 24       	eor	r1, r1
     960:	89 2b       	or	r24, r25
     962:	99 f0       	breq	.+38     	; 0x98a <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     964:	85 b1       	in	r24, 0x05	; 5
     966:	84 60       	ori	r24, 0x04	; 4
     968:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     96a:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     96e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     972:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     976:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     97a:	32 02       	muls	r19, r18
     97c:	80 0d       	add	r24, r0
     97e:	91 1d       	adc	r25, r1
     980:	11 24       	eor	r1, r1
     982:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     986:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
	}		
}
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     9a8:	85 b1       	in	r24, 0x05	; 5
     9aa:	8b 7f       	andi	r24, 0xFB	; 251
     9ac:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     9ae:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <lado>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	19 f4       	brne	.+6      	; 0x9bc <__vector_12+0x20>
		IRDER;
     9b6:	85 b1       	in	r24, 0x05	; 5
     9b8:	8d 7f       	andi	r24, 0xFD	; 253
     9ba:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     9bc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <lado>
     9c0:	8f 3f       	cpi	r24, 0xFF	; 255
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__vector_12+0x2e>
		IRIZQ;
     9c4:	85 b1       	in	r24, 0x05	; 5
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	85 b9       	out	0x05, r24	; 5
	}
}
     9ca:	8f 91       	pop	r24
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <ec_basico>:
	calcularDerivada_angulo(puntosAngulo);
	calcularIntegral(e);
	derivada = derivada_angulo;
	
	return( (multi*Kp)*e + Kd*derivada + s);
}
     9d6:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <estado>
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	e8 5e       	subi	r30, 0xE8	; 232
     9e2:	fe 4f       	sbci	r31, 0xFE	; 254
     9e4:	01 90       	ld	r0, Z+
     9e6:	f0 81       	ld	r31, Z
     9e8:	e0 2d       	mov	r30, r0
     9ea:	09 95       	icall
     9ec:	08 95       	ret

000009ee <Actulizar_PID>:
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <FLAG_button_A_change>
     9fe:	88 23       	and	r24, r24
     a00:	61 f0       	breq	.+24     	; 0xa1a <Actulizar_PID+0x2c>
     a02:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <FLAG_habilitar_PID>
     a06:	88 23       	and	r24, r24
     a08:	19 f0       	breq	.+6      	; 0xa10 <Actulizar_PID+0x22>
     a0a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <FLAG_habilitar_PID>
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <Actulizar_PID+0x28>
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <FLAG_habilitar_PID>
     a16:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <FLAG_button_A_change>
     a1a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__data_end>
     a1e:	88 23       	and	r24, r24
     a20:	31 f0       	breq	.+12     	; 0xa2e <Actulizar_PID+0x40>
     a22:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <estado>
     a26:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
     a2a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__data_end>
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	73 e0       	ldi	r23, 0x03	; 3
     a32:	87 e0       	ldi	r24, 0x07	; 7
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	0e 94 95 0c 	call	0x192a	; 0x192a <getAnguloEncoder>
     a3a:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <indice_ec_error>
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ee 5e       	subi	r30, 0xEE	; 238
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	01 90       	ld	r0, Z+
     a4a:	f0 81       	ld	r31, Z
     a4c:	e0 2d       	mov	r30, r0
     a4e:	09 95       	icall
     a50:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     a54:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     a58:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     a5c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e8       	ldi	r19, 0x80	; 128
     a64:	4b eb       	ldi	r20, 0xBB	; 187
     a66:	54 e4       	ldi	r21, 0x44	; 68
     a68:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
     a6c:	18 16       	cp	r1, r24
     a6e:	64 f4       	brge	.+24     	; 0xa88 <Actulizar_PID+0x9a>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e8       	ldi	r25, 0x80	; 128
     a74:	ab eb       	ldi	r26, 0xBB	; 187
     a76:	b4 e4       	ldi	r27, 0x44	; 68
     a78:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <vel>
     a7c:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <vel+0x1>
     a80:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <vel+0x2>
     a84:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <vel+0x3>
     a88:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <vel>
     a8c:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <vel+0x1>
     a90:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <vel+0x2>
     a94:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <vel+0x3>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e8       	ldi	r19, 0x80	; 128
     a9c:	4b eb       	ldi	r20, 0xBB	; 187
     a9e:	54 ec       	ldi	r21, 0xC4	; 196
     aa0:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     aa4:	88 23       	and	r24, r24
     aa6:	64 f4       	brge	.+24     	; 0xac0 <Actulizar_PID+0xd2>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e8       	ldi	r25, 0x80	; 128
     aac:	ab eb       	ldi	r26, 0xBB	; 187
     aae:	b4 ec       	ldi	r27, 0xC4	; 196
     ab0:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <vel>
     ab4:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <vel+0x1>
     ab8:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <vel+0x2>
     abc:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <vel+0x3>
     ac0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <FLAG_habilitar_PID>
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <Actulizar_PID+0xdc>
     ac8:	5a c0       	rjmp	.+180    	; 0xb7e <Actulizar_PID+0x190>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <noFueCero>
     ad0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <indice_ec_error>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	09 f0       	breq	.+2      	; 0xada <Actulizar_PID+0xec>
     ad8:	4e c0       	rjmp	.+156    	; 0xb76 <Actulizar_PID+0x188>
     ada:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <enPosicion>
     ade:	81 11       	cpse	r24, r1
     ae0:	f6 c0       	rjmp	.+492    	; 0xcce <Actulizar_PID+0x2e0>
     ae2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     ae6:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     aea:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     aee:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     af2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <getSlideResistor>
     af6:	bc 01       	movw	r22, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
     b00:	2d ec       	ldi	r18, 0xCD	; 205
     b02:	3c ec       	ldi	r19, 0xCC	; 204
     b04:	44 e5       	ldi	r20, 0x54	; 84
     b06:	51 e4       	ldi	r21, 0x41	; 65
     b08:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     b0c:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
     b10:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
     b14:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
     b18:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
     b1c:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     b20:	ec 01       	movw	r28, r24
     b22:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <posRef>
     b26:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <posRef+0x1>
     b2a:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <posRef+0x2>
     b2e:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <posRef+0x3>
     b32:	0e 94 8d 11 	call	0x231a	; 0x231a <__fixunssfsi>
     b36:	64 56       	subi	r22, 0x64	; 100
     b38:	71 09       	sbc	r23, r1
     b3a:	6c 17       	cp	r22, r28
     b3c:	7d 07       	cpc	r23, r29
     b3e:	08 f0       	brcs	.+2      	; 0xb42 <Actulizar_PID+0x154>
     b40:	c6 c0       	rjmp	.+396    	; 0xcce <Actulizar_PID+0x2e0>
     b42:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     b46:	ec 01       	movw	r28, r24
     b48:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <posRef>
     b4c:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <posRef+0x1>
     b50:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <posRef+0x2>
     b54:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <posRef+0x3>
     b58:	0e 94 8d 11 	call	0x231a	; 0x231a <__fixunssfsi>
     b5c:	6c 59       	subi	r22, 0x9C	; 156
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	c6 17       	cp	r28, r22
     b62:	d7 07       	cpc	r29, r23
     b64:	08 f0       	brcs	.+2      	; 0xb68 <Actulizar_PID+0x17a>
     b66:	b3 c0       	rjmp	.+358    	; 0xcce <Actulizar_PID+0x2e0>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <enPosicion>
     b6e:	8b b1       	in	r24, 0x0b	; 11
     b70:	80 62       	ori	r24, 0x20	; 32
     b72:	8b b9       	out	0x0b, r24	; 11
     b74:	ac c0       	rjmp	.+344    	; 0xcce <Actulizar_PID+0x2e0>
     b76:	8b b1       	in	r24, 0x0b	; 11
     b78:	80 62       	ori	r24, 0x20	; 32
     b7a:	8b b9       	out	0x0b, r24	; 11
     b7c:	a8 c0       	rjmp	.+336    	; 0xcce <Actulizar_PID+0x2e0>
     b7e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <indice_ec_error>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	09 f0       	breq	.+2      	; 0xb88 <Actulizar_PID+0x19a>
     b86:	98 c0       	rjmp	.+304    	; 0xcb8 <Actulizar_PID+0x2ca>
     b88:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <enPosicion>
     b8c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <getSlideResistor>
     b90:	bc 01       	movw	r22, r24
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
     b9a:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
     b9e:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
     ba2:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
     ba6:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
     baa:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <getSlideResistor>
     bae:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
     bb2:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
     bb6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <noFueCero>
     bba:	81 11       	cpse	r24, r1
     bbc:	53 c0       	rjmp	.+166    	; 0xc64 <Actulizar_PID+0x276>
     bbe:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
     bc2:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
     bc6:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
     bca:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e8       	ldi	r19, 0x80	; 128
     bd2:	42 ef       	ldi	r20, 0xF2	; 242
     bd4:	53 e4       	ldi	r21, 0x43	; 67
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     bde:	88 23       	and	r24, r24
     be0:	bc f4       	brge	.+46     	; 0xc10 <Actulizar_PID+0x222>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e8       	ldi	r19, 0x80	; 128
     be6:	42 ef       	ldi	r20, 0xF2	; 242
     be8:	53 e4       	ldi	r21, 0x43	; 67
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e8       	ldi	r20, 0x80	; 128
     bf8:	50 e4       	ldi	r21, 0x40	; 64
     bfa:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     bfe:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     c02:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     c06:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     c0a:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     c0e:	50 c0       	rjmp	.+160    	; 0xcb0 <Actulizar_PID+0x2c2>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 ec       	ldi	r19, 0xC0	; 192
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	54 e4       	ldi	r21, 0x44	; 68
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	bc f4       	brge	.+46     	; 0xc52 <Actulizar_PID+0x264>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 ec       	ldi	r19, 0xC0	; 192
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	54 e4       	ldi	r21, 0x44	; 68
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e8       	ldi	r20, 0x80	; 128
     c3a:	50 e4       	ldi	r21, 0x40	; 64
     c3c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     c40:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     c44:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     c48:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     c4c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     c50:	2f c0       	rjmp	.+94     	; 0xcb0 <Actulizar_PID+0x2c2>
     c52:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     c56:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     c5a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     c5e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     c62:	26 c0       	rjmp	.+76     	; 0xcb0 <Actulizar_PID+0x2c2>
     c64:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
     c68:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
     c6c:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
     c70:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e8       	ldi	r19, 0x80	; 128
     c78:	42 ef       	ldi	r20, 0xF2	; 242
     c7a:	53 e4       	ldi	r21, 0x43	; 67
     c7c:	c7 01       	movw	r24, r14
     c7e:	b6 01       	movw	r22, r12
     c80:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
     c84:	18 16       	cp	r1, r24
     c86:	64 f4       	brge	.+24     	; 0xca0 <Actulizar_PID+0x2b2>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 ec       	ldi	r19, 0xC0	; 192
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	54 e4       	ldi	r21, 0x44	; 68
     c90:	c7 01       	movw	r24, r14
     c92:	b6 01       	movw	r22, r12
     c94:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     c98:	88 23       	and	r24, r24
     c9a:	14 f4       	brge	.+4      	; 0xca0 <Actulizar_PID+0x2b2>
     c9c:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <noFueCero>
     ca0:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     ca4:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     ca8:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     cac:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     cb0:	8b b1       	in	r24, 0x0b	; 11
     cb2:	8f 7d       	andi	r24, 0xDF	; 223
     cb4:	8b b9       	out	0x0b, r24	; 11
     cb6:	0b c0       	rjmp	.+22     	; 0xcce <Actulizar_PID+0x2e0>
     cb8:	8b b1       	in	r24, 0x0b	; 11
     cba:	8f 7d       	andi	r24, 0xDF	; 223
     cbc:	8b b9       	out	0x0b, r24	; 11
     cbe:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     cc2:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     cc6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     cca:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     cce:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <vel>
     cd2:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <vel+0x1>
     cd6:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <vel+0x2>
     cda:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <vel+0x3>
     cde:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
     ce2:	cb 01       	movw	r24, r22
     ce4:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret

00000cf6 <getDerivadaPID>:
     cf6:	60 91 15 03 	lds	r22, 0x0315	; 0x800315 <derivada>
     cfa:	70 91 16 03 	lds	r23, 0x0316	; 0x800316 <derivada+0x1>
     cfe:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <derivada+0x2>
     d02:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <derivada+0x3>
     d06:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
     d0a:	cb 01       	movw	r24, r22
     d0c:	08 95       	ret

00000d0e <getIntegralPID>:
     d0e:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <s>
     d12:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <s+0x1>
     d16:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <s+0x2>
     d1a:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <s+0x3>
     d1e:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
     d22:	cb 01       	movw	r24, r22
     d24:	08 95       	ret

00000d26 <getValor>:
     d26:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <valor>
     d2a:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <valor+0x1>
     d2e:	08 95       	ret

00000d30 <calcularIntegral>:
     d30:	bc 01       	movw	r22, r24
     d32:	99 0f       	add	r25, r25
     d34:	88 0b       	sbc	r24, r24
     d36:	99 0b       	sbc	r25, r25
     d38:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
     d3c:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
     d40:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
     d44:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
     d48:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
     d4c:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     d50:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <s>
     d54:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <s+0x1>
     d58:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <s+0x2>
     d5c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <s+0x3>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	53 e4       	ldi	r21, 0x43	; 67
     d68:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	64 f4       	brge	.+24     	; 0xd88 <calcularIntegral+0x58>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	aa ef       	ldi	r26, 0xFA	; 250
     d76:	b3 e4       	ldi	r27, 0x43	; 67
     d78:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <s>
     d7c:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <s+0x1>
     d80:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <s+0x2>
     d84:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <s+0x3>
     d88:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <s>
     d8c:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <s+0x1>
     d90:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <s+0x2>
     d94:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <s+0x3>
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	4a ef       	ldi	r20, 0xFA	; 250
     d9e:	53 ec       	ldi	r21, 0xC3	; 195
     da0:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     da4:	88 23       	and	r24, r24
     da6:	64 f4       	brge	.+24     	; 0xdc0 <calcularIntegral+0x90>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	aa ef       	ldi	r26, 0xFA	; 250
     dae:	b3 ec       	ldi	r27, 0xC3	; 195
     db0:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <s>
     db4:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <s+0x1>
     db8:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <s+0x2>
     dbc:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <s+0x3>
     dc0:	08 95       	ret

00000dc2 <ec_sin_sen>:
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <e>
     dd2:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <e+0x1>
     dd6:	be 01       	movw	r22, r28
     dd8:	0d 2e       	mov	r0, r29
     dda:	00 0c       	add	r0, r0
     ddc:	88 0b       	sbc	r24, r24
     dde:	99 0b       	sbc	r25, r25
     de0:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
     de4:	23 ec       	ldi	r18, 0xC3	; 195
     de6:	35 ef       	ldi	r19, 0xF5	; 245
     de8:	48 ec       	ldi	r20, 0xC8	; 200
     dea:	50 e4       	ldi	r21, 0x40	; 64
     dec:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	48 e4       	ldi	r20, 0x48	; 72
     df6:	54 e4       	ldi	r21, 0x44	; 68
     df8:	0e 94 14 11 	call	0x2228	; 0x2228 <__divsf3>
     dfc:	6b 01       	movw	r12, r22
     dfe:	7c 01       	movw	r14, r24
     e00:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <floate>
     e04:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <floate+0x1>
     e08:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <floate+0x2>
     e0c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <floate+0x3>
     e10:	d0 93 06 03 	sts	0x0306, r29	; 0x800306 <valor+0x1>
     e14:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <valor>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
     e22:	18 16       	cp	r1, r24
     e24:	1c f5       	brge	.+70     	; 0xe6c <ec_sin_sen+0xaa>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 98 06 	call	0xd30	; 0xd30 <calcularIntegral>
     e2e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <floate>
     e32:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <floate+0x1>
     e36:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <floate+0x2>
     e3a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <floate+0x3>
     e3e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <sqrt>
     e42:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
     e46:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
     e4a:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
     e4e:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
     e52:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     e56:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
     e5a:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
     e5e:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
     e62:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
     e66:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <ec_sin_sen+0x128>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	a9 01       	movw	r20, r18
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	9c f5       	brge	.+102    	; 0xee4 <ec_sin_sen+0x122>
     e7e:	f7 fa       	bst	r15, 7
     e80:	f0 94       	com	r15
     e82:	f7 f8       	bld	r15, 7
     e84:	f0 94       	com	r15
     e86:	c0 92 25 03 	sts	0x0325, r12	; 0x800325 <floate>
     e8a:	d0 92 26 03 	sts	0x0326, r13	; 0x800326 <floate+0x1>
     e8e:	e0 92 27 03 	sts	0x0327, r14	; 0x800327 <floate+0x2>
     e92:	f0 92 28 03 	sts	0x0328, r15	; 0x800328 <floate+0x3>
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	0e 94 98 06 	call	0xd30	; 0xd30 <calcularIntegral>
     e9e:	c0 90 1d 03 	lds	r12, 0x031D	; 0x80031d <s>
     ea2:	d0 90 1e 03 	lds	r13, 0x031E	; 0x80031e <s+0x1>
     ea6:	e0 90 1f 03 	lds	r14, 0x031F	; 0x80031f <s+0x2>
     eaa:	f0 90 20 03 	lds	r15, 0x0320	; 0x800320 <s+0x3>
     eae:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <floate>
     eb2:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <floate+0x1>
     eb6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <floate+0x2>
     eba:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <floate+0x3>
     ebe:	0e 94 e6 12 	call	0x25cc	; 0x25cc <sqrt>
     ec2:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
     ec6:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
     eca:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
     ece:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
     ed2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <ec_sin_sen+0x128>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	08 95       	ret

00000ef8 <calcularDerivada_encoder>:
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <tiempoMuestra>
     f04:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <tiempoMuestra+0x1>
     f08:	68 34       	cpi	r22, 0x48	; 72
     f0a:	81 e7       	ldi	r24, 0x71	; 113
     f0c:	78 07       	cpc	r23, r24
     f0e:	7c f5       	brge	.+94     	; 0xf6e <calcularDerivada_encoder+0x76>
     f10:	89 e0       	ldi	r24, 0x09	; 9
     f12:	9d e3       	ldi	r25, 0x3D	; 61
     f14:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
     f18:	07 2e       	mov	r0, r23
     f1a:	00 0c       	add	r0, r0
     f1c:	88 0b       	sbc	r24, r24
     f1e:	99 0b       	sbc	r25, r25
     f20:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
     f24:	2a e0       	ldi	r18, 0x0A	; 10
     f26:	37 ed       	ldi	r19, 0xD7	; 215
     f28:	43 ea       	ldi	r20, 0xA3	; 163
     f2a:	5c e3       	ldi	r21, 0x3C	; 60
     f2c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     f30:	6b 01       	movw	r12, r22
     f32:	7c 01       	movw	r14, r24
     f34:	28 e4       	ldi	r18, 0x48	; 72
     f36:	31 ee       	ldi	r19, 0xE1	; 225
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
     f40:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
     f44:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
     f48:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
     f4c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     f50:	9b 01       	movw	r18, r22
     f52:	ac 01       	movw	r20, r24
     f54:	c7 01       	movw	r24, r14
     f56:	b6 01       	movw	r22, r12
     f58:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     f5c:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <derivada_encoder>
     f60:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <derivada_encoder+0x1>
     f64:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <derivada_encoder+0x2>
     f68:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <derivada_encoder+0x3>
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <calcularDerivada_encoder+0xac>
     f6e:	28 e4       	ldi	r18, 0x48	; 72
     f70:	31 ee       	ldi	r19, 0xE1	; 225
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
     f7a:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
     f7e:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
     f82:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
     f86:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
     f94:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <derivada_encoder>
     f98:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <derivada_encoder+0x1>
     f9c:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <derivada_encoder+0x2>
     fa0:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <derivada_encoder+0x3>
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	08 95       	ret

00000fae <setKi>:
     fae:	60 93 2d 03 	sts	0x032D, r22	; 0x80032d <Ki>
     fb2:	70 93 2e 03 	sts	0x032E, r23	; 0x80032e <Ki+0x1>
     fb6:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <Ki+0x2>
     fba:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <Ki+0x3>
     fbe:	08 95       	ret

00000fc0 <setKd>:
     fc0:	60 93 31 03 	sts	0x0331, r22	; 0x800331 <Kd>
     fc4:	70 93 32 03 	sts	0x0332, r23	; 0x800332 <Kd+0x1>
     fc8:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <Kd+0x2>
     fcc:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <Kd+0x3>
     fd0:	08 95       	ret

00000fd2 <setKp>:
     fd2:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <Kp>
     fd6:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <Kp+0x1>
     fda:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <Kp+0x2>
     fde:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <Kp+0x3>
     fe2:	08 95       	ret

00000fe4 <setIndice_ec_error>:
     fe4:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <indice_ec_error>
     fe8:	98 17       	cp	r25, r24
     fea:	51 f0       	breq	.+20     	; 0x1000 <setIndice_ec_error+0x1c>
     fec:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <indice_ec_error>
     ff0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <s>
     ff4:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <s+0x1>
     ff8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <s+0x2>
     ffc:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <s+0x3>
    1000:	08 95       	ret

00001002 <calcularSen>:
    1002:	60 e2       	ldi	r22, 0x20	; 32
    1004:	73 e0       	ldi	r23, 0x03	; 3
    1006:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    100a:	99 23       	and	r25, r25
    100c:	14 f4       	brge	.+4      	; 0x1012 <calcularSen+0x10>
    100e:	80 5e       	subi	r24, 0xE0	; 224
    1010:	9c 4f       	sbci	r25, 0xFC	; 252
    1012:	80 39       	cpi	r24, 0x90	; 144
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	92 07       	cpc	r25, r18
    1018:	dc f0       	brlt	.+54     	; 0x1050 <calcularSen+0x4e>
    101a:	60 e9       	ldi	r22, 0x90	; 144
    101c:	71 e0       	ldi	r23, 0x01	; 1
    101e:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1022:	89 3c       	cpi	r24, 0xC9	; 201
    1024:	91 05       	cpc	r25, r1
    1026:	4c f0       	brlt	.+18     	; 0x103a <calcularSen+0x38>
    1028:	28 ec       	ldi	r18, 0xC8	; 200
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	b9 01       	movw	r22, r18
    102e:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1032:	a9 01       	movw	r20, r18
    1034:	48 1b       	sub	r20, r24
    1036:	59 0b       	sbc	r21, r25
    1038:	ca 01       	movw	r24, r20
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	fc 01       	movw	r30, r24
    1040:	e2 5e       	subi	r30, 0xE2	; 226
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	91 95       	neg	r25
    104a:	81 95       	neg	r24
    104c:	91 09       	sbc	r25, r1
    104e:	08 95       	ret
    1050:	60 e9       	ldi	r22, 0x90	; 144
    1052:	71 e0       	ldi	r23, 0x01	; 1
    1054:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1058:	89 3c       	cpi	r24, 0xC9	; 201
    105a:	91 05       	cpc	r25, r1
    105c:	4c f0       	brlt	.+18     	; 0x1070 <calcularSen+0x6e>
    105e:	28 ec       	ldi	r18, 0xC8	; 200
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1068:	a9 01       	movw	r20, r18
    106a:	48 1b       	sub	r20, r24
    106c:	59 0b       	sbc	r21, r25
    106e:	ca 01       	movw	r24, r20
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	fc 01       	movw	r30, r24
    1076:	e2 5e       	subi	r30, 0xE2	; 226
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	08 95       	ret

00001080 <frenoAbajo>:
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    1090:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1094:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <puntosAngulo+0x1>
    1098:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <puntosAngulo>
    109c:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    10a0:	bc 01       	movw	r22, r24
    10a2:	43 96       	adiw	r24, 0x13	; 19
    10a4:	87 97       	sbiw	r24, 0x27	; 39
    10a6:	70 f4       	brcc	.+28     	; 0x10c4 <frenoAbajo+0x44>
    10a8:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <countStop>
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <countStop>
    10b2:	83 33       	cpi	r24, 0x33	; 51
    10b4:	48 f0       	brcs	.+18     	; 0x10c8 <frenoAbajo+0x48>
    10b6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <countStop>
    10ba:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
    10be:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <estado>
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <frenoAbajo+0x48>
    10c4:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <countStop>
    10c8:	07 2e       	mov	r0, r23
    10ca:	00 0c       	add	r0, r0
    10cc:	88 0b       	sbc	r24, r24
    10ce:	99 0b       	sbc	r25, r25
    10d0:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 ed       	ldi	r20, 0xD0	; 208
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    10e0:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
    10e4:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    10e8:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
    10ec:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    10f0:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <e>
    10f4:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <e+0x1>
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    1100:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e6       	ldi	r25, 0x60	; 96
    1108:	aa ee       	ldi	r26, 0xEA	; 234
    110a:	b5 e4       	ldi	r27, 0x45	; 69
    110c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <posRef>
    1110:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <posRef+0x1>
    1114:	a0 93 1b 03 	sts	0x031B, r26	; 0x80031b <posRef+0x2>
    1118:	b0 93 1c 03 	sts	0x031C, r27	; 0x80031c <posRef+0x3>
    111c:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1120:	bc 01       	movw	r22, r24
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e6       	ldi	r23, 0x60	; 96
    1132:	8a ee       	ldi	r24, 0xEA	; 234
    1134:	95 e4       	ldi	r25, 0x45	; 69
    1136:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    113a:	6b 01       	movw	r12, r22
    113c:	7c 01       	movw	r14, r24
    113e:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1142:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    1146:	07 2e       	mov	r0, r23
    1148:	00 0c       	add	r0, r0
    114a:	88 0b       	sbc	r24, r24
    114c:	99 0b       	sbc	r25, r25
    114e:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1152:	a7 01       	movw	r20, r14
    1154:	96 01       	movw	r18, r12
    1156:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    115a:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
    115e:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    1162:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
    1166:	00 91 09 03 	lds	r16, 0x0309	; 0x800309 <derivada_pos>
    116a:	10 91 0a 03 	lds	r17, 0x030A	; 0x80030a <derivada_pos+0x1>
    116e:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <derivada_pos+0x2>
    1172:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <derivada_pos+0x3>
    1176:	00 93 15 03 	sts	0x0315, r16	; 0x800315 <derivada>
    117a:	10 93 16 03 	sts	0x0316, r17	; 0x800316 <derivada+0x1>
    117e:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <derivada+0x2>
    1182:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <derivada+0x3>
    1186:	cb 01       	movw	r24, r22
    1188:	0e 94 98 06 	call	0xd30	; 0xd30 <calcularIntegral>
    118c:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1190:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    1194:	07 2e       	mov	r0, r23
    1196:	00 0c       	add	r0, r0
    1198:	88 0b       	sbc	r24, r24
    119a:	99 0b       	sbc	r25, r25
    119c:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    11a0:	23 e3       	ldi	r18, 0x33	; 51
    11a2:	33 e3       	ldi	r19, 0x33	; 51
    11a4:	43 e3       	ldi	r20, 0x33	; 51
    11a6:	5f e3       	ldi	r21, 0x3F	; 63
    11a8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	08 95       	ret

000011ba <calcularDerivada_angulo>:
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
    11c8:	0e 94 7c 07 	call	0xef8	; 0xef8 <calcularDerivada_encoder>
    11cc:	ce 01       	movw	r24, r28
    11ce:	88 53       	subi	r24, 0x38	; 56
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    11d6:	ec 01       	movw	r28, r24
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a e7       	ldi	r20, 0x7A	; 122
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
    11e4:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
    11e8:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
    11ec:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
    11f0:	0e 94 14 11 	call	0x2228	; 0x2228 <__divsf3>
    11f4:	6b 01       	movw	r12, r22
    11f6:	7c 01       	movw	r14, r24
    11f8:	be 01       	movw	r22, r28
    11fa:	dd 0f       	add	r29, r29
    11fc:	88 0b       	sbc	r24, r24
    11fe:	99 0b       	sbc	r25, r25
    1200:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1204:	a7 01       	movw	r20, r14
    1206:	96 01       	movw	r18, r12
    1208:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    120c:	2a e1       	ldi	r18, 0x1A	; 26
    120e:	34 e3       	ldi	r19, 0x34	; 52
    1210:	4c e4       	ldi	r20, 0x4C	; 76
    1212:	52 e4       	ldi	r21, 0x42	; 66
    1214:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    1218:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <derivada_angulo>
    121c:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <derivada_angulo+0x1>
    1220:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <derivada_angulo+0x2>
    1224:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <derivada_angulo+0x3>
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <levantar>:
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <e>
    1242:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <e+0x1>
    1246:	d0 93 19 05 	sts	0x0519, r29	; 0x800519 <puntosAngulo+0x1>
    124a:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <puntosAngulo>
    124e:	ce 01       	movw	r24, r28
    1250:	60 e2       	ldi	r22, 0x20	; 32
    1252:	73 e0       	ldi	r23, 0x03	; 3
    1254:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1258:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    125c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1260:	99 23       	and	r25, r25
    1262:	34 f4       	brge	.+12     	; 0x1270 <levantar+0x3a>
    1264:	80 5e       	subi	r24, 0xE0	; 224
    1266:	9c 4f       	sbci	r25, 0xFC	; 252
    1268:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    126c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1270:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <fueMayor100>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	09 f0       	breq	.+2      	; 0x127a <levantar+0x44>
    1278:	44 c0       	rjmp	.+136    	; 0x1302 <levantar+0xcc>
    127a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    127e:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1282:	85 57       	subi	r24, 0x75	; 117
    1284:	91 40       	sbci	r25, 0x01	; 1
    1286:	c7 97       	sbiw	r24, 0x37	; 55
    1288:	68 f4       	brcc	.+26     	; 0x12a4 <levantar+0x6e>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <estado>
    1290:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <s>
    1294:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <s+0x1>
    1298:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <s+0x2>
    129c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <s+0x3>
    12a0:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <calcularDerivada_angulo>
    12aa:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <derivada_angulo>
    12ae:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <derivada_angulo+0x1>
    12b2:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <derivada_angulo+0x2>
    12b6:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <derivada_angulo+0x3>
    12ba:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <derivada>
    12be:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <derivada+0x1>
    12c2:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <derivada+0x2>
    12c6:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <derivada+0x3>
    12ca:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    12ce:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    12d2:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    12d6:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    12da:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    12de:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    12e2:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    12e6:	bc 01       	movw	r22, r24
    12e8:	99 0f       	add	r25, r25
    12ea:	88 0b       	sbc	r24, r24
    12ec:	99 0b       	sbc	r25, r25
    12ee:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    12f2:	2d ec       	ldi	r18, 0xCD	; 205
    12f4:	3c ec       	ldi	r19, 0xCC	; 204
    12f6:	4c e4       	ldi	r20, 0x4C	; 76
    12f8:	5f eb       	ldi	r21, 0xBF	; 191
    12fa:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    12fe:	8b 01       	movw	r16, r22
    1300:	9c 01       	movw	r18, r24
    1302:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <fueMayor100>
    1306:	81 11       	cpse	r24, r1
    1308:	34 c0       	rjmp	.+104    	; 0x1372 <levantar+0x13c>
    130a:	ce 01       	movw	r24, r28
    130c:	dd 23       	and	r29, r29
    130e:	24 f4       	brge	.+8      	; 0x1318 <levantar+0xe2>
    1310:	88 27       	eor	r24, r24
    1312:	99 27       	eor	r25, r25
    1314:	8c 1b       	sub	r24, r28
    1316:	9d 0b       	sbc	r25, r29
    1318:	80 57       	subi	r24, 0x70	; 112
    131a:	9e 4f       	sbci	r25, 0xFE	; 254
    131c:	60 e2       	ldi	r22, 0x20	; 32
    131e:	73 e0       	ldi	r23, 0x03	; 3
    1320:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1324:	85 3f       	cpi	r24, 0xF5	; 245
    1326:	91 40       	sbci	r25, 0x01	; 1
    1328:	1c f0       	brlt	.+6      	; 0x1330 <levantar+0xfa>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <fueMayor100>
    1330:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <getTiempoSEOS>
    1334:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
    1338:	28 e4       	ldi	r18, 0x48	; 72
    133a:	31 ee       	ldi	r19, 0xE1	; 225
    133c:	4a e1       	ldi	r20, 0x1A	; 26
    133e:	50 e4       	ldi	r21, 0x40	; 64
    1340:	0e 94 14 11 	call	0x2228	; 0x2228 <__divsf3>
    1344:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
    1348:	cb 01       	movw	r24, r22
    134a:	60 e2       	ldi	r22, 0x20	; 32
    134c:	73 e0       	ldi	r23, 0x03	; 3
    134e:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1352:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    1356:	bc 01       	movw	r22, r24
    1358:	99 0f       	add	r25, r25
    135a:	88 0b       	sbc	r24, r24
    135c:	99 0b       	sbc	r25, r25
    135e:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 ec       	ldi	r20, 0xC0	; 192
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    136e:	8b 01       	movw	r16, r22
    1370:	9c 01       	movw	r18, r24
    1372:	c9 01       	movw	r24, r18
    1374:	b8 01       	movw	r22, r16
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <superArriba>:
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    138c:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1390:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <puntosAngulo+0x1>
    1394:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <puntosAngulo>
    1398:	60 e2       	ldi	r22, 0x20	; 32
    139a:	73 e0       	ldi	r23, 0x03	; 3
    139c:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    13a0:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    13a4:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    13a8:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    13ac:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    13b0:	99 23       	and	r25, r25
    13b2:	34 f4       	brge	.+12     	; 0x13c0 <superArriba+0x40>
    13b4:	80 5e       	subi	r24, 0xE0	; 224
    13b6:	9c 4f       	sbci	r25, 0xFC	; 252
    13b8:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    13bc:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    13c0:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    13c4:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    13c8:	9c 01       	movw	r18, r24
    13ca:	21 50       	subi	r18, 0x01	; 1
    13cc:	31 09       	sbc	r19, r1
    13ce:	30 93 08 03 	sts	0x0308, r19	; 0x800308 <e+0x1>
    13d2:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <e>
    13d6:	80 56       	subi	r24, 0x60	; 96
    13d8:	91 40       	sbci	r25, 0x01	; 1
    13da:	83 36       	cpi	r24, 0x63	; 99
    13dc:	91 05       	cpc	r25, r1
    13de:	58 f0       	brcs	.+22     	; 0x13f6 <superArriba+0x76>
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <estado>
    13e6:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
    13ea:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
    13ee:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
    13f2:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
    13f6:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    13fa:	81 34       	cpi	r24, 0x41	; 65
    13fc:	9f 41       	sbci	r25, 0x1F	; 31
    13fe:	48 f0       	brcs	.+18     	; 0x1412 <superArriba+0x92>
    1400:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    1404:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    140e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1412:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1416:	88 38       	cpi	r24, 0x88	; 136
    1418:	93 41       	sbci	r25, 0x13	; 19
    141a:	48 f4       	brcc	.+18     	; 0x142e <superArriba+0xae>
    141c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    1420:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    142a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    142e:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <puntosAngulo>
    1432:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <puntosAngulo+0x1>
    1436:	0e 94 dd 08 	call	0x11ba	; 0x11ba <calcularDerivada_angulo>
    143a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <derivada_angulo>
    143e:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <derivada_angulo+0x1>
    1442:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <derivada_angulo+0x2>
    1446:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <derivada_angulo+0x3>
    144a:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <derivada>
    144e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <derivada+0x1>
    1452:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <derivada+0x2>
    1456:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <derivada+0x3>
    145a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    145e:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1462:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    1466:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    146a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    146e:	0e 94 98 06 	call	0xd30	; 0xd30 <calcularIntegral>
    1472:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1476:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    147a:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <valor+0x1>
    147e:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <valor>
    1482:	07 2e       	mov	r0, r23
    1484:	00 0c       	add	r0, r0
    1486:	88 0b       	sbc	r24, r24
    1488:	99 0b       	sbc	r25, r25
    148a:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    148e:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
    1492:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
    1496:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
    149a:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
    149e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    14a2:	6b 01       	movw	r12, r22
    14a4:	7c 01       	movw	r14, r24
    14a6:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
    14aa:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
    14ae:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
    14b2:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
    14b6:	60 91 2d 03 	lds	r22, 0x032D	; 0x80032d <Ki>
    14ba:	70 91 2e 03 	lds	r23, 0x032E	; 0x80032e <Ki+0x1>
    14be:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <Ki+0x2>
    14c2:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <Ki+0x3>
    14c6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	c7 01       	movw	r24, r14
    14d0:	b6 01       	movw	r22, r12
    14d2:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    14d6:	6b 01       	movw	r12, r22
    14d8:	7c 01       	movw	r14, r24
    14da:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <derivada>
    14de:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <derivada+0x1>
    14e2:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <derivada+0x2>
    14e6:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <derivada+0x3>
    14ea:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <Kd>
    14ee:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <Kd+0x1>
    14f2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Kd+0x2>
    14f6:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <Kd+0x3>
    14fa:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    150a:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
    150e:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
    1512:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
    1516:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	08 95       	ret

00001524 <calcularDerivada_pos>:
		 }
	 }
	//return( Kp*e + Kd*derivada + Ki*s);
}

void calcularDerivada_pos(int16_t e){
    1524:	8f 92       	push	r8
    1526:	9f 92       	push	r9
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	cf 92       	push	r12
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
    153c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <calcularDerivada_angulo>
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    1540:	00 91 21 03 	lds	r16, 0x0321	; 0x800321 <vel>
    1544:	10 91 22 03 	lds	r17, 0x0322	; 0x800322 <vel+0x1>
    1548:	d0 91 23 03 	lds	r29, 0x0323	; 0x800323 <vel+0x2>
    154c:	c0 91 24 03 	lds	r28, 0x0324	; 0x800324 <vel+0x3>
	if (vel>1700)
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e8       	ldi	r19, 0x80	; 128
    1554:	44 ed       	ldi	r20, 0xD4	; 212
    1556:	54 e4       	ldi	r21, 0x44	; 68
    1558:	60 2f       	mov	r22, r16
    155a:	71 2f       	mov	r23, r17
    155c:	8d 2f       	mov	r24, r29
    155e:	9c 2f       	mov	r25, r28
    1560:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__gesf2>
    1564:	18 16       	cp	r1, r24
    1566:	2c f0       	brlt	.+10     	; 0x1572 <calcularDerivada_pos+0x4e>
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    1568:	c0 2e       	mov	r12, r16
    156a:	d1 2e       	mov	r13, r17
    156c:	ed 2e       	mov	r14, r29
    156e:	fc 2e       	mov	r15, r28
    1570:	0c c0       	rjmp	.+24     	; 0x158a <calcularDerivada_pos+0x66>
	if (vel>1700)
	{
		velAxi=1700;
    1572:	c1 2c       	mov	r12, r1
    1574:	68 94       	set
    1576:	dd 24       	eor	r13, r13
    1578:	d7 f8       	bld	r13, 7
    157a:	0f 2e       	mov	r0, r31
    157c:	f4 ed       	ldi	r31, 0xD4	; 212
    157e:	ef 2e       	mov	r14, r31
    1580:	f0 2d       	mov	r31, r0
    1582:	0f 2e       	mov	r0, r31
    1584:	f4 e4       	ldi	r31, 0x44	; 68
    1586:	ff 2e       	mov	r15, r31
    1588:	f0 2d       	mov	r31, r0
	}
	if (vel<-1700)
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e8       	ldi	r19, 0x80	; 128
    158e:	44 ed       	ldi	r20, 0xD4	; 212
    1590:	54 ec       	ldi	r21, 0xC4	; 196
    1592:	60 2f       	mov	r22, r16
    1594:	71 2f       	mov	r23, r17
    1596:	8d 2f       	mov	r24, r29
    1598:	9c 2f       	mov	r25, r28
    159a:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
    159e:	88 23       	and	r24, r24
    15a0:	64 f4       	brge	.+24     	; 0x15ba <calcularDerivada_pos+0x96>
	{
		velAxi=-1700;
    15a2:	c1 2c       	mov	r12, r1
    15a4:	68 94       	set
    15a6:	dd 24       	eor	r13, r13
    15a8:	d7 f8       	bld	r13, 7
    15aa:	0f 2e       	mov	r0, r31
    15ac:	f4 ed       	ldi	r31, 0xD4	; 212
    15ae:	ef 2e       	mov	r14, r31
    15b0:	f0 2d       	mov	r31, r0
    15b2:	0f 2e       	mov	r0, r31
    15b4:	f4 ec       	ldi	r31, 0xC4	; 196
    15b6:	ff 2e       	mov	r15, r31
    15b8:	f0 2d       	mov	r31, r0
	}
	derivada_pos = derivada_angulo - velAxi*(8.0645);
    15ba:	80 90 0d 03 	lds	r8, 0x030D	; 0x80030d <derivada_angulo>
    15be:	90 90 0e 03 	lds	r9, 0x030E	; 0x80030e <derivada_angulo+0x1>
    15c2:	a0 90 0f 03 	lds	r10, 0x030F	; 0x80030f <derivada_angulo+0x2>
    15c6:	b0 90 10 03 	lds	r11, 0x0310	; 0x800310 <derivada_angulo+0x3>
    15ca:	21 e3       	ldi	r18, 0x31	; 49
    15cc:	38 e0       	ldi	r19, 0x08	; 8
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	6c 2d       	mov	r22, r12
    15d4:	7d 2d       	mov	r23, r13
    15d6:	8e 2d       	mov	r24, r14
    15d8:	9f 2d       	mov	r25, r15
    15da:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    15e2:	c5 01       	movw	r24, r10
    15e4:	b4 01       	movw	r22, r8
    15e6:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    15ea:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <derivada_pos>
    15ee:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <derivada_pos+0x1>
    15f2:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <derivada_pos+0x2>
    15f6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <derivada_pos+0x3>
	//int16_t calculoAxi = e - eant;
	//eant = e;
	//derivada = (float)(0.02)*(float)calculoAxi+(float)(0.98)*derivada;
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	08 95       	ret

00001614 <ec_pos>:


float ec_pos(){
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
	puntosAngulo = e;
    161c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    1620:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1624:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <puntosAngulo+0x1>
    1628:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <puntosAngulo>
	e=calcularSen(e);
    162c:	0e 94 01 08 	call	0x1002	; 0x1002 <calcularSen>
    1630:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    1634:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
    1638:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <getSlideResistor>
    163c:	bc 01       	movw	r22, r24
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
    1646:	2d ec       	ldi	r18, 0xCD	; 205
    1648:	3c ec       	ldi	r19, 0xCC	; 204
    164a:	44 e5       	ldi	r20, 0x54	; 84
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    1652:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
    1656:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
    165a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
    165e:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;	//el lagro es: 20
    1662:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1666:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    166a:	07 2e       	mov	r0, r23
    166c:	00 0c       	add	r0, r0
    166e:	88 0b       	sbc	r24, r24
    1670:	99 0b       	sbc	r25, r25
    1672:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 ed       	ldi	r20, 0xD0	; 208
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    1682:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
    1686:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    168a:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
	valor = getPos()+e;
    168e:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1692:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <e>
    1696:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <e+0x1>
    169a:	82 0f       	add	r24, r18
    169c:	93 1f       	adc	r25, r19
    169e:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    16a2:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	
	calcularDerivada_pos(puntosAngulo);		//por ahora dejo fuera la pos
    16a6:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <puntosAngulo>
    16aa:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <puntosAngulo+0x1>
    16ae:	0e 94 92 0a 	call	0x1524	; 0x1524 <calcularDerivada_pos>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
    16b2:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
    16b6:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
    16ba:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
    16be:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
    16c2:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    16c6:	bc 01       	movw	r22, r24
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 bc 11 	call	0x2378	; 0x2378 <__floatunsisf>
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
    16d4:	c7 01       	movw	r24, r14
    16d6:	b6 01       	movw	r22, r12
    16d8:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    16dc:	6b 01       	movw	r12, r22
    16de:	7c 01       	movw	r14, r24
    16e0:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    16e4:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    16e8:	07 2e       	mov	r0, r23
    16ea:	00 0c       	add	r0, r0
    16ec:	88 0b       	sbc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    16f4:	a7 01       	movw	r20, r14
    16f6:	96 01       	movw	r18, r12
    16f8:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    16fc:	0e 94 86 11 	call	0x230c	; 0x230c <__fixsfsi>
    1700:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    1704:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	derivada = derivada_pos;
    1708:	c0 90 09 03 	lds	r12, 0x0309	; 0x800309 <derivada_pos>
    170c:	d0 90 0a 03 	lds	r13, 0x030A	; 0x80030a <derivada_pos+0x1>
    1710:	e0 90 0b 03 	lds	r14, 0x030B	; 0x80030b <derivada_pos+0x2>
    1714:	f0 90 0c 03 	lds	r15, 0x030C	; 0x80030c <derivada_pos+0x3>
    1718:	c0 92 15 03 	sts	0x0315, r12	; 0x800315 <derivada>
    171c:	d0 92 16 03 	sts	0x0316, r13	; 0x800316 <derivada+0x1>
    1720:	e0 92 17 03 	sts	0x0317, r14	; 0x800317 <derivada+0x2>
    1724:	f0 92 18 03 	sts	0x0318, r15	; 0x800318 <derivada+0x3>
	
	calcularIntegral(e);
    1728:	cb 01       	movw	r24, r22
    172a:	0e 94 98 06 	call	0xd30	; 0xd30 <calcularIntegral>
	return( Kp*e + Kd*derivada + Ki*s );	//0.3   0.07
    172e:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1732:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    1736:	07 2e       	mov	r0, r23
    1738:	00 0c       	add	r0, r0
    173a:	88 0b       	sbc	r24, r24
    173c:	99 0b       	sbc	r25, r25
    173e:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1742:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
    1746:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
    174a:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
    174e:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
    1752:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    1756:	6b 01       	movw	r12, r22
    1758:	7c 01       	movw	r14, r24
    175a:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <derivada>
    175e:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <derivada+0x1>
    1762:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <derivada+0x2>
    1766:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <derivada+0x3>
    176a:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <Kd>
    176e:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <Kd+0x1>
    1772:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Kd+0x2>
    1776:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <Kd+0x3>
    177a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	c7 01       	movw	r24, r14
    1784:	b6 01       	movw	r22, r12
    1786:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    178a:	6b 01       	movw	r12, r22
    178c:	7c 01       	movw	r14, r24
    178e:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
    1792:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
    1796:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
    179a:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
    179e:	60 91 2d 03 	lds	r22, 0x032D	; 0x80032d <Ki>
    17a2:	70 91 2e 03 	lds	r23, 0x032E	; 0x80032e <Ki+0x1>
    17a6:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <Ki+0x2>
    17aa:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <Ki+0x3>
    17ae:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsf3>
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	c7 01       	movw	r24, r14
    17b8:	b6 01       	movw	r22, r12
    17ba:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

000017c8 <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
    17c8:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    17cc:	88 23       	and	r24, r24
    17ce:	91 f0       	breq	.+36     	; 0x17f4 <f00+0x2c>
		angulo--;
    17d0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    17d4:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    17de:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	9f ef       	ldi	r25, 0xFF	; 255
    17e6:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    17ea:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroUno;
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if (IZQ){
    17f4:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    17f8:	88 23       	and	r24, r24
    17fa:	89 f0       	breq	.+34     	; 0x181e <f00+0x56>
		angulo++;
    17fc:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1800:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    180a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    1816:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoCero;
    181a:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    181e:	08 95       	ret

00001820 <f10>:
	}
}
void f10(void){
	if(DER){
    1820:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    1824:	88 23       	and	r24, r24
    1826:	91 f0       	breq	.+36     	; 0x184c <f10+0x2c>
		angulo++;
    1828:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    182c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    1836:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    1842:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoUno;
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if(!IZQ){
    184c:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    1850:	81 11       	cpse	r24, r1
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <f10+0x56>
		angulo--;
    1854:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1858:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    1862:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9f ef       	ldi	r25, 0xFF	; 255
    186a:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    186e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroCero;
    1872:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
    1876:	08 95       	ret

00001878 <f01>:
	}
}
void f01(void){
	if(!DER){
    1878:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    187c:	81 11       	cpse	r24, r1
    187e:	11 c0       	rjmp	.+34     	; 0x18a2 <f01+0x2a>
		angulo++;
    1880:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1884:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    188e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    189a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroCero;
    189e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
	}
	if(IZQ){
    18a2:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    18a6:	88 23       	and	r24, r24
    18a8:	91 f0       	breq	.+36     	; 0x18ce <f01+0x56>
		angulo--;
    18aa:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    18ae:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    18b8:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    18c4:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoUno;
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    18ce:	08 95       	ret

000018d0 <f11>:
	}
}
void f11(void){
	if(!DER){
    18d0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    18d4:	81 11       	cpse	r24, r1
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <f11+0x2c>
		angulo--;
    18d8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    18dc:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    18e6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    18f2:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoCero;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if(!IZQ){
    18fc:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    1900:	81 11       	cpse	r24, r1
    1902:	12 c0       	rjmp	.+36     	; 0x1928 <f11+0x58>
		angulo++;
    1904:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1908:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    1912:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    191e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroUno;
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    1928:	08 95       	ret

0000192a <getAnguloEncoder>:
//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
	*anguloOUT = angulo;
    192a:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <angulo>
    192e:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <angulo+0x1>
    1932:	fc 01       	movw	r30, r24
    1934:	31 83       	std	Z+1, r19	; 0x01
    1936:	20 83       	st	Z, r18
	if(tiempoMuestraOUT!=0){
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <getAnguloEncoder+0x16>
    193e:	65 c0       	rjmp	.+202    	; 0x1a0a <getAnguloEncoder+0xe0>
		*tiempoMuestraOUT = anguloANt*(derivate_D + derivate_I)/2;
    1940:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <derivate_D>
    1944:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <derivate_D+0x1>
    1948:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_I>
    194c:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_I+0x1>
    1950:	28 0f       	add	r18, r24
    1952:	39 1f       	adc	r19, r25
    1954:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <anguloANt>
    1958:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <anguloANt+0x1>
    195c:	24 9f       	mul	r18, r20
    195e:	c0 01       	movw	r24, r0
    1960:	25 9f       	mul	r18, r21
    1962:	90 0d       	add	r25, r0
    1964:	34 9f       	mul	r19, r20
    1966:	90 0d       	add	r25, r0
    1968:	11 24       	eor	r1, r1
    196a:	99 23       	and	r25, r25
    196c:	0c f4       	brge	.+2      	; 0x1970 <getAnguloEncoder+0x46>
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	95 95       	asr	r25
    1972:	87 95       	ror	r24
    1974:	fb 01       	movw	r30, r22
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
		
		if(*tiempoMuestraOUT == axiAnt){
    197a:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <axiAnt>
    197e:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <axiAnt+0x1>
    1982:	82 17       	cp	r24, r18
    1984:	93 07       	cpc	r25, r19
    1986:	39 f5       	brne	.+78     	; 0x19d6 <getAnguloEncoder+0xac>
			if(derivate_counter_D > derivate_counter_I){
    1988:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <derivate_counter_D>
    198c:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1990:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1994:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1998:	82 17       	cp	r24, r18
    199a:	93 07       	cpc	r25, r19
    199c:	74 f4       	brge	.+28     	; 0x19ba <getAnguloEncoder+0x90>
				*tiempoMuestraOUT = anguloANt*derivate_counter_D;	
    199e:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <derivate_counter_D>
    19a2:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    19a6:	42 9f       	mul	r20, r18
    19a8:	c0 01       	movw	r24, r0
    19aa:	43 9f       	mul	r20, r19
    19ac:	90 0d       	add	r25, r0
    19ae:	52 9f       	mul	r21, r18
    19b0:	90 0d       	add	r25, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <getAnguloEncoder+0xac>
			}else{
				*tiempoMuestraOUT = anguloANt*derivate_counter_I;	
    19ba:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <derivate_counter_I>
    19be:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    19c2:	42 9f       	mul	r20, r18
    19c4:	c0 01       	movw	r24, r0
    19c6:	43 9f       	mul	r20, r19
    19c8:	90 0d       	add	r25, r0
    19ca:	52 9f       	mul	r21, r18
    19cc:	90 0d       	add	r25, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	fb 01       	movw	r30, r22
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
			}
		}
		
		axiAnt= anguloANt*(derivate_D + derivate_I)/2;;
    19d6:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <derivate_D>
    19da:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <derivate_D+0x1>
    19de:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_I>
    19e2:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_I+0x1>
    19e6:	28 0f       	add	r18, r24
    19e8:	39 1f       	adc	r19, r25
    19ea:	42 9f       	mul	r20, r18
    19ec:	c0 01       	movw	r24, r0
    19ee:	43 9f       	mul	r20, r19
    19f0:	90 0d       	add	r25, r0
    19f2:	52 9f       	mul	r21, r18
    19f4:	90 0d       	add	r25, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	99 23       	and	r25, r25
    19fa:	0c f4       	brge	.+2      	; 0x19fe <getAnguloEncoder+0xd4>
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	95 95       	asr	r25
    1a00:	87 95       	ror	r24
    1a02:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <axiAnt+0x1>
    1a06:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <axiAnt>
    1a0a:	08 95       	ret

00001a0c <set_origen>:
		signoAnt= anguloANt;
	}
}

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    1a0c:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <DER>
    1a10:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    1a14:	89 23       	and	r24, r25
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <set_origen+0x12>
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    1a1e:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <DER>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	22 23       	and	r18, r18
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <set_origen+0x22>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <IZQ>
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	82 23       	and	r24, r18
    1a36:	93 23       	and	r25, r19
    1a38:	89 2b       	or	r24, r25
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <set_origen+0x36>
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    1a42:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <DER>
    1a46:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <IZQ>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	33 23       	and	r19, r19
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <set_origen+0x4a>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	82 23       	and	r24, r18
    1a5a:	93 23       	and	r25, r19
    1a5c:	89 2b       	or	r24, r25
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <set_origen+0x5a>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    1a66:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    1a6a:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <IZQ>
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	81 11       	cpse	r24, r1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	21 11       	cpse	r18, r1
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	89 23       	and	r24, r25
    1a7c:	11 f0       	breq	.+4      	; 0x1a82 <set_origen+0x76>
    1a7e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
    1a82:	2f ef       	ldi	r18, 0xFF	; 255
    1a84:	80 e7       	ldi	r24, 0x70	; 112
    1a86:	92 e0       	ldi	r25, 0x02	; 2
    1a88:	21 50       	subi	r18, 0x01	; 1
    1a8a:	80 40       	sbci	r24, 0x00	; 0
    1a8c:	90 40       	sbci	r25, 0x00	; 0
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <set_origen+0x7c>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <set_origen+0x86>
    1a92:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    1a94:	89 b1       	in	r24, 0x09	; 9
    1a96:	88 70       	andi	r24, 0x08	; 8
    1a98:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1a9c:	89 b1       	in	r24, 0x09	; 9
    1a9e:	84 70       	andi	r24, 0x04	; 4
    1aa0:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1aa4:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	e9 54       	subi	r30, 0x49	; 73
    1ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	f0 81       	ld	r31, Z
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	09 95       	icall
	
	angulo = 0;	
    1aba:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <angulo+0x1>
    1abe:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <angulo>
    1ac2:	08 95       	ret

00001ac4 <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    1ac4:	8a b1       	in	r24, 0x0a	; 10
    1ac6:	8b 7f       	andi	r24, 0xFB	; 251
    1ac8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    1aca:	8b b1       	in	r24, 0x0b	; 11
    1acc:	84 60       	ori	r24, 0x04	; 4
    1ace:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    1ad0:	8a b1       	in	r24, 0x0a	; 10
    1ad2:	87 7f       	andi	r24, 0xF7	; 247
    1ad4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    1ad6:	8b b1       	in	r24, 0x0b	; 11
    1ad8:	88 60       	ori	r24, 0x08	; 8
    1ada:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    1adc:	8d b3       	in	r24, 0x1d	; 29
    1ade:	81 60       	ori	r24, 0x01	; 1
    1ae0:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    1ae2:	e9 e6       	ldi	r30, 0x69	; 105
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	81 60       	ori	r24, 0x01	; 1
    1aea:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    1aec:	80 81       	ld	r24, Z
    1aee:	8d 7f       	andi	r24, 0xFD	; 253
    1af0:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    1af2:	8d b3       	in	r24, 0x1d	; 29
    1af4:	82 60       	ori	r24, 0x02	; 2
    1af6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    1af8:	80 81       	ld	r24, Z
    1afa:	84 60       	ori	r24, 0x04	; 4
    1afc:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    1afe:	80 81       	ld	r24, Z
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    1b0a:	94 e0       	ldi	r25, 0x04	; 4
    1b0c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    1b10:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    1b14:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    1b18:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <set_origen>
    1b1c:	08 95       	ret

00001b1e <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	2f 93       	push	r18
    1b2a:	3f 93       	push	r19
    1b2c:	4f 93       	push	r20
    1b2e:	5f 93       	push	r21
    1b30:	6f 93       	push	r22
    1b32:	7f 93       	push	r23
    1b34:	8f 93       	push	r24
    1b36:	9f 93       	push	r25
    1b38:	af 93       	push	r26
    1b3a:	bf 93       	push	r27
    1b3c:	ef 93       	push	r30
    1b3e:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    1b40:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1b44:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1b48:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <derivate_I+0x1>
    1b4c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <derivate_I>
	derivate_counter_I = 0;
    1b50:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <derivate_counter_I+0x1>
    1b54:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <derivate_counter_I>
	IZQ = LEERIZQ;
    1b58:	89 b1       	in	r24, 0x09	; 9
    1b5a:	88 70       	andi	r24, 0x08	; 8
    1b5c:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1b60:	89 b1       	in	r24, 0x09	; 9
    1b62:	84 70       	andi	r24, 0x04	; 4
    1b64:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1b68:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	e9 54       	subi	r30, 0x49	; 73
    1b74:	fd 4f       	sbci	r31, 0xFD	; 253
    1b76:	01 90       	ld	r0, Z+
    1b78:	f0 81       	ld	r31, Z
    1b7a:	e0 2d       	mov	r30, r0
    1b7c:	09 95       	icall
}
    1b7e:	ff 91       	pop	r31
    1b80:	ef 91       	pop	r30
    1b82:	bf 91       	pop	r27
    1b84:	af 91       	pop	r26
    1b86:	9f 91       	pop	r25
    1b88:	8f 91       	pop	r24
    1b8a:	7f 91       	pop	r23
    1b8c:	6f 91       	pop	r22
    1b8e:	5f 91       	pop	r21
    1b90:	4f 91       	pop	r20
    1b92:	3f 91       	pop	r19
    1b94:	2f 91       	pop	r18
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    1ba0:	1f 92       	push	r1
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	0f 92       	push	r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	2f 93       	push	r18
    1bac:	3f 93       	push	r19
    1bae:	4f 93       	push	r20
    1bb0:	5f 93       	push	r21
    1bb2:	6f 93       	push	r22
    1bb4:	7f 93       	push	r23
    1bb6:	8f 93       	push	r24
    1bb8:	9f 93       	push	r25
    1bba:	af 93       	push	r26
    1bbc:	bf 93       	push	r27
    1bbe:	ef 93       	push	r30
    1bc0:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    1bc2:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1bc6:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1bca:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <derivate_D+0x1>
    1bce:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <derivate_D>
	derivate_counter_D = 0;
    1bd2:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <derivate_counter_D+0x1>
    1bd6:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <derivate_counter_D>
	IZQ = LEERIZQ;
    1bda:	89 b1       	in	r24, 0x09	; 9
    1bdc:	88 70       	andi	r24, 0x08	; 8
    1bde:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1be2:	89 b1       	in	r24, 0x09	; 9
    1be4:	84 70       	andi	r24, 0x04	; 4
    1be6:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1bea:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	e9 54       	subi	r30, 0x49	; 73
    1bf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf8:	01 90       	ld	r0, Z+
    1bfa:	f0 81       	ld	r31, Z
    1bfc:	e0 2d       	mov	r30, r0
    1bfe:	09 95       	icall
}
    1c00:	ff 91       	pop	r31
    1c02:	ef 91       	pop	r30
    1c04:	bf 91       	pop	r27
    1c06:	af 91       	pop	r26
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	7f 91       	pop	r23
    1c0e:	6f 91       	pop	r22
    1c10:	5f 91       	pop	r21
    1c12:	4f 91       	pop	r20
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	2f 93       	push	r18
    1c2e:	8f 93       	push	r24
    1c30:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D<31000)derivate_counter_D++;
    1c32:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1c36:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1c3a:	88 31       	cpi	r24, 0x18	; 24
    1c3c:	99 47       	sbci	r25, 0x79	; 121
    1c3e:	4c f4       	brge	.+18     	; 0x1c52 <__vector_7+0x30>
    1c40:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1c44:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <derivate_counter_D+0x1>
    1c4e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <derivate_counter_D>
	if(derivate_counter_I<31000)derivate_counter_I++;
    1c52:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1c56:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1c5a:	88 31       	cpi	r24, 0x18	; 24
    1c5c:	99 47       	sbci	r25, 0x79	; 121
    1c5e:	4c f4       	brge	.+18     	; 0x1c72 <__vector_7+0x50>
    1c60:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1c64:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <derivate_counter_I+0x1>
    1c6e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <derivate_counter_I>
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	2f 91       	pop	r18
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <getTiempoInforme>:

volatile unsigned char Flag_Informo=0,Flag_PID=0,Flag_Button=0,Flag_leerDatos=0;
volatile uint32_t tiempoSEOS=0,tiempoInforme=0;

uint32_t getTiempoInforme(){
	return tiempoInforme;
    1c82:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <tiempoInforme>
    1c86:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <tiempoInforme+0x1>
    1c8a:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <tiempoInforme+0x2>
    1c8e:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <tiempoInforme+0x3>
}
    1c92:	08 95       	ret

00001c94 <getTiempoSEOS>:

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
    1c94:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <tiempoSEOS>
    1c98:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <tiempoSEOS+0x1>
    1c9c:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <tiempoSEOS+0x2>
    1ca0:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <tiempoSEOS+0x3>
}
    1ca4:	08 95       	ret

00001ca6 <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    1ca6:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <contPID>
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <contPID>
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	29 f4       	brne	.+10     	; 0x1cbe <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <Flag_PID>
		contPID=0;
    1cba:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    1cbe:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <contInformo>
    1cc2:	8f 5f       	subi	r24, 0xFF	; 255
    1cc4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <contInformo>
    1cc8:	84 31       	cpi	r24, 0x14	; 20
    1cca:	29 f4       	brne	.+10     	; 0x1cd6 <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <Flag_Informo>
		contInformo=0;
    1cd2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    1cd6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <contButtton>
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <contButtton>
    1ce0:	8a 30       	cpi	r24, 0x0A	; 10
    1ce2:	29 f4       	brne	.+10     	; 0x1cee <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <Flag_Button>
		contButtton=0;
    1cea:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    1cee:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <contLeerDatos>
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <contLeerDatos>
    1cf8:	88 32       	cpi	r24, 0x28	; 40
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <Flag_leerDatos>
		contLeerDatos=0;
    1d02:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <contLeerDatos>
    1d06:	08 95       	ret

00001d08 <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    1d08:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <Flag_PID>
    1d0c:	88 23       	and	r24, r24
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    1d10:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Actulizar_PID>
		Flag_PID = 0;
    1d14:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <Flag_PID>
	}
	if(Flag_Informo){
    1d18:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <Flag_Informo>
    1d1c:	88 23       	and	r24, r24
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    1d20:	0e 94 14 01 	call	0x228	; 0x228 <Informar_Actulizar>
		Flag_Informo = 0;
    1d24:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <Flag_Informo>
	}
	if(Flag_Button){
    1d28:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <Flag_Button>
    1d2c:	88 23       	and	r24, r24
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    1d30:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    1d34:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <Flag_Button>
	}
	if(Flag_leerDatos){
    1d38:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <Flag_leerDatos>
    1d3c:	88 23       	and	r24, r24
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    1d40:	0e 94 94 01 	call	0x328	; 0x328 <actulizar_leerDatos>
		Flag_leerDatos=0;
    1d44:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <Flag_leerDatos>
    1d48:	08 95       	ret

00001d4a <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    1d52:	9c e7       	ldi	r25, 0x7C	; 124
    1d54:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    1d56:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1d5a:	08 95       	ret

00001d5c <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	2f 93       	push	r18
    1d68:	3f 93       	push	r19
    1d6a:	4f 93       	push	r20
    1d6c:	5f 93       	push	r21
    1d6e:	6f 93       	push	r22
    1d70:	7f 93       	push	r23
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	af 93       	push	r26
    1d78:	bf 93       	push	r27
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    1d7e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <SEOS_SCH_Tasks>
	tiempoSEOS++;
    1d82:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <tiempoSEOS>
    1d86:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <tiempoSEOS+0x1>
    1d8a:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <tiempoSEOS+0x2>
    1d8e:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <tiempoSEOS+0x3>
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	a1 1d       	adc	r26, r1
    1d96:	b1 1d       	adc	r27, r1
    1d98:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <tiempoSEOS>
    1d9c:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <tiempoSEOS+0x1>
    1da0:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <tiempoSEOS+0x2>
    1da4:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    1da8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <contTiempo>
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	98 0f       	add	r25, r24
    1db0:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <contTiempo>
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	a8 f0       	brcs	.+42     	; 0x1de2 <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    1db8:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <tiempoInforme>
    1dbc:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <tiempoInforme+0x1>
    1dc0:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <tiempoInforme+0x2>
    1dc4:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <tiempoInforme+0x3>
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	a1 1d       	adc	r26, r1
    1dcc:	b1 1d       	adc	r27, r1
    1dce:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <tiempoInforme>
    1dd2:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <tiempoInforme+0x1>
    1dd6:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <tiempoInforme+0x2>
    1dda:	b0 93 47 03 	sts	0x0347, r27	; 0x800347 <tiempoInforme+0x3>
		contTiempo=0;
    1dde:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <contTiempo>
	}
}
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1e16:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1e1a:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <valor+0x1>
    1e1e:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <valor>
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <Inicializacion_slideResistor>:
    1e30:	87 b1       	in	r24, 0x07	; 7
    1e32:	8e 7f       	andi	r24, 0xFE	; 254
    1e34:	87 b9       	out	0x07, r24	; 7
    1e36:	88 b1       	in	r24, 0x08	; 8
    1e38:	8e 7f       	andi	r24, 0xFE	; 254
    1e3a:	88 b9       	out	0x08, r24	; 8
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    1e42:	ea e7       	ldi	r30, 0x7A	; 122
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8f ea       	ldi	r24, 0xAF	; 175
    1e48:	80 83       	st	Z, r24
    1e4a:	ac e7       	ldi	r26, 0x7C	; 124
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	8c 91       	ld	r24, X
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	8c 93       	st	X, r24
    1e54:	80 81       	ld	r24, Z
    1e56:	80 64       	ori	r24, 0x40	; 64
    1e58:	80 83       	st	Z, r24
    1e5a:	08 95       	ret

00001e5c <getSlideResistor>:

uint16_t getSlideResistor(){
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    1e60:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <i>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	96 39       	cpi	r25, 0x96	; 150
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <getSlideResistor+0x10>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	2a e6       	ldi	r18, 0x6A	; 106
    1e6e:	82 9f       	mul	r24, r18
    1e70:	90 0d       	add	r25, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <i>
	i = (i+1)%CANT;
    1e78:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <i>
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	6f e0       	ldi	r22, 0x0F	; 15
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1e88:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <i>
	valores[i]=valor;
    1e8c:	c0 91 52 03 	lds	r28, 0x0352	; 0x800352 <i>
    1e90:	d0 e0       	ldi	r29, 0x00	; 0
    1e92:	cc 0f       	add	r28, r28
    1e94:	dd 1f       	adc	r29, r29
    1e96:	cc 0f       	add	r28, r28
    1e98:	dd 1f       	adc	r29, r29
    1e9a:	c9 5a       	subi	r28, 0xA9	; 169
    1e9c:	dc 4f       	sbci	r29, 0xFC	; 252
    1e9e:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <valor>
    1ea2:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <valor+0x1>
    1ea6:	07 2e       	mov	r0, r23
    1ea8:	00 0c       	add	r0, r0
    1eaa:	88 0b       	sbc	r24, r24
    1eac:	99 0b       	sbc	r25, r25
    1eae:	0e 94 be 11 	call	0x237c	; 0x237c <__floatsisf>
    1eb2:	68 83       	st	Y, r22
    1eb4:	79 83       	std	Y+1, r23	; 0x01
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
    1eb8:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    1eba:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <total>
    1ebe:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <total+0x1>
    1ec2:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <total+0x2>
    1ec6:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <total+0x3>
	for(k=0;k<CANT;k++){
    1eca:	c0 e0       	ldi	r28, 0x00	; 0
    1ecc:	28 c0       	rjmp	.+80     	; 0x1f1e <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    1ece:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <i>
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0f 96       	adiw	r24, 0x0f	; 15
    1ed6:	8c 1b       	sub	r24, r28
    1ed8:	91 09       	sbc	r25, r1
    1eda:	6f e0       	ldi	r22, 0x0F	; 15
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e9 5a       	subi	r30, 0xA9	; 169
    1eee:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <total>
    1efc:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <total+0x1>
    1f00:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <total+0x2>
    1f04:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <total+0x3>
    1f08:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1f0c:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <total>
    1f10:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <total+0x1>
    1f14:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <total+0x2>
    1f18:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    1f1c:	cf 5f       	subi	r28, 0xFF	; 255
    1f1e:	cf 30       	cpi	r28, 0x0F	; 15
    1f20:	b0 f2       	brcs	.-84     	; 0x1ece <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e7       	ldi	r20, 0x70	; 112
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <total>
    1f2e:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <total+0x1>
    1f32:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <total+0x2>
    1f36:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <total+0x3>
    1f3a:	0e 94 14 11 	call	0x2228	; 0x2228 <__divsf3>
    1f3e:	0e 94 8d 11 	call	0x231a	; 0x231a <__fixunssfsi>
    1f42:	cb 01       	movw	r24, r22
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    1f4a:	86 e0       	ldi	r24, 0x06	; 6
    1f4c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1f56:	e1 ec       	ldi	r30, 0xC1	; 193
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	80 61       	ori	r24, 0x10	; 16
    1f5e:	80 83       	st	Z, r24
    1f60:	80 81       	ld	r24, Z
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	80 83       	st	Z, r24
    1f66:	80 81       	ld	r24, Z
    1f68:	88 60       	ori	r24, 0x08	; 8
    1f6a:	80 83       	st	Z, r24
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 62       	ori	r24, 0x20	; 32
    1f70:	80 83       	st	Z, r24
    1f72:	e0 ec       	ldi	r30, 0xC0	; 192
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 62       	ori	r24, 0x20	; 32
    1f7a:	80 83       	st	Z, r24
    1f7c:	08 95       	ret

00001f7e <getEspacioDisponibleBuffer>:
    1f7e:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <tx_buffer_write>
    1f82:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <tx_buffer_read>
    1f86:	98 17       	cp	r25, r24
    1f88:	18 f0       	brcs	.+6      	; 0x1f90 <getEspacioDisponibleBuffer+0x12>
    1f8a:	89 1b       	sub	r24, r25
    1f8c:	8a 51       	subi	r24, 0x1A	; 26
    1f8e:	08 95       	ret
    1f90:	89 1b       	sub	r24, r25
    1f92:	08 95       	ret

00001f94 <UART_TransmitChar>:
    1f94:	48 2f       	mov	r20, r24
    1f96:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <tx_buffer_write>
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	66 ee       	ldi	r22, 0xE6	; 230
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    1fa8:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <tx_buffer_read>
    1fac:	98 17       	cp	r25, r24
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <UART_TransmitChar+0x32>
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	e2 50       	subi	r30, 0x02	; 2
    1fb4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb6:	40 83       	st	Z, r20
    1fb8:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <tx_buffer_write>
    1fbc:	e1 ec       	ldi	r30, 0xC1	; 193
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 62       	ori	r24, 0x20	; 32
    1fc4:	80 83       	st	Z, r24
    1fc6:	08 95       	ret

00001fc8 <UART_TransmitString>:
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	16 2f       	mov	r17, r22
    1fd2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <getEspacioDisponibleBuffer>
    1fd6:	18 17       	cp	r17, r24
    1fd8:	20 f0       	brcs	.+8      	; 0x1fe2 <UART_TransmitString+0x1a>
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <UART_TransmitString+0x20>
    1fdc:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <UART_TransmitChar>
    1fe0:	21 96       	adiw	r28, 0x01	; 1
    1fe2:	88 81       	ld	r24, Y
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	fa cf       	rjmp	.-12     	; 0x1fdc <UART_TransmitString+0x14>
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	08 95       	ret

00001ff0 <__vector_19>:
    1ff0:	1f 92       	push	r1
    1ff2:	0f 92       	push	r0
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	0f 92       	push	r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	5f 93       	push	r21
    1ffc:	6f 93       	push	r22
    1ffe:	7f 93       	push	r23
    2000:	8f 93       	push	r24
    2002:	9f 93       	push	r25
    2004:	af 93       	push	r26
    2006:	bf 93       	push	r27
    2008:	ef 93       	push	r30
    200a:	ff 93       	push	r31
    200c:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <tx_buffer_read>
    2010:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <tx_buffer_write>
    2014:	e8 17       	cp	r30, r24
    2016:	89 f0       	breq	.+34     	; 0x203a <__vector_19+0x4a>
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	e2 50       	subi	r30, 0x02	; 2
    201c:	fc 4f       	sbci	r31, 0xFC	; 252
    201e:	80 81       	ld	r24, Z
    2020:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2024:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <tx_buffer_read>
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	66 ee       	ldi	r22, 0xE6	; 230
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    2034:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <tx_buffer_read>
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <__vector_19+0x54>
    203a:	e1 ec       	ldi	r30, 0xC1	; 193
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 7d       	andi	r24, 0xDF	; 223
    2042:	80 83       	st	Z, r24
    2044:	ff 91       	pop	r31
    2046:	ef 91       	pop	r30
    2048:	bf 91       	pop	r27
    204a:	af 91       	pop	r26
    204c:	9f 91       	pop	r25
    204e:	8f 91       	pop	r24
    2050:	7f 91       	pop	r23
    2052:	6f 91       	pop	r22
    2054:	5f 91       	pop	r21
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	0f 90       	pop	r0
    205c:	1f 90       	pop	r1
    205e:	18 95       	reti

00002060 <SacarDatosBufferEnter>:
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	ec 01       	movw	r28, r24
    2066:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <recibioEnter>
    206a:	88 23       	and	r24, r24
    206c:	21 f1       	breq	.+72     	; 0x20b6 <SacarDatosBufferEnter+0x56>
    206e:	f8 94       	cli
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	11 c0       	rjmp	.+34     	; 0x2096 <SacarDatosBufferEnter+0x36>
    2074:	fe 01       	movw	r30, r28
    2076:	e2 0f       	add	r30, r18
    2078:	f1 1d       	adc	r31, r1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	dc 01       	movw	r26, r24
    207e:	a8 56       	subi	r26, 0x68	; 104
    2080:	bc 4f       	sbci	r27, 0xFC	; 252
    2082:	3c 91       	ld	r19, X
    2084:	30 83       	st	Z, r19
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	64 e6       	ldi	r22, 0x64	; 100
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    2090:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rx_buffer_read>
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <rx_buffer_write>
    209a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <rx_buffer_read>
    209e:	98 17       	cp	r25, r24
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <SacarDatosBufferEnter+0x46>
    20a2:	23 36       	cpi	r18, 0x63	; 99
    20a4:	38 f3       	brcs	.-50     	; 0x2074 <SacarDatosBufferEnter+0x14>
    20a6:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <recibioEnter>
    20aa:	78 94       	sei
    20ac:	c2 0f       	add	r28, r18
    20ae:	d1 1d       	adc	r29, r1
    20b0:	18 82       	st	Y, r1
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <SacarDatosBufferEnter+0x58>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <__vector_18>:

ISR(USART_RX_vect){
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	2f 93       	push	r18
    20ca:	3f 93       	push	r19
    20cc:	5f 93       	push	r21
    20ce:	6f 93       	push	r22
    20d0:	7f 93       	push	r23
    20d2:	8f 93       	push	r24
    20d4:	9f 93       	push	r25
    20d6:	af 93       	push	r26
    20d8:	bf 93       	push	r27
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    20de:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rx_buffer_write>
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	64 e6       	ldi	r22, 0x64	; 100
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
	uint8_t receivedChar = UDR0;
    20ee:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    20f2:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <rx_buffer_read>
    20f6:	28 17       	cp	r18, r24
    20f8:	a9 f0       	breq	.+42     	; 0x2124 <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    20fa:	9a 30       	cpi	r25, 0x0A	; 10
    20fc:	11 f0       	breq	.+4      	; 0x2102 <__vector_18+0x44>
    20fe:	9d 30       	cpi	r25, 0x0D	; 13
    2100:	21 f4       	brne	.+8      	; 0x210a <__vector_18+0x4c>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <recibioEnter>
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    210a:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <recibioEnter>
    210e:	31 11       	cpse	r19, r1
    2110:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    2114:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <rx_buffer_write>
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	e8 56       	subi	r30, 0x68	; 104
    211c:	fc 4f       	sbci	r31, 0xFC	; 252
    211e:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    2120:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rx_buffer_write>
		}
	}
}
    2124:	ff 91       	pop	r31
    2126:	ef 91       	pop	r30
    2128:	bf 91       	pop	r27
    212a:	af 91       	pop	r26
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	7f 91       	pop	r23
    2132:	6f 91       	pop	r22
    2134:	5f 91       	pop	r21
    2136:	3f 91       	pop	r19
    2138:	2f 91       	pop	r18
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	0f 90       	pop	r0
    2140:	1f 90       	pop	r1
    2142:	18 95       	reti

00002144 <__subsf3>:
    2144:	50 58       	subi	r21, 0x80	; 128

00002146 <__addsf3>:
    2146:	bb 27       	eor	r27, r27
    2148:	aa 27       	eor	r26, r26
    214a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__addsf3x>
    214e:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_round>
    2152:	0e 94 26 12 	call	0x244c	; 0x244c <__fp_pscA>
    2156:	38 f0       	brcs	.+14     	; 0x2166 <__addsf3+0x20>
    2158:	0e 94 2d 12 	call	0x245a	; 0x245a <__fp_pscB>
    215c:	20 f0       	brcs	.+8      	; 0x2166 <__addsf3+0x20>
    215e:	39 f4       	brne	.+14     	; 0x216e <__addsf3+0x28>
    2160:	9f 3f       	cpi	r25, 0xFF	; 255
    2162:	19 f4       	brne	.+6      	; 0x216a <__addsf3+0x24>
    2164:	26 f4       	brtc	.+8      	; 0x216e <__addsf3+0x28>
    2166:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_nan>
    216a:	0e f4       	brtc	.+2      	; 0x216e <__addsf3+0x28>
    216c:	e0 95       	com	r30
    216e:	e7 fb       	bst	r30, 7
    2170:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__fp_inf>

00002174 <__addsf3x>:
    2174:	e9 2f       	mov	r30, r25
    2176:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_split3>
    217a:	58 f3       	brcs	.-42     	; 0x2152 <__addsf3+0xc>
    217c:	ba 17       	cp	r27, r26
    217e:	62 07       	cpc	r22, r18
    2180:	73 07       	cpc	r23, r19
    2182:	84 07       	cpc	r24, r20
    2184:	95 07       	cpc	r25, r21
    2186:	20 f0       	brcs	.+8      	; 0x2190 <__addsf3x+0x1c>
    2188:	79 f4       	brne	.+30     	; 0x21a8 <__addsf3x+0x34>
    218a:	a6 f5       	brtc	.+104    	; 0x21f4 <__addsf3x+0x80>
    218c:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_zero>
    2190:	0e f4       	brtc	.+2      	; 0x2194 <__addsf3x+0x20>
    2192:	e0 95       	com	r30
    2194:	0b 2e       	mov	r0, r27
    2196:	ba 2f       	mov	r27, r26
    2198:	a0 2d       	mov	r26, r0
    219a:	0b 01       	movw	r0, r22
    219c:	b9 01       	movw	r22, r18
    219e:	90 01       	movw	r18, r0
    21a0:	0c 01       	movw	r0, r24
    21a2:	ca 01       	movw	r24, r20
    21a4:	a0 01       	movw	r20, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	ff 27       	eor	r31, r31
    21aa:	59 1b       	sub	r21, r25
    21ac:	99 f0       	breq	.+38     	; 0x21d4 <__addsf3x+0x60>
    21ae:	59 3f       	cpi	r21, 0xF9	; 249
    21b0:	50 f4       	brcc	.+20     	; 0x21c6 <__addsf3x+0x52>
    21b2:	50 3e       	cpi	r21, 0xE0	; 224
    21b4:	68 f1       	brcs	.+90     	; 0x2210 <__addsf3x+0x9c>
    21b6:	1a 16       	cp	r1, r26
    21b8:	f0 40       	sbci	r31, 0x00	; 0
    21ba:	a2 2f       	mov	r26, r18
    21bc:	23 2f       	mov	r18, r19
    21be:	34 2f       	mov	r19, r20
    21c0:	44 27       	eor	r20, r20
    21c2:	58 5f       	subi	r21, 0xF8	; 248
    21c4:	f3 cf       	rjmp	.-26     	; 0x21ac <__addsf3x+0x38>
    21c6:	46 95       	lsr	r20
    21c8:	37 95       	ror	r19
    21ca:	27 95       	ror	r18
    21cc:	a7 95       	ror	r26
    21ce:	f0 40       	sbci	r31, 0x00	; 0
    21d0:	53 95       	inc	r21
    21d2:	c9 f7       	brne	.-14     	; 0x21c6 <__addsf3x+0x52>
    21d4:	7e f4       	brtc	.+30     	; 0x21f4 <__addsf3x+0x80>
    21d6:	1f 16       	cp	r1, r31
    21d8:	ba 0b       	sbc	r27, r26
    21da:	62 0b       	sbc	r22, r18
    21dc:	73 0b       	sbc	r23, r19
    21de:	84 0b       	sbc	r24, r20
    21e0:	ba f0       	brmi	.+46     	; 0x2210 <__addsf3x+0x9c>
    21e2:	91 50       	subi	r25, 0x01	; 1
    21e4:	a1 f0       	breq	.+40     	; 0x220e <__addsf3x+0x9a>
    21e6:	ff 0f       	add	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	c2 f7       	brpl	.-16     	; 0x21e2 <__addsf3x+0x6e>
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <__addsf3x+0x9c>
    21f4:	ba 0f       	add	r27, r26
    21f6:	62 1f       	adc	r22, r18
    21f8:	73 1f       	adc	r23, r19
    21fa:	84 1f       	adc	r24, r20
    21fc:	48 f4       	brcc	.+18     	; 0x2210 <__addsf3x+0x9c>
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	b7 95       	ror	r27
    2206:	f7 95       	ror	r31
    2208:	9e 3f       	cpi	r25, 0xFE	; 254
    220a:	08 f0       	brcs	.+2      	; 0x220e <__addsf3x+0x9a>
    220c:	b0 cf       	rjmp	.-160    	; 0x216e <__addsf3+0x28>
    220e:	93 95       	inc	r25
    2210:	88 0f       	add	r24, r24
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__addsf3x+0xa2>
    2214:	99 27       	eor	r25, r25
    2216:	ee 0f       	add	r30, r30
    2218:	97 95       	ror	r25
    221a:	87 95       	ror	r24
    221c:	08 95       	ret

0000221e <__cmpsf2>:
    221e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fp_cmp>
    2222:	08 f4       	brcc	.+2      	; 0x2226 <__cmpsf2+0x8>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	08 95       	ret

00002228 <__divsf3>:
    2228:	0e 94 28 11 	call	0x2250	; 0x2250 <__divsf3x>
    222c:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_round>
    2230:	0e 94 2d 12 	call	0x245a	; 0x245a <__fp_pscB>
    2234:	58 f0       	brcs	.+22     	; 0x224c <__divsf3+0x24>
    2236:	0e 94 26 12 	call	0x244c	; 0x244c <__fp_pscA>
    223a:	40 f0       	brcs	.+16     	; 0x224c <__divsf3+0x24>
    223c:	29 f4       	brne	.+10     	; 0x2248 <__divsf3+0x20>
    223e:	5f 3f       	cpi	r21, 0xFF	; 255
    2240:	29 f0       	breq	.+10     	; 0x224c <__divsf3+0x24>
    2242:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__fp_inf>
    2246:	51 11       	cpse	r21, r1
    2248:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__fp_szero>
    224c:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_nan>

00002250 <__divsf3x>:
    2250:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_split3>
    2254:	68 f3       	brcs	.-38     	; 0x2230 <__divsf3+0x8>

00002256 <__divsf3_pse>:
    2256:	99 23       	and	r25, r25
    2258:	b1 f3       	breq	.-20     	; 0x2246 <__divsf3+0x1e>
    225a:	55 23       	and	r21, r21
    225c:	91 f3       	breq	.-28     	; 0x2242 <__divsf3+0x1a>
    225e:	95 1b       	sub	r25, r21
    2260:	55 0b       	sbc	r21, r21
    2262:	bb 27       	eor	r27, r27
    2264:	aa 27       	eor	r26, r26
    2266:	62 17       	cp	r22, r18
    2268:	73 07       	cpc	r23, r19
    226a:	84 07       	cpc	r24, r20
    226c:	38 f0       	brcs	.+14     	; 0x227c <__divsf3_pse+0x26>
    226e:	9f 5f       	subi	r25, 0xFF	; 255
    2270:	5f 4f       	sbci	r21, 0xFF	; 255
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	44 1f       	adc	r20, r20
    2278:	aa 1f       	adc	r26, r26
    227a:	a9 f3       	breq	.-22     	; 0x2266 <__divsf3_pse+0x10>
    227c:	35 d0       	rcall	.+106    	; 0x22e8 <__divsf3_pse+0x92>
    227e:	0e 2e       	mov	r0, r30
    2280:	3a f0       	brmi	.+14     	; 0x2290 <__divsf3_pse+0x3a>
    2282:	e0 e8       	ldi	r30, 0x80	; 128
    2284:	32 d0       	rcall	.+100    	; 0x22ea <__divsf3_pse+0x94>
    2286:	91 50       	subi	r25, 0x01	; 1
    2288:	50 40       	sbci	r21, 0x00	; 0
    228a:	e6 95       	lsr	r30
    228c:	00 1c       	adc	r0, r0
    228e:	ca f7       	brpl	.-14     	; 0x2282 <__divsf3_pse+0x2c>
    2290:	2b d0       	rcall	.+86     	; 0x22e8 <__divsf3_pse+0x92>
    2292:	fe 2f       	mov	r31, r30
    2294:	29 d0       	rcall	.+82     	; 0x22e8 <__divsf3_pse+0x92>
    2296:	66 0f       	add	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	bb 1f       	adc	r27, r27
    229e:	26 17       	cp	r18, r22
    22a0:	37 07       	cpc	r19, r23
    22a2:	48 07       	cpc	r20, r24
    22a4:	ab 07       	cpc	r26, r27
    22a6:	b0 e8       	ldi	r27, 0x80	; 128
    22a8:	09 f0       	breq	.+2      	; 0x22ac <__divsf3_pse+0x56>
    22aa:	bb 0b       	sbc	r27, r27
    22ac:	80 2d       	mov	r24, r0
    22ae:	bf 01       	movw	r22, r30
    22b0:	ff 27       	eor	r31, r31
    22b2:	93 58       	subi	r25, 0x83	; 131
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	3a f0       	brmi	.+14     	; 0x22c6 <__divsf3_pse+0x70>
    22b8:	9e 3f       	cpi	r25, 0xFE	; 254
    22ba:	51 05       	cpc	r21, r1
    22bc:	78 f0       	brcs	.+30     	; 0x22dc <__divsf3_pse+0x86>
    22be:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__fp_inf>
    22c2:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__fp_szero>
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	e4 f3       	brlt	.-8      	; 0x22c2 <__divsf3_pse+0x6c>
    22ca:	98 3e       	cpi	r25, 0xE8	; 232
    22cc:	d4 f3       	brlt	.-12     	; 0x22c2 <__divsf3_pse+0x6c>
    22ce:	86 95       	lsr	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	b7 95       	ror	r27
    22d6:	f7 95       	ror	r31
    22d8:	9f 5f       	subi	r25, 0xFF	; 255
    22da:	c9 f7       	brne	.-14     	; 0x22ce <__divsf3_pse+0x78>
    22dc:	88 0f       	add	r24, r24
    22de:	91 1d       	adc	r25, r1
    22e0:	96 95       	lsr	r25
    22e2:	87 95       	ror	r24
    22e4:	97 f9       	bld	r25, 7
    22e6:	08 95       	ret
    22e8:	e1 e0       	ldi	r30, 0x01	; 1
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	88 1f       	adc	r24, r24
    22f0:	bb 1f       	adc	r27, r27
    22f2:	62 17       	cp	r22, r18
    22f4:	73 07       	cpc	r23, r19
    22f6:	84 07       	cpc	r24, r20
    22f8:	ba 07       	cpc	r27, r26
    22fa:	20 f0       	brcs	.+8      	; 0x2304 <__divsf3_pse+0xae>
    22fc:	62 1b       	sub	r22, r18
    22fe:	73 0b       	sbc	r23, r19
    2300:	84 0b       	sbc	r24, r20
    2302:	ba 0b       	sbc	r27, r26
    2304:	ee 1f       	adc	r30, r30
    2306:	88 f7       	brcc	.-30     	; 0x22ea <__divsf3_pse+0x94>
    2308:	e0 95       	com	r30
    230a:	08 95       	ret

0000230c <__fixsfsi>:
    230c:	0e 94 8d 11 	call	0x231a	; 0x231a <__fixunssfsi>
    2310:	68 94       	set
    2312:	b1 11       	cpse	r27, r1
    2314:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__fp_szero>
    2318:	08 95       	ret

0000231a <__fixunssfsi>:
    231a:	0e 94 4d 12 	call	0x249a	; 0x249a <__fp_splitA>
    231e:	88 f0       	brcs	.+34     	; 0x2342 <__fixunssfsi+0x28>
    2320:	9f 57       	subi	r25, 0x7F	; 127
    2322:	98 f0       	brcs	.+38     	; 0x234a <__fixunssfsi+0x30>
    2324:	b9 2f       	mov	r27, r25
    2326:	99 27       	eor	r25, r25
    2328:	b7 51       	subi	r27, 0x17	; 23
    232a:	b0 f0       	brcs	.+44     	; 0x2358 <__fixunssfsi+0x3e>
    232c:	e1 f0       	breq	.+56     	; 0x2366 <__fixunssfsi+0x4c>
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	1a f0       	brmi	.+6      	; 0x233e <__fixunssfsi+0x24>
    2338:	ba 95       	dec	r27
    233a:	c9 f7       	brne	.-14     	; 0x232e <__fixunssfsi+0x14>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <__fixunssfsi+0x4c>
    233e:	b1 30       	cpi	r27, 0x01	; 1
    2340:	91 f0       	breq	.+36     	; 0x2366 <__fixunssfsi+0x4c>
    2342:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fp_zero>
    2346:	b1 e0       	ldi	r27, 0x01	; 1
    2348:	08 95       	ret
    234a:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_zero>
    234e:	67 2f       	mov	r22, r23
    2350:	78 2f       	mov	r23, r24
    2352:	88 27       	eor	r24, r24
    2354:	b8 5f       	subi	r27, 0xF8	; 248
    2356:	39 f0       	breq	.+14     	; 0x2366 <__fixunssfsi+0x4c>
    2358:	b9 3f       	cpi	r27, 0xF9	; 249
    235a:	cc f3       	brlt	.-14     	; 0x234e <__fixunssfsi+0x34>
    235c:	86 95       	lsr	r24
    235e:	77 95       	ror	r23
    2360:	67 95       	ror	r22
    2362:	b3 95       	inc	r27
    2364:	d9 f7       	brne	.-10     	; 0x235c <__fixunssfsi+0x42>
    2366:	3e f4       	brtc	.+14     	; 0x2376 <__fixunssfsi+0x5c>
    2368:	90 95       	com	r25
    236a:	80 95       	com	r24
    236c:	70 95       	com	r23
    236e:	61 95       	neg	r22
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	8f 4f       	sbci	r24, 0xFF	; 255
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	08 95       	ret

00002378 <__floatunsisf>:
    2378:	e8 94       	clt
    237a:	09 c0       	rjmp	.+18     	; 0x238e <__floatsisf+0x12>

0000237c <__floatsisf>:
    237c:	97 fb       	bst	r25, 7
    237e:	3e f4       	brtc	.+14     	; 0x238e <__floatsisf+0x12>
    2380:	90 95       	com	r25
    2382:	80 95       	com	r24
    2384:	70 95       	com	r23
    2386:	61 95       	neg	r22
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	8f 4f       	sbci	r24, 0xFF	; 255
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	99 23       	and	r25, r25
    2390:	a9 f0       	breq	.+42     	; 0x23bc <__floatsisf+0x40>
    2392:	f9 2f       	mov	r31, r25
    2394:	96 e9       	ldi	r25, 0x96	; 150
    2396:	bb 27       	eor	r27, r27
    2398:	93 95       	inc	r25
    239a:	f6 95       	lsr	r31
    239c:	87 95       	ror	r24
    239e:	77 95       	ror	r23
    23a0:	67 95       	ror	r22
    23a2:	b7 95       	ror	r27
    23a4:	f1 11       	cpse	r31, r1
    23a6:	f8 cf       	rjmp	.-16     	; 0x2398 <__floatsisf+0x1c>
    23a8:	fa f4       	brpl	.+62     	; 0x23e8 <__floatsisf+0x6c>
    23aa:	bb 0f       	add	r27, r27
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <__floatsisf+0x36>
    23ae:	60 ff       	sbrs	r22, 0
    23b0:	1b c0       	rjmp	.+54     	; 0x23e8 <__floatsisf+0x6c>
    23b2:	6f 5f       	subi	r22, 0xFF	; 255
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	8f 4f       	sbci	r24, 0xFF	; 255
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	16 c0       	rjmp	.+44     	; 0x23e8 <__floatsisf+0x6c>
    23bc:	88 23       	and	r24, r24
    23be:	11 f0       	breq	.+4      	; 0x23c4 <__floatsisf+0x48>
    23c0:	96 e9       	ldi	r25, 0x96	; 150
    23c2:	11 c0       	rjmp	.+34     	; 0x23e6 <__floatsisf+0x6a>
    23c4:	77 23       	and	r23, r23
    23c6:	21 f0       	breq	.+8      	; 0x23d0 <__floatsisf+0x54>
    23c8:	9e e8       	ldi	r25, 0x8E	; 142
    23ca:	87 2f       	mov	r24, r23
    23cc:	76 2f       	mov	r23, r22
    23ce:	05 c0       	rjmp	.+10     	; 0x23da <__floatsisf+0x5e>
    23d0:	66 23       	and	r22, r22
    23d2:	71 f0       	breq	.+28     	; 0x23f0 <__floatsisf+0x74>
    23d4:	96 e8       	ldi	r25, 0x86	; 134
    23d6:	86 2f       	mov	r24, r22
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	2a f0       	brmi	.+10     	; 0x23e8 <__floatsisf+0x6c>
    23de:	9a 95       	dec	r25
    23e0:	66 0f       	add	r22, r22
    23e2:	77 1f       	adc	r23, r23
    23e4:	88 1f       	adc	r24, r24
    23e6:	da f7       	brpl	.-10     	; 0x23de <__floatsisf+0x62>
    23e8:	88 0f       	add	r24, r24
    23ea:	96 95       	lsr	r25
    23ec:	87 95       	ror	r24
    23ee:	97 f9       	bld	r25, 7
    23f0:	08 95       	ret

000023f2 <__fp_cmp>:
    23f2:	99 0f       	add	r25, r25
    23f4:	00 08       	sbc	r0, r0
    23f6:	55 0f       	add	r21, r21
    23f8:	aa 0b       	sbc	r26, r26
    23fa:	e0 e8       	ldi	r30, 0x80	; 128
    23fc:	fe ef       	ldi	r31, 0xFE	; 254
    23fe:	16 16       	cp	r1, r22
    2400:	17 06       	cpc	r1, r23
    2402:	e8 07       	cpc	r30, r24
    2404:	f9 07       	cpc	r31, r25
    2406:	c0 f0       	brcs	.+48     	; 0x2438 <__fp_cmp+0x46>
    2408:	12 16       	cp	r1, r18
    240a:	13 06       	cpc	r1, r19
    240c:	e4 07       	cpc	r30, r20
    240e:	f5 07       	cpc	r31, r21
    2410:	98 f0       	brcs	.+38     	; 0x2438 <__fp_cmp+0x46>
    2412:	62 1b       	sub	r22, r18
    2414:	73 0b       	sbc	r23, r19
    2416:	84 0b       	sbc	r24, r20
    2418:	95 0b       	sbc	r25, r21
    241a:	39 f4       	brne	.+14     	; 0x242a <__fp_cmp+0x38>
    241c:	0a 26       	eor	r0, r26
    241e:	61 f0       	breq	.+24     	; 0x2438 <__fp_cmp+0x46>
    2420:	23 2b       	or	r18, r19
    2422:	24 2b       	or	r18, r20
    2424:	25 2b       	or	r18, r21
    2426:	21 f4       	brne	.+8      	; 0x2430 <__fp_cmp+0x3e>
    2428:	08 95       	ret
    242a:	0a 26       	eor	r0, r26
    242c:	09 f4       	brne	.+2      	; 0x2430 <__fp_cmp+0x3e>
    242e:	a1 40       	sbci	r26, 0x01	; 1
    2430:	a6 95       	lsr	r26
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	81 1d       	adc	r24, r1
    2436:	81 1d       	adc	r24, r1
    2438:	08 95       	ret

0000243a <__fp_inf>:
    243a:	97 f9       	bld	r25, 7
    243c:	9f 67       	ori	r25, 0x7F	; 127
    243e:	80 e8       	ldi	r24, 0x80	; 128
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	08 95       	ret

00002446 <__fp_nan>:
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	80 ec       	ldi	r24, 0xC0	; 192
    244a:	08 95       	ret

0000244c <__fp_pscA>:
    244c:	00 24       	eor	r0, r0
    244e:	0a 94       	dec	r0
    2450:	16 16       	cp	r1, r22
    2452:	17 06       	cpc	r1, r23
    2454:	18 06       	cpc	r1, r24
    2456:	09 06       	cpc	r0, r25
    2458:	08 95       	ret

0000245a <__fp_pscB>:
    245a:	00 24       	eor	r0, r0
    245c:	0a 94       	dec	r0
    245e:	12 16       	cp	r1, r18
    2460:	13 06       	cpc	r1, r19
    2462:	14 06       	cpc	r1, r20
    2464:	05 06       	cpc	r0, r21
    2466:	08 95       	ret

00002468 <__fp_round>:
    2468:	09 2e       	mov	r0, r25
    246a:	03 94       	inc	r0
    246c:	00 0c       	add	r0, r0
    246e:	11 f4       	brne	.+4      	; 0x2474 <__fp_round+0xc>
    2470:	88 23       	and	r24, r24
    2472:	52 f0       	brmi	.+20     	; 0x2488 <__fp_round+0x20>
    2474:	bb 0f       	add	r27, r27
    2476:	40 f4       	brcc	.+16     	; 0x2488 <__fp_round+0x20>
    2478:	bf 2b       	or	r27, r31
    247a:	11 f4       	brne	.+4      	; 0x2480 <__fp_round+0x18>
    247c:	60 ff       	sbrs	r22, 0
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <__fp_round+0x20>
    2480:	6f 5f       	subi	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	08 95       	ret

0000248a <__fp_split3>:
    248a:	57 fd       	sbrc	r21, 7
    248c:	90 58       	subi	r25, 0x80	; 128
    248e:	44 0f       	add	r20, r20
    2490:	55 1f       	adc	r21, r21
    2492:	59 f0       	breq	.+22     	; 0x24aa <__fp_splitA+0x10>
    2494:	5f 3f       	cpi	r21, 0xFF	; 255
    2496:	71 f0       	breq	.+28     	; 0x24b4 <__fp_splitA+0x1a>
    2498:	47 95       	ror	r20

0000249a <__fp_splitA>:
    249a:	88 0f       	add	r24, r24
    249c:	97 fb       	bst	r25, 7
    249e:	99 1f       	adc	r25, r25
    24a0:	61 f0       	breq	.+24     	; 0x24ba <__fp_splitA+0x20>
    24a2:	9f 3f       	cpi	r25, 0xFF	; 255
    24a4:	79 f0       	breq	.+30     	; 0x24c4 <__fp_splitA+0x2a>
    24a6:	87 95       	ror	r24
    24a8:	08 95       	ret
    24aa:	12 16       	cp	r1, r18
    24ac:	13 06       	cpc	r1, r19
    24ae:	14 06       	cpc	r1, r20
    24b0:	55 1f       	adc	r21, r21
    24b2:	f2 cf       	rjmp	.-28     	; 0x2498 <__fp_split3+0xe>
    24b4:	46 95       	lsr	r20
    24b6:	f1 df       	rcall	.-30     	; 0x249a <__fp_splitA>
    24b8:	08 c0       	rjmp	.+16     	; 0x24ca <__fp_splitA+0x30>
    24ba:	16 16       	cp	r1, r22
    24bc:	17 06       	cpc	r1, r23
    24be:	18 06       	cpc	r1, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	f1 cf       	rjmp	.-30     	; 0x24a6 <__fp_splitA+0xc>
    24c4:	86 95       	lsr	r24
    24c6:	71 05       	cpc	r23, r1
    24c8:	61 05       	cpc	r22, r1
    24ca:	08 94       	sec
    24cc:	08 95       	ret

000024ce <__fp_zero>:
    24ce:	e8 94       	clt

000024d0 <__fp_szero>:
    24d0:	bb 27       	eor	r27, r27
    24d2:	66 27       	eor	r22, r22
    24d4:	77 27       	eor	r23, r23
    24d6:	cb 01       	movw	r24, r22
    24d8:	97 f9       	bld	r25, 7
    24da:	08 95       	ret

000024dc <__gesf2>:
    24dc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fp_cmp>
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <__gesf2+0x8>
    24e2:	8f ef       	ldi	r24, 0xFF	; 255
    24e4:	08 95       	ret

000024e6 <__mulsf3>:
    24e6:	0e 94 86 12 	call	0x250c	; 0x250c <__mulsf3x>
    24ea:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_round>
    24ee:	0e 94 26 12 	call	0x244c	; 0x244c <__fp_pscA>
    24f2:	38 f0       	brcs	.+14     	; 0x2502 <__mulsf3+0x1c>
    24f4:	0e 94 2d 12 	call	0x245a	; 0x245a <__fp_pscB>
    24f8:	20 f0       	brcs	.+8      	; 0x2502 <__mulsf3+0x1c>
    24fa:	95 23       	and	r25, r21
    24fc:	11 f0       	breq	.+4      	; 0x2502 <__mulsf3+0x1c>
    24fe:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__fp_inf>
    2502:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_nan>
    2506:	11 24       	eor	r1, r1
    2508:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__fp_szero>

0000250c <__mulsf3x>:
    250c:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_split3>
    2510:	70 f3       	brcs	.-36     	; 0x24ee <__mulsf3+0x8>

00002512 <__mulsf3_pse>:
    2512:	95 9f       	mul	r25, r21
    2514:	c1 f3       	breq	.-16     	; 0x2506 <__mulsf3+0x20>
    2516:	95 0f       	add	r25, r21
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	55 1f       	adc	r21, r21
    251c:	62 9f       	mul	r22, r18
    251e:	f0 01       	movw	r30, r0
    2520:	72 9f       	mul	r23, r18
    2522:	bb 27       	eor	r27, r27
    2524:	f0 0d       	add	r31, r0
    2526:	b1 1d       	adc	r27, r1
    2528:	63 9f       	mul	r22, r19
    252a:	aa 27       	eor	r26, r26
    252c:	f0 0d       	add	r31, r0
    252e:	b1 1d       	adc	r27, r1
    2530:	aa 1f       	adc	r26, r26
    2532:	64 9f       	mul	r22, r20
    2534:	66 27       	eor	r22, r22
    2536:	b0 0d       	add	r27, r0
    2538:	a1 1d       	adc	r26, r1
    253a:	66 1f       	adc	r22, r22
    253c:	82 9f       	mul	r24, r18
    253e:	22 27       	eor	r18, r18
    2540:	b0 0d       	add	r27, r0
    2542:	a1 1d       	adc	r26, r1
    2544:	62 1f       	adc	r22, r18
    2546:	73 9f       	mul	r23, r19
    2548:	b0 0d       	add	r27, r0
    254a:	a1 1d       	adc	r26, r1
    254c:	62 1f       	adc	r22, r18
    254e:	83 9f       	mul	r24, r19
    2550:	a0 0d       	add	r26, r0
    2552:	61 1d       	adc	r22, r1
    2554:	22 1f       	adc	r18, r18
    2556:	74 9f       	mul	r23, r20
    2558:	33 27       	eor	r19, r19
    255a:	a0 0d       	add	r26, r0
    255c:	61 1d       	adc	r22, r1
    255e:	23 1f       	adc	r18, r19
    2560:	84 9f       	mul	r24, r20
    2562:	60 0d       	add	r22, r0
    2564:	21 1d       	adc	r18, r1
    2566:	82 2f       	mov	r24, r18
    2568:	76 2f       	mov	r23, r22
    256a:	6a 2f       	mov	r22, r26
    256c:	11 24       	eor	r1, r1
    256e:	9f 57       	subi	r25, 0x7F	; 127
    2570:	50 40       	sbci	r21, 0x00	; 0
    2572:	9a f0       	brmi	.+38     	; 0x259a <__mulsf3_pse+0x88>
    2574:	f1 f0       	breq	.+60     	; 0x25b2 <__mulsf3_pse+0xa0>
    2576:	88 23       	and	r24, r24
    2578:	4a f0       	brmi	.+18     	; 0x258c <__mulsf3_pse+0x7a>
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	bb 1f       	adc	r27, r27
    2580:	66 1f       	adc	r22, r22
    2582:	77 1f       	adc	r23, r23
    2584:	88 1f       	adc	r24, r24
    2586:	91 50       	subi	r25, 0x01	; 1
    2588:	50 40       	sbci	r21, 0x00	; 0
    258a:	a9 f7       	brne	.-22     	; 0x2576 <__mulsf3_pse+0x64>
    258c:	9e 3f       	cpi	r25, 0xFE	; 254
    258e:	51 05       	cpc	r21, r1
    2590:	80 f0       	brcs	.+32     	; 0x25b2 <__mulsf3_pse+0xa0>
    2592:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__fp_inf>
    2596:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__fp_szero>
    259a:	5f 3f       	cpi	r21, 0xFF	; 255
    259c:	e4 f3       	brlt	.-8      	; 0x2596 <__mulsf3_pse+0x84>
    259e:	98 3e       	cpi	r25, 0xE8	; 232
    25a0:	d4 f3       	brlt	.-12     	; 0x2596 <__mulsf3_pse+0x84>
    25a2:	86 95       	lsr	r24
    25a4:	77 95       	ror	r23
    25a6:	67 95       	ror	r22
    25a8:	b7 95       	ror	r27
    25aa:	f7 95       	ror	r31
    25ac:	e7 95       	ror	r30
    25ae:	9f 5f       	subi	r25, 0xFF	; 255
    25b0:	c1 f7       	brne	.-16     	; 0x25a2 <__mulsf3_pse+0x90>
    25b2:	fe 2b       	or	r31, r30
    25b4:	88 0f       	add	r24, r24
    25b6:	91 1d       	adc	r25, r1
    25b8:	96 95       	lsr	r25
    25ba:	87 95       	ror	r24
    25bc:	97 f9       	bld	r25, 7
    25be:	08 95       	ret
    25c0:	19 f4       	brne	.+6      	; 0x25c8 <__mulsf3_pse+0xb6>
    25c2:	16 f4       	brtc	.+4      	; 0x25c8 <__mulsf3_pse+0xb6>
    25c4:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_nan>
    25c8:	0c 94 26 13 	jmp	0x264c	; 0x264c <__fp_mpack>

000025cc <sqrt>:
    25cc:	0e 94 4d 12 	call	0x249a	; 0x249a <__fp_splitA>
    25d0:	b8 f3       	brcs	.-18     	; 0x25c0 <__mulsf3_pse+0xae>
    25d2:	99 23       	and	r25, r25
    25d4:	c9 f3       	breq	.-14     	; 0x25c8 <__mulsf3_pse+0xb6>
    25d6:	b6 f3       	brts	.-20     	; 0x25c4 <__mulsf3_pse+0xb2>
    25d8:	9f 57       	subi	r25, 0x7F	; 127
    25da:	55 0b       	sbc	r21, r21
    25dc:	87 ff       	sbrs	r24, 7
    25de:	0e 94 34 13 	call	0x2668	; 0x2668 <__fp_norm2>
    25e2:	00 24       	eor	r0, r0
    25e4:	a0 e6       	ldi	r26, 0x60	; 96
    25e6:	40 ea       	ldi	r20, 0xA0	; 160
    25e8:	90 01       	movw	r18, r0
    25ea:	80 58       	subi	r24, 0x80	; 128
    25ec:	56 95       	lsr	r21
    25ee:	97 95       	ror	r25
    25f0:	28 f4       	brcc	.+10     	; 0x25fc <sqrt+0x30>
    25f2:	80 5c       	subi	r24, 0xC0	; 192
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	20 f0       	brcs	.+8      	; 0x2604 <sqrt+0x38>
    25fc:	26 17       	cp	r18, r22
    25fe:	37 07       	cpc	r19, r23
    2600:	48 07       	cpc	r20, r24
    2602:	30 f4       	brcc	.+12     	; 0x2610 <sqrt+0x44>
    2604:	62 1b       	sub	r22, r18
    2606:	73 0b       	sbc	r23, r19
    2608:	84 0b       	sbc	r24, r20
    260a:	20 29       	or	r18, r0
    260c:	31 29       	or	r19, r1
    260e:	4a 2b       	or	r20, r26
    2610:	a6 95       	lsr	r26
    2612:	17 94       	ror	r1
    2614:	07 94       	ror	r0
    2616:	20 25       	eor	r18, r0
    2618:	31 25       	eor	r19, r1
    261a:	4a 27       	eor	r20, r26
    261c:	58 f7       	brcc	.-42     	; 0x25f4 <sqrt+0x28>
    261e:	66 0f       	add	r22, r22
    2620:	77 1f       	adc	r23, r23
    2622:	88 1f       	adc	r24, r24
    2624:	20 f0       	brcs	.+8      	; 0x262e <sqrt+0x62>
    2626:	26 17       	cp	r18, r22
    2628:	37 07       	cpc	r19, r23
    262a:	48 07       	cpc	r20, r24
    262c:	30 f4       	brcc	.+12     	; 0x263a <sqrt+0x6e>
    262e:	62 0b       	sbc	r22, r18
    2630:	73 0b       	sbc	r23, r19
    2632:	84 0b       	sbc	r24, r20
    2634:	20 0d       	add	r18, r0
    2636:	31 1d       	adc	r19, r1
    2638:	41 1d       	adc	r20, r1
    263a:	a0 95       	com	r26
    263c:	81 f7       	brne	.-32     	; 0x261e <sqrt+0x52>
    263e:	b9 01       	movw	r22, r18
    2640:	84 2f       	mov	r24, r20
    2642:	91 58       	subi	r25, 0x81	; 129
    2644:	88 0f       	add	r24, r24
    2646:	96 95       	lsr	r25
    2648:	87 95       	ror	r24
    264a:	08 95       	ret

0000264c <__fp_mpack>:
    264c:	9f 3f       	cpi	r25, 0xFF	; 255
    264e:	31 f0       	breq	.+12     	; 0x265c <__fp_mpack_finite+0xc>

00002650 <__fp_mpack_finite>:
    2650:	91 50       	subi	r25, 0x01	; 1
    2652:	20 f4       	brcc	.+8      	; 0x265c <__fp_mpack_finite+0xc>
    2654:	87 95       	ror	r24
    2656:	77 95       	ror	r23
    2658:	67 95       	ror	r22
    265a:	b7 95       	ror	r27
    265c:	88 0f       	add	r24, r24
    265e:	91 1d       	adc	r25, r1
    2660:	96 95       	lsr	r25
    2662:	87 95       	ror	r24
    2664:	97 f9       	bld	r25, 7
    2666:	08 95       	ret

00002668 <__fp_norm2>:
    2668:	91 50       	subi	r25, 0x01	; 1
    266a:	50 40       	sbci	r21, 0x00	; 0
    266c:	66 0f       	add	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	88 1f       	adc	r24, r24
    2672:	d2 f7       	brpl	.-12     	; 0x2668 <__fp_norm2>
    2674:	08 95       	ret

00002676 <__udivmodhi4>:
    2676:	aa 1b       	sub	r26, r26
    2678:	bb 1b       	sub	r27, r27
    267a:	51 e1       	ldi	r21, 0x11	; 17
    267c:	07 c0       	rjmp	.+14     	; 0x268c <__udivmodhi4_ep>

0000267e <__udivmodhi4_loop>:
    267e:	aa 1f       	adc	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	a6 17       	cp	r26, r22
    2684:	b7 07       	cpc	r27, r23
    2686:	10 f0       	brcs	.+4      	; 0x268c <__udivmodhi4_ep>
    2688:	a6 1b       	sub	r26, r22
    268a:	b7 0b       	sbc	r27, r23

0000268c <__udivmodhi4_ep>:
    268c:	88 1f       	adc	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	5a 95       	dec	r21
    2692:	a9 f7       	brne	.-22     	; 0x267e <__udivmodhi4_loop>
    2694:	80 95       	com	r24
    2696:	90 95       	com	r25
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	08 95       	ret

0000269e <__divmodhi4>:
    269e:	97 fb       	bst	r25, 7
    26a0:	07 2e       	mov	r0, r23
    26a2:	16 f4       	brtc	.+4      	; 0x26a8 <__divmodhi4+0xa>
    26a4:	00 94       	com	r0
    26a6:	07 d0       	rcall	.+14     	; 0x26b6 <__divmodhi4_neg1>
    26a8:	77 fd       	sbrc	r23, 7
    26aa:	09 d0       	rcall	.+18     	; 0x26be <__divmodhi4_neg2>
    26ac:	0e 94 3b 13 	call	0x2676	; 0x2676 <__udivmodhi4>
    26b0:	07 fc       	sbrc	r0, 7
    26b2:	05 d0       	rcall	.+10     	; 0x26be <__divmodhi4_neg2>
    26b4:	3e f4       	brtc	.+14     	; 0x26c4 <__divmodhi4_exit>

000026b6 <__divmodhi4_neg1>:
    26b6:	90 95       	com	r25
    26b8:	81 95       	neg	r24
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	08 95       	ret

000026be <__divmodhi4_neg2>:
    26be:	70 95       	com	r23
    26c0:	61 95       	neg	r22
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255

000026c4 <__divmodhi4_exit>:
    26c4:	08 95       	ret

000026c6 <_exit>:
    26c6:	f8 94       	cli

000026c8 <__stop_program>:
    26c8:	ff cf       	rjmp	.-2      	; 0x26c8 <__stop_program>
