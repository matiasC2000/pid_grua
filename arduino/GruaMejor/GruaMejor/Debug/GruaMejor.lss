
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800100  0000265e  000026f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000265e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  008002f6  008002f6  000028e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a25  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001340  00000000  00000000  000056b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e9c  00000000  00000000  000069f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  00008894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0e  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b13  00000000  00000000  00009f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000ba29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_1>
       8:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_11>
      30:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__vector_18>
      4c:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3f       	cpi	r26, 0xF6	; 246
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 ef       	ldi	r26, 0xF6	; 246
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 31       	cpi	r26, 0x1A	; 26
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      9e:	0c 94 2d 13 	jmp	0x265a	; 0x265a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0,FLAG_button_B_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <contAOFF>
		if(++contAON>15){
      c8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <contAON>
		if(++contAOFF>15){
      e8:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <FLAG_button_A_change>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0d c0       	rjmp	.+26     	; 0x12c <button_Actulizar+0x6c>
		//apretado
		contBOFF=0;
     112:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <contBOFF>
		if(++contB>15){
     116:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <contB>
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <contB>
     120:	80 31       	cpi	r24, 0x10	; 16
     122:	b8 f0       	brcs	.+46     	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B=1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <FLAG_button_B>
     12a:	08 95       	ret
			contBON=100;
		}
	}else{
		//lo solto
		contBON=0;
		if(++contBOFF>15){
     12c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contBOFF>
     130:	8f 5f       	subi	r24, 0xFF	; 255
     132:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contBOFF>
     136:	80 31       	cpi	r24, 0x10	; 16
     138:	28 f0       	brcs	.+10     	; 0x144 <button_Actulizar+0x84>
			FLAG_button_B=0;
     13a:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <FLAG_button_B>
			contBOFF=100;
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contBOFF>
		}
		if(contBOFF==13){
     144:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contBOFF>
     148:	8d 30       	cpi	r24, 0x0D	; 13
     14a:	19 f4       	brne	.+6      	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B_change=1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
     152:	08 95       	ret

00000154 <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	84 ec       	ldi	r24, 0xC4	; 196
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
     15e:	08 95       	ret

00000160 <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     168:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     16e:	1b c0       	rjmp	.+54     	; 0x1a6 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     170:	fe 01       	movw	r30, r28
     172:	e4 23       	and	r30, r20
     174:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	29 1b       	sub	r18, r25
     17c:	31 09       	sbc	r19, r1
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	02 c0       	rjmp	.+4      	; 0x18c <Descomponerint16aHex+0x2c>
     188:	f6 95       	lsr	r31
     18a:	e7 95       	ror	r30
     18c:	2a 95       	dec	r18
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     190:	e0 50       	subi	r30, 0x00	; 0
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     198:	52 95       	swap	r21
     19a:	42 95       	swap	r20
     19c:	4f 70       	andi	r20, 0x0F	; 15
     19e:	45 27       	eor	r20, r21
     1a0:	5f 70       	andi	r21, 0x0F	; 15
     1a2:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     1a4:	9f 5f       	subi	r25, 0xFF	; 255
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	18 f3       	brcs	.-58     	; 0x170 <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     1aa:	1c 92       	st	X, r1
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
     1c0:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1cc:	24 c0       	rjmp	.+72     	; 0x216 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ce:	db 01       	movw	r26, r22
     1d0:	ca 01       	movw	r24, r20
     1d2:	8c 21       	and	r24, r12
     1d4:	9d 21       	and	r25, r13
     1d6:	ae 21       	and	r26, r14
     1d8:	bf 21       	and	r27, r15
     1da:	27 e0       	ldi	r18, 0x07	; 7
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	2c 1b       	sub	r18, r28
     1e0:	31 09       	sbc	r19, r1
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <Descomponeruint32aHex+0x42>
     1ec:	b6 95       	lsr	r27
     1ee:	a7 95       	ror	r26
     1f0:	97 95       	ror	r25
     1f2:	87 95       	ror	r24
     1f4:	2a 95       	dec	r18
     1f6:	d2 f7       	brpl	.-12     	; 0x1ec <Descomponeruint32aHex+0x3a>
     1f8:	dc 01       	movw	r26, r24
     1fa:	a0 50       	subi	r26, 0x00	; 0
     1fc:	bf 4f       	sbci	r27, 0xFF	; 255
     1fe:	8c 91       	ld	r24, X
     200:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     202:	68 94       	set
     204:	13 f8       	bld	r1, 3
     206:	76 95       	lsr	r23
     208:	67 95       	ror	r22
     20a:	57 95       	ror	r21
     20c:	47 95       	ror	r20
     20e:	16 94       	lsr	r1
     210:	d1 f7       	brne	.-12     	; 0x206 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     212:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     214:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     216:	c8 30       	cpi	r28, 0x08	; 8
     218:	d0 f2       	brcs	.-76     	; 0x1ce <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     21a:	10 82       	st	Z, r1
}
     21c:	cf 91       	pop	r28
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	08 95       	ret

00000228 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6f 97       	sbiw	r28, 0x1f	; 31
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     23c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getEspacioDisponibleBuffer>
     240:	8f 3d       	cpi	r24, 0xDF	; 223
     242:	20 f0       	brcs	.+8      	; 0x24c <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <FLAGmandarDatos>
     24a:	06 c0       	rjmp	.+12     	; 0x258 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     24c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getEspacioDisponibleBuffer>
     250:	88 32       	cpi	r24, 0x28	; 40
     252:	10 f4       	brcc	.+4      	; 0x258 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     254:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <FLAGmandarDatos>
		}
	}
	//la lectura de las variables tiene que ser en un unico momento
	//if momento == 0
	// guardar todos los datos
	if(FLAGmandarDatos){
     258:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <FLAGmandarDatos>
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <Informar_Actulizar+0x3a>
     260:	5a c0       	rjmp	.+180    	; 0x316 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     262:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <getTiempoInforme>
     266:	ae 01       	movw	r20, r28
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	ce 01       	movw	r24, r28
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
		UART_TransmitChar(';');
     27a:	8b e3       	ldi	r24, 0x3B	; 59
     27c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     280:	0e 94 91 06 	call	0xd22	; 0xd22 <getValor>
     284:	be 01       	movw	r22, r28
     286:	67 5e       	subi	r22, 0xE7	; 231
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	ce 01       	movw	r24, r28
     292:	49 96       	adiw	r24, 0x19	; 25
     294:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     298:	8b e3       	ldi	r24, 0x3B	; 59
     29a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     29e:	0e 94 85 06 	call	0xd0a	; 0xd0a <getIntegralPID>
     2a2:	be 01       	movw	r22, r28
     2a4:	6e 5e       	subi	r22, 0xEE	; 238
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     2ac:	67 e0       	ldi	r22, 0x07	; 7
     2ae:	ce 01       	movw	r24, r28
     2b0:	42 96       	adiw	r24, 0x12	; 18
     2b2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     2bc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <getDerivadaPID>
     2c0:	be 01       	movw	r22, r28
     2c2:	65 5f       	subi	r22, 0xF5	; 245
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2ca:	67 e0       	ldi	r22, 0x07	; 7
     2cc:	ce 01       	movw	r24, r28
     2ce:	0b 96       	adiw	r24, 0x0b	; 11
     2d0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
		UART_TransmitChar(';');
     2d4:	8b e3       	ldi	r24, 0x3B	; 59
     2d6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2da:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <getSlideResistor>
     2de:	bc 01       	movw	r22, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	44 e5       	ldi	r20, 0x54	; 84
     2ee:	51 e4       	ldi	r21, 0x41	; 65
     2f0:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     2f4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	be 01       	movw	r22, r28
     2fe:	67 5e       	subi	r22, 0xE7	; 231
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	ce 01       	movw	r24, r28
     30a:	49 96       	adiw	r24, 0x19	; 25
     30c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
		UART_TransmitChar('\n');
     310:	8a e0       	ldi	r24, 0x0A	; 10
     312:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
	}
}
     316:	6f 96       	adiw	r28, 0x1f	; 31
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     328:	3f 92       	push	r3
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	c2 54       	subi	r28, 0x42	; 66
     350:	d1 09       	sbc	r29, r1
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <SacarDatosBufferEnter>
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <actulizar_leerDatos+0x42>
     368:	1a c1       	rjmp	.+564    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     36a:	fe 01       	movw	r30, r28
     36c:	f3 96       	adiw	r30, 0x33	; 51
     36e:	80 e1       	ldi	r24, 0x10	; 16
     370:	df 01       	movw	r26, r30
     372:	1d 92       	st	X+, r1
     374:	8a 95       	dec	r24
     376:	e9 f7       	brne	.-6      	; 0x372 <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	8d ee       	ldi	r24, 0xED	; 237
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     38c:	e1 2c       	mov	r14, r1
     38e:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     390:	c4 c0       	rjmp	.+392    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     392:	bd e2       	ldi	r27, 0x2D	; 45
     394:	3b 12       	cpse	r3, r27
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     398:	b7 fa       	bst	r11, 7
     39a:	b0 94       	com	r11
     39c:	b7 f8       	bld	r11, 7
     39e:	b0 94       	com	r11
     3a0:	2f c0       	rjmp	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     3a2:	c3 2c       	mov	r12, r3
     3a4:	d1 2c       	mov	r13, r1
     3a6:	e0 e3       	ldi	r30, 0x30	; 48
     3a8:	ce 1a       	sub	r12, r30
     3aa:	d1 08       	sbc	r13, r1
     3ac:	0e 2d       	mov	r16, r14
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	00 0f       	add	r16, r16
     3b2:	11 1f       	adc	r17, r17
     3b4:	00 0f       	add	r16, r16
     3b6:	11 1f       	adc	r17, r17
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8c 0f       	add	r24, r28
     3be:	9d 1f       	adc	r25, r29
     3c0:	08 0f       	add	r16, r24
     3c2:	19 1f       	adc	r17, r25
     3c4:	d8 01       	movw	r26, r16
     3c6:	d2 96       	adiw	r26, 0x32	; 50
     3c8:	6d 91       	ld	r22, X+
     3ca:	7d 91       	ld	r23, X+
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	d5 97       	sbiw	r26, 0x35	; 53
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e2       	ldi	r20, 0x20	; 32
     3d8:	51 e4       	ldi	r21, 0x41	; 65
     3da:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     3de:	2b 01       	movw	r4, r22
     3e0:	3c 01       	movw	r6, r24
     3e2:	b6 01       	movw	r22, r12
     3e4:	dd 0c       	add	r13, r13
     3e6:	88 0b       	sbc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     3ee:	a3 01       	movw	r20, r6
     3f0:	92 01       	movw	r18, r4
     3f2:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     3f6:	f8 01       	movw	r30, r16
     3f8:	62 ab       	std	Z+50, r22	; 0x32
     3fa:	73 ab       	std	Z+51, r23	; 0x33
     3fc:	84 ab       	std	Z+52, r24	; 0x34
     3fe:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     400:	83 2d       	mov	r24, r3
     402:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
					i++;
     406:	f3 94       	inc	r15
     408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     40a:	0f 2e       	mov	r0, r31
     40c:	81 2c       	mov	r8, r1
     40e:	91 2c       	mov	r9, r1
     410:	f0 e8       	ldi	r31, 0x80	; 128
     412:	af 2e       	mov	r10, r31
     414:	ff e3       	ldi	r31, 0x3F	; 63
     416:	bf 2e       	mov	r11, r31
     418:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	ef 0d       	add	r30, r15
     424:	f1 1d       	adc	r31, r1
     426:	30 80       	ld	r3, Z
     428:	fc e2       	ldi	r31, 0x2C	; 44
     42a:	3f 16       	cp	r3, r31
     42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42e:	47 c0       	rjmp	.+142    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	38 16       	cp	r3, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	43 c0       	rjmp	.+134    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	39 16       	cp	r3, r25
     43c:	09 f4       	brne	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	3f c0       	rjmp	.+126    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     440:	31 10       	cpse	r3, r1
     442:	a7 cf       	rjmp	.-178    	; 0x392 <actulizar_leerDatos+0x6a>
     444:	3c c0       	rjmp	.+120    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     446:	0e 32       	cpi	r16, 0x2E	; 46
     448:	c9 f1       	breq	.+114    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     44a:	0c 32       	cpi	r16, 0x2C	; 44
     44c:	b9 f1       	breq	.+110    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	00 53       	subi	r16, 0x30	; 48
     452:	11 09       	sbc	r17, r1
     454:	ce 2c       	mov	r12, r14
     456:	d1 2c       	mov	r13, r1
     458:	cc 0c       	add	r12, r12
     45a:	dd 1c       	adc	r13, r13
     45c:	cc 0c       	add	r12, r12
     45e:	dd 1c       	adc	r13, r13
     460:	a1 e0       	ldi	r26, 0x01	; 1
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	ac 0f       	add	r26, r28
     466:	bd 1f       	adc	r27, r29
     468:	ca 0e       	add	r12, r26
     46a:	db 1e       	adc	r13, r27
     46c:	f6 01       	movw	r30, r12
     46e:	62 a9       	ldd	r22, Z+50	; 0x32
     470:	73 a9       	ldd	r23, Z+51	; 0x33
     472:	84 a9       	ldd	r24, Z+52	; 0x34
     474:	95 a9       	ldd	r25, Z+53	; 0x35
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e2       	ldi	r20, 0x20	; 32
     47c:	51 e4       	ldi	r21, 0x41	; 65
     47e:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     482:	2b 01       	movw	r4, r22
     484:	3c 01       	movw	r6, r24
     486:	b8 01       	movw	r22, r16
     488:	11 0f       	add	r17, r17
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     492:	a3 01       	movw	r20, r6
     494:	92 01       	movw	r18, r4
     496:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     49a:	d6 01       	movw	r26, r12
     49c:	d2 96       	adiw	r26, 0x32	; 50
     49e:	6d 93       	st	X+, r22
     4a0:	7d 93       	st	X+, r23
     4a2:	8d 93       	st	X+, r24
     4a4:	9c 93       	st	X, r25
     4a6:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e2       	ldi	r20, 0x20	; 32
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	c5 01       	movw	r24, r10
     4b2:	b4 01       	movw	r22, r8
     4b4:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
					
				}
				i++;
     4bc:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     4be:	e1 e0       	ldi	r30, 0x01	; 1
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	ef 0d       	add	r30, r15
     4c8:	f1 1d       	adc	r31, r1
     4ca:	00 81       	ld	r16, Z
     4cc:	00 32       	cpi	r16, 0x20	; 32
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d0:	01 11       	cpse	r16, r1
     4d2:	b9 cf       	rjmp	.-142    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4d4:	ce 2c       	mov	r12, r14
     4d6:	d1 2c       	mov	r13, r1
     4d8:	cc 0c       	add	r12, r12
     4da:	dd 1c       	adc	r13, r13
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	ce 0e       	add	r12, r30
     4ea:	df 1e       	adc	r13, r31
     4ec:	d6 01       	movw	r26, r12
     4ee:	d2 96       	adiw	r26, 0x32	; 50
     4f0:	6d 91       	ld	r22, X+
     4f2:	7d 91       	ld	r23, X+
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	d5 97       	sbiw	r26, 0x35	; 53
     4fa:	a5 01       	movw	r20, r10
     4fc:	94 01       	movw	r18, r8
     4fe:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
     502:	f6 01       	movw	r30, r12
     504:	62 ab       	std	Z+50, r22	; 0x32
     506:	73 ab       	std	Z+51, r23	; 0x33
     508:	84 ab       	std	Z+52, r24	; 0x34
     50a:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     50c:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     50e:	00 32       	cpi	r16, 0x20	; 32
     510:	21 f4       	brne	.+8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     512:	80 2f       	mov	r24, r16
     514:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
     518:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	ef 0d       	add	r30, r15
     524:	f1 1d       	adc	r31, r1
     526:	80 81       	ld	r24, Z
     528:	81 11       	cpse	r24, r1
     52a:	6f cf       	rjmp	.-290    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     52c:	6b a9       	ldd	r22, Y+51	; 0x33
     52e:	7c a9       	ldd	r23, Y+52	; 0x34
     530:	8d a9       	ldd	r24, Y+53	; 0x35
     532:	9e a9       	ldd	r25, Y+54	; 0x36
     534:	23 e3       	ldi	r18, 0x33	; 51
     536:	33 e3       	ldi	r19, 0x33	; 51
     538:	43 e4       	ldi	r20, 0x43	; 67
     53a:	51 ec       	ldi	r21, 0xC1	; 193
     53c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     540:	81 11       	cpse	r24, r1
     542:	04 c0       	rjmp	.+8      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
			ONLEDBLUE;
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8b b9       	out	0x0b, r24	; 11
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		}else{
			OFFLEDBLUE;
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 7b       	andi	r24, 0xBF	; 191
     550:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     552:	f4 e0       	ldi	r31, 0x04	; 4
     554:	ef 12       	cpse	r14, r31
     556:	23 c0       	rjmp	.+70     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			setKp(valores[0]);
     558:	6b a9       	ldd	r22, Y+51	; 0x33
     55a:	7c a9       	ldd	r23, Y+52	; 0x34
     55c:	8d a9       	ldd	r24, Y+53	; 0x35
     55e:	9e a9       	ldd	r25, Y+54	; 0x36
     560:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <setKp>
			setKi(valores[1]);
     564:	6f a9       	ldd	r22, Y+55	; 0x37
     566:	78 ad       	ldd	r23, Y+56	; 0x38
     568:	89 ad       	ldd	r24, Y+57	; 0x39
     56a:	9a ad       	ldd	r25, Y+58	; 0x3a
     56c:	0e 94 df 07 	call	0xfbe	; 0xfbe <setKi>
			setKd(valores[2]);
     570:	6b ad       	ldd	r22, Y+59	; 0x3b
     572:	7c ad       	ldd	r23, Y+60	; 0x3c
     574:	8d ad       	ldd	r24, Y+61	; 0x3d
     576:	9e ad       	ldd	r25, Y+62	; 0x3e
     578:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     57c:	23 96       	adiw	r28, 0x03	; 3
     57e:	6c ad       	ldd	r22, Y+60	; 0x3c
     580:	7d ad       	ldd	r23, Y+61	; 0x3d
     582:	8e ad       	ldd	r24, Y+62	; 0x3e
     584:	9f ad       	ldd	r25, Y+63	; 0x3f
     586:	23 97       	sbiw	r28, 0x03	; 3
     588:	0e 94 57 11 	call	0x22ae	; 0x22ae <__fixunssfsi>
     58c:	16 2f       	mov	r17, r22
     58e:	86 2f       	mov	r24, r22
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 fa 07 	call	0xff4	; 0xff4 <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	81 0f       	add	r24, r17
     59a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
		}
	}
     59e:	ce 5b       	subi	r28, 0xBE	; 190
     5a0:	df 4f       	sbci	r29, 0xFF	; 255
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	08 95       	ret

000005d0 <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5d0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <UART_Init>
	Inicializacion_Motor();
     5d4:	0e 94 98 03 	call	0x730	; 0x730 <Inicializacion_Motor>
	SensorEncoder_init();
     5d8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SensorEncoder_init>
	Inicializacion_slideResistor();
     5dc:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <Inicializacion_slideResistor>
	button_init();
     5e0:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5ea:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5ec:	0e 94 aa 00 	call	0x154	; 0x154 <Informar_MensajeInicial>
	
	setVelocidad(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	buscarOrigen();
     5f8:	0e 94 36 04 	call	0x86c	; 0x86c <buscarOrigen>
	
	irPos(7000);
     5fc:	88 e5       	ldi	r24, 0x58	; 88
     5fe:	9b e1       	ldi	r25, 0x1B	; 27
     600:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	ONLEDGREEN;
     604:	8b b1       	in	r24, 0x0b	; 11
     606:	80 62       	ori	r24, 0x20	; 32
     608:	8b b9       	out	0x0b, r24	; 11
	
	getAnguloEncoder(&anguloAnt, 0);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	88 ee       	ldi	r24, 0xE8	; 232
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	0e 94 5f 0c 	call	0x18be	; 0x18be <getAnguloEncoder>
#include "global.h"

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
     616:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     618:	21 c0       	rjmp	.+66     	; 0x65c <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	87 ea       	ldi	r24, 0xA7	; 167
     61e:	91 e6       	ldi	r25, 0x61	; 97
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <main+0x50>
     628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x5a>
     62a:	00 00       	nop
		_delay_ms(2000);
		getAnguloEncoder(&angulo, 0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	86 ee       	ldi	r24, 0xE6	; 230
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	0e 94 5f 0c 	call	0x18be	; 0x18be <getAnguloEncoder>
		if (anguloAnt == angulo)
     638:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <anguloAnt>
     63c:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <anguloAnt+0x1>
     640:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <angulo>
     644:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <angulo+0x1>
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	11 f4       	brne	.+4      	; 0x652 <main+0x82>
		{
			i++;
     64e:	cf 5f       	subi	r28, 0xFF	; 255
     650:	05 c0       	rjmp	.+10     	; 0x65c <main+0x8c>
		}else{
			anguloAnt = angulo;
     652:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <anguloAnt+0x1>
     656:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <anguloAnt>
			i=0;
     65a:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     65c:	c3 30       	cpi	r28, 0x03	; 3
     65e:	e8 f2       	brcs	.-70     	; 0x61a <main+0x4a>
			i=0;
		}
	}

	//setea el centro de pendulo
	set_origen();
     660:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <set_origen>
	OFFLEDGREEN;
     664:	8b b1       	in	r24, 0x0b	; 11
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	8b b9       	out	0x0b, r24	; 11
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
     66a:	88 ea       	ldi	r24, 0xA8	; 168
     66c:	9b e1       	ldi	r25, 0x1B	; 27
     66e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	SEOS_Init();
     672:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <SEOS_Init>
	uint32_t inicio;
	uint8_t flag = 0;
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     676:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <SEOS_Dispatch_Tasks>
     67a:	fd cf       	rjmp	.-6      	; 0x676 <main+0xa6>

0000067c <setVelocidad>:
static volatile uint16_t pos=0;
static volatile int8_t lado=0,ladoAnt,salto=1;
// 1 es derecha -1 es izquierd


void setVelocidad(int16_t velocidad){
     67c:	bc 01       	movw	r22, r24
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	61 f4       	brne	.+24     	; 0x69a <setVelocidad+0x1e>
		espera = 64000;
		PASOS1;salto=1;
     682:	85 b1       	in	r24, 0x05	; 5
     684:	87 70       	andi	r24, 0x07	; 7
     686:	88 63       	ori	r24, 0x38	; 56
     688:	85 b9       	out	0x05, r24	; 5
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
		fueCero=1;
     690:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>

void setVelocidad(int16_t velocidad){
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
		espera = 64000;
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	7a ef       	ldi	r23, 0xFA	; 250
     698:	2a c0       	rjmp	.+84     	; 0x6ee <setVelocidad+0x72>
		PASOS1;salto=1;
		fueCero=1;
	}else{
	if(velocidad<0) {
     69a:	99 23       	and	r25, r25
     69c:	84 f4       	brge	.+32     	; 0x6be <setVelocidad+0x42>
		lado=-1;//IRIZQ;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
		velocidad = (-1)*velocidad;
     6a4:	71 95       	neg	r23
     6a6:	61 95       	neg	r22
     6a8:	71 09       	sbc	r23, r1
		if(ladoAnt==1){
     6aa:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <ladoAnt>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <setVelocidad+0x3a>
			fueCero=1;
     6b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=-1;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <ladoAnt>
     6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <setVelocidad+0x5c>
	}
	else {
		lado = 1;//IRDER;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
		if(ladoAnt==-1){
     6c4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <ladoAnt>
     6c8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <setVelocidad+0x56>
			fueCero=1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <ladoAnt>
		}
		
	espera = 31000/velocidad;	//era 1875
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	99 e7       	ldi	r25, 0x79	; 121
     6dc:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
	salto=1;PASOS1;// el paso no tendria que poner siempre en 1 los otros tienen que dejar en 1
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6e6:	85 b1       	in	r24, 0x05	; 5
     6e8:	87 70       	andi	r24, 0x07	; 7
     6ea:	88 63       	ori	r24, 0x38	; 56
     6ec:	85 b9       	out	0x05, r24	; 5
	}
	
	//el tiempo de espera minimo esta 33 pero se puede mas hacer pruebas
	//velocidad maxima de 1000
	//tiempo espera = 33000/velociadad
	if (fueCero)
     6ee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6f2:	88 23       	and	r24, r24
     6f4:	21 f0       	breq	.+8      	; 0x6fe <setVelocidad+0x82>
	{
		espera+=60;
     6f6:	64 5c       	subi	r22, 0xC4	; 196
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
		fueCero=0;
     6fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
	}
	if(espera-1 < TCNT1){
     6fe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     702:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     706:	cb 01       	movw	r24, r22
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	82 17       	cp	r24, r18
     70c:	93 07       	cpc	r25, r19
     70e:	58 f4       	brcc	.+22     	; 0x726 <setVelocidad+0xaa>
		OCR1A = espera;
     710:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     714:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCNT1 = espera-2;
     718:	62 50       	subi	r22, 0x02	; 2
     71a:	71 09       	sbc	r23, r1
     71c:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     720:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     724:	08 95       	ret
	}else{
		OCR1A = espera;
     726:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     72a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     72e:	08 95       	ret

00000730 <Inicializacion_Motor>:
	}
}

void Inicializacion_Motor(){
	//pongo como salida
	DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5);
     730:	84 b1       	in	r24, 0x04	; 4
     732:	8e 63       	ori	r24, 0x3E	; 62
     734:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD7);
     736:	8a b1       	in	r24, 0x0a	; 10
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	8a b9       	out	0x0a, r24	; 10
	
	//pongo como salida los pines que controlan el tamaio de paso
	//borrar viejo DDRC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2);
	
	TCCR1A =  0;
     73c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10); //modo CTC y preescaler de 1024
	
	TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10); //el que tengo que modificar modo CTC y preescaler de 64
     740:	8b e0       	ldi	r24, 0x0B	; 11
     742:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIFR1 = (1<<OCF1B)|(1<<OCF1A);
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	86 bb       	out	0x16, r24	; 22
	
	//timer
	OCR1B = 1;			//tenia16+1
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     752:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 6000;			//32+1 velocidad maxima
     756:	20 e7       	ldi	r18, 0x70	; 112
     758:	37 e1       	ldi	r19, 0x17	; 23
     75a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     75e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	 // Habilitar interrupciones
	TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B);
     762:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     766:	08 95       	ret

00000768 <getPos>:
}

uint16_t getPos(){
	return pos;
     768:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     76c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
}
     770:	08 95       	ret

00000772 <darPaso>:
	setVelocidad(0);
}

//-1 izq z der
void darPaso(int8_t sentido){
	if (sentido < 0){
     772:	88 23       	and	r24, r24
     774:	3c f4       	brge	.+14     	; 0x784 <darPaso+0x12>
		IRIZQ;
     776:	85 b1       	in	r24, 0x05	; 5
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	85 b9       	out	0x05, r24	; 5
		lado = -1;
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
     782:	06 c0       	rjmp	.+12     	; 0x790 <darPaso+0x1e>
	}
	else{
		IRDER;
     784:	85 b1       	in	r24, 0x05	; 5
     786:	8d 7f       	andi	r24, 0xFD	; 253
     788:	85 b9       	out	0x05, r24	; 5
		lado = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <lado>
	}
	PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     790:	85 b1       	in	r24, 0x05	; 5
     792:	84 60       	ori	r24, 0x04	; 4
     794:	85 b9       	out	0x05, r24	; 5
     796:	8f e3       	ldi	r24, 0x3F	; 63
     798:	9f e1       	ldi	r25, 0x1F	; 31
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <darPaso+0x28>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <darPaso+0x2e>
     7a0:	00 00       	nop
	_delay_ms(2);
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     7a2:	85 b1       	in	r24, 0x05	; 5
     7a4:	8b 7f       	andi	r24, 0xFB	; 251
     7a6:	85 b9       	out	0x05, r24	; 5
     7a8:	8f e3       	ldi	r24, 0x3F	; 63
     7aa:	9f e1       	ldi	r25, 0x1F	; 31
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <darPaso+0x3a>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <darPaso+0x40>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <irPos>:

uint16_t getPos(){
	return pos;
}

void irPos(uint16_t destino){
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
	PASOS16;salto=16;
     7bc:	85 b1       	in	r24, 0x05	; 5
     7be:	87 70       	andi	r24, 0x07	; 7
     7c0:	85 b9       	out	0x05, r24	; 5
     7c2:	80 e1       	ldi	r24, 0x10	; 16
     7c4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	81 ee       	ldi	r24, 0xE1	; 225
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <irPos+0x18>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <irPos+0x22>
     7d8:	00 00       	nop
	_delay_ms(100);
	if(destino>0 && destino<FIN){
     7da:	ce 01       	movw	r24, r28
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	8f 32       	cpi	r24, 0x2F	; 47
     7e0:	95 43       	sbci	r25, 0x35	; 53
     7e2:	e8 f5       	brcc	.+122    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		if(pos<destino)
     7e4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     7e8:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     7ec:	8c 17       	cp	r24, r28
     7ee:	9d 07       	cpc	r25, r29
     7f0:	a0 f0       	brcs	.+40     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7f2:	2e c0       	rjmp	.+92     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			while(pos<destino){
				darPaso(1);pos += lado*salto;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     7fa:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     7fe:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     802:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     806:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     80a:	32 02       	muls	r19, r18
     80c:	80 0d       	add	r24, r0
     80e:	91 1d       	adc	r25, r1
     810:	11 24       	eor	r1, r1
     812:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     816:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
void irPos(uint16_t destino){
	PASOS16;salto=16;
	_delay_ms(100);
	if(destino>0 && destino<FIN){
		if(pos<destino)
			while(pos<destino){
     81a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     81e:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     822:	8c 17       	cp	r24, r28
     824:	9d 07       	cpc	r25, r29
     826:	30 f3       	brcs	.-52     	; 0x7f4 <irPos+0x3e>
     828:	1a c0       	rjmp	.+52     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
				darPaso(-1);pos += lado*salto;
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     830:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     834:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     838:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     83c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     840:	32 02       	muls	r19, r18
     842:	80 0d       	add	r24, r0
     844:	91 1d       	adc	r25, r1
     846:	11 24       	eor	r1, r1
     848:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     84c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
		if(pos<destino)
			while(pos<destino){
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
     850:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     854:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     858:	c8 17       	cp	r28, r24
     85a:	d9 07       	cpc	r29, r25
     85c:	30 f3       	brcs	.-52     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				darPaso(-1);pos += lado*salto;
			}
	}
	setVelocidad(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <buscarOrigen>:
}


void buscarOrigen(){
	//configurar el puerto de entrada pin6 D6
	DDRD &= ~(1<<PORTD4);
     86c:	8a b1       	in	r24, 0x0a	; 10
     86e:	8f 7e       	andi	r24, 0xEF	; 239
     870:	8a b9       	out	0x0a, r24	; 10
	//colocar el pin con pull up
	PORTD |= (1<<PORTD4);
     872:	8b b1       	in	r24, 0x0b	; 11
     874:	80 61       	ori	r24, 0x10	; 16
     876:	8b b9       	out	0x0b, r24	; 11
	
	setVelocidad(0);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	
	//prendo el led
	ONLEDBLUE;
     880:	8b b1       	in	r24, 0x0b	; 11
     882:	80 64       	ori	r24, 0x40	; 64
     884:	8b b9       	out	0x0b, r24	; 11
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	89 e6       	ldi	r24, 0x69	; 105
     88a:	98 e1       	ldi	r25, 0x18	; 24
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <buscarOrigen+0x20>
     894:	00 c0       	rjmp	.+0      	; 0x896 <buscarOrigen+0x2a>
     896:	00 00       	nop
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS16;salto=16;
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	87 70       	andi	r24, 0x07	; 7
     89c:	85 b9       	out	0x05, r24	; 5
     89e:	80 e1       	ldi	r24, 0x10	; 16
     8a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <buscarOrigen+0x40>
		darPaso(-1);
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	//prendo el led
	ONLEDBLUE;
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS16;salto=16;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8ac:	4c 99       	sbic	0x09, 4	; 9
     8ae:	fb cf       	rjmp	.-10     	; 0x8a6 <buscarOrigen+0x3a>
		darPaso(-1);
	}
	//encuntra el inicio de a pasos muy grandes, lo vuelvo a buscar con pasos mas chiquitos
	
	OFFLEDBLUE;
     8b0:	8b b1       	in	r24, 0x0b	; 11
     8b2:	8f 7b       	andi	r24, 0xBF	; 191
     8b4:	8b b9       	out	0x0b, r24	; 11
	
	pos=0;
     8b6:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <pos+0x1>
     8ba:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <pos>
	irPos(50);
     8be:	82 e3       	ldi	r24, 0x32	; 50
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	89 e6       	ldi	r24, 0x69	; 105
     8ca:	98 e1       	ldi	r25, 0x18	; 24
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	80 40       	sbci	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <buscarOrigen+0x60>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <buscarOrigen+0x6a>
     8d6:	00 00       	nop
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
     8d8:	8b b1       	in	r24, 0x0b	; 11
     8da:	8f 7b       	andi	r24, 0xBF	; 191
     8dc:	8b b9       	out	0x0b, r24	; 11
	PASOS1;salto=1;
     8de:	85 b1       	in	r24, 0x05	; 5
     8e0:	87 70       	andi	r24, 0x07	; 7
     8e2:	88 63       	ori	r24, 0x38	; 56
     8e4:	85 b9       	out	0x05, r24	; 5
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <buscarOrigen+0x88>
		darPaso(-1);
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
	PASOS1;salto=1;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8f4:	4c 99       	sbic	0x09, 4	; 9
     8f6:	fb cf       	rjmp	.-10     	; 0x8ee <buscarOrigen+0x82>
		darPaso(-1);
	}
	
	PASOS16;salto=16;
     8f8:	85 b1       	in	r24, 0x05	; 5
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	85 b9       	out	0x05, r24	; 5
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	//apago el led
	OFFLEDBLUE;
     904:	8b b1       	in	r24, 0x0b	; 11
     906:	8f 7b       	andi	r24, 0xBF	; 191
     908:	8b b9       	out	0x0b, r24	; 11
	pos = 0;
     90a:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <pos+0x1>
     90e:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <pos>
     912:	08 95       	ret

00000914 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     926:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     92a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     92e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     932:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     936:	32 02       	muls	r19, r18
     938:	80 0d       	add	r24, r0
     93a:	91 1d       	adc	r25, r1
     93c:	11 24       	eor	r1, r1
     93e:	80 33       	cpi	r24, 0x30	; 48
     940:	95 43       	sbci	r25, 0x35	; 53
     942:	08 f5       	brcc	.+66     	; 0x986 <__vector_11+0x72>
     944:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     948:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     94c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     950:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     954:	32 02       	muls	r19, r18
     956:	80 0d       	add	r24, r0
     958:	91 1d       	adc	r25, r1
     95a:	11 24       	eor	r1, r1
     95c:	89 2b       	or	r24, r25
     95e:	99 f0       	breq	.+38     	; 0x986 <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     960:	85 b1       	in	r24, 0x05	; 5
     962:	84 60       	ori	r24, 0x04	; 4
     964:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     966:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <lado>
     96a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     96e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <pos>
     972:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <pos+0x1>
     976:	32 02       	muls	r19, r18
     978:	80 0d       	add	r24, r0
     97a:	91 1d       	adc	r25, r1
     97c:	11 24       	eor	r1, r1
     97e:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <pos+0x1>
     982:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <pos>
	}		
}
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     9a4:	85 b1       	in	r24, 0x05	; 5
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     9aa:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <lado>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	19 f4       	brne	.+6      	; 0x9b8 <__vector_12+0x20>
		IRDER;
     9b2:	85 b1       	in	r24, 0x05	; 5
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     9b8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <lado>
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	19 f4       	brne	.+6      	; 0x9c6 <__vector_12+0x2e>
		IRIZQ;
     9c0:	85 b1       	in	r24, 0x05	; 5
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	85 b9       	out	0x05, r24	; 5
	}
}
     9c6:	8f 91       	pop	r24
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <ec_basico>:
	calcularDerivada_angulo(puntosAngulo);
	calcularIntegral(e);
	derivada = derivada_angulo;
	
	return( (multi*Kp)*e + Kd*derivada + s);
}
     9d2:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <estado>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	e8 5e       	subi	r30, 0xE8	; 232
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	01 90       	ld	r0, Z+
     9e2:	f0 81       	ld	r31, Z
     9e4:	e0 2d       	mov	r30, r0
     9e6:	09 95       	icall
     9e8:	08 95       	ret

000009ea <Actulizar_PID>:
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <FLAG_button_A_change>
     9fa:	88 23       	and	r24, r24
     9fc:	61 f0       	breq	.+24     	; 0xa16 <Actulizar_PID+0x2c>
     9fe:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <FLAG_habilitar_PID>
     a02:	88 23       	and	r24, r24
     a04:	19 f0       	breq	.+6      	; 0xa0c <Actulizar_PID+0x22>
     a06:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <FLAG_habilitar_PID>
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <Actulizar_PID+0x28>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <FLAG_habilitar_PID>
     a12:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <FLAG_button_A_change>
     a16:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__data_end>
     a1a:	88 23       	and	r24, r24
     a1c:	31 f0       	breq	.+12     	; 0xa2a <Actulizar_PID+0x40>
     a1e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <estado>
     a22:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
     a26:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__data_end>
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	73 e0       	ldi	r23, 0x03	; 3
     a2e:	87 e0       	ldi	r24, 0x07	; 7
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 5f 0c 	call	0x18be	; 0x18be <getAnguloEncoder>
     a36:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <indice_ec_error>
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 5e       	subi	r30, 0xEE	; 238
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	01 90       	ld	r0, Z+
     a46:	f0 81       	ld	r31, Z
     a48:	e0 2d       	mov	r30, r0
     a4a:	09 95       	icall
     a4c:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     a50:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     a54:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     a58:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e8       	ldi	r19, 0x80	; 128
     a60:	4b eb       	ldi	r20, 0xBB	; 187
     a62:	54 e4       	ldi	r21, 0x44	; 68
     a64:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	64 f4       	brge	.+24     	; 0xa84 <Actulizar_PID+0x9a>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e8       	ldi	r25, 0x80	; 128
     a70:	ab eb       	ldi	r26, 0xBB	; 187
     a72:	b4 e4       	ldi	r27, 0x44	; 68
     a74:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <vel>
     a78:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <vel+0x1>
     a7c:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <vel+0x2>
     a80:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <vel+0x3>
     a84:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <vel>
     a88:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <vel+0x1>
     a8c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <vel+0x2>
     a90:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <vel+0x3>
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e8       	ldi	r19, 0x80	; 128
     a98:	4b eb       	ldi	r20, 0xBB	; 187
     a9a:	54 ec       	ldi	r21, 0xC4	; 196
     a9c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     aa0:	88 23       	and	r24, r24
     aa2:	64 f4       	brge	.+24     	; 0xabc <Actulizar_PID+0xd2>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e8       	ldi	r25, 0x80	; 128
     aa8:	ab eb       	ldi	r26, 0xBB	; 187
     aaa:	b4 ec       	ldi	r27, 0xC4	; 196
     aac:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <vel>
     ab0:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <vel+0x1>
     ab4:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <vel+0x2>
     ab8:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <vel+0x3>
     abc:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <FLAG_habilitar_PID>
     ac0:	88 23       	and	r24, r24
     ac2:	09 f4       	brne	.+2      	; 0xac6 <Actulizar_PID+0xdc>
     ac4:	5a c0       	rjmp	.+180    	; 0xb7a <Actulizar_PID+0x190>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <noFueCero>
     acc:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <indice_ec_error>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	09 f0       	breq	.+2      	; 0xad6 <Actulizar_PID+0xec>
     ad4:	4e c0       	rjmp	.+156    	; 0xb72 <Actulizar_PID+0x188>
     ad6:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <enPosicion>
     ada:	81 11       	cpse	r24, r1
     adc:	f6 c0       	rjmp	.+492    	; 0xcca <Actulizar_PID+0x2e0>
     ade:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     ae2:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     ae6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     aea:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     aee:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <getSlideResistor>
     af2:	bc 01       	movw	r22, r24
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
     afc:	2d ec       	ldi	r18, 0xCD	; 205
     afe:	3c ec       	ldi	r19, 0xCC	; 204
     b00:	44 e5       	ldi	r20, 0x54	; 84
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     b08:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
     b0c:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
     b10:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
     b14:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
     b18:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     b1c:	ec 01       	movw	r28, r24
     b1e:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <posRef>
     b22:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <posRef+0x1>
     b26:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <posRef+0x2>
     b2a:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <posRef+0x3>
     b2e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__fixunssfsi>
     b32:	64 56       	subi	r22, 0x64	; 100
     b34:	71 09       	sbc	r23, r1
     b36:	6c 17       	cp	r22, r28
     b38:	7d 07       	cpc	r23, r29
     b3a:	08 f0       	brcs	.+2      	; 0xb3e <Actulizar_PID+0x154>
     b3c:	c6 c0       	rjmp	.+396    	; 0xcca <Actulizar_PID+0x2e0>
     b3e:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     b42:	ec 01       	movw	r28, r24
     b44:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <posRef>
     b48:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <posRef+0x1>
     b4c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <posRef+0x2>
     b50:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <posRef+0x3>
     b54:	0e 94 57 11 	call	0x22ae	; 0x22ae <__fixunssfsi>
     b58:	6c 59       	subi	r22, 0x9C	; 156
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	c6 17       	cp	r28, r22
     b5e:	d7 07       	cpc	r29, r23
     b60:	08 f0       	brcs	.+2      	; 0xb64 <Actulizar_PID+0x17a>
     b62:	b3 c0       	rjmp	.+358    	; 0xcca <Actulizar_PID+0x2e0>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <enPosicion>
     b6a:	8b b1       	in	r24, 0x0b	; 11
     b6c:	80 62       	ori	r24, 0x20	; 32
     b6e:	8b b9       	out	0x0b, r24	; 11
     b70:	ac c0       	rjmp	.+344    	; 0xcca <Actulizar_PID+0x2e0>
     b72:	8b b1       	in	r24, 0x0b	; 11
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8b b9       	out	0x0b, r24	; 11
     b78:	a8 c0       	rjmp	.+336    	; 0xcca <Actulizar_PID+0x2e0>
     b7a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <indice_ec_error>
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	09 f0       	breq	.+2      	; 0xb84 <Actulizar_PID+0x19a>
     b82:	98 c0       	rjmp	.+304    	; 0xcb4 <Actulizar_PID+0x2ca>
     b84:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <enPosicion>
     b88:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <getSlideResistor>
     b8c:	bc 01       	movw	r22, r24
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
     b96:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
     b9a:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
     b9e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
     ba2:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
     ba6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <getSlideResistor>
     baa:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
     bae:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
     bb2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <noFueCero>
     bb6:	81 11       	cpse	r24, r1
     bb8:	53 c0       	rjmp	.+166    	; 0xc60 <Actulizar_PID+0x276>
     bba:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
     bbe:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
     bc2:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
     bc6:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e8       	ldi	r19, 0x80	; 128
     bce:	42 ef       	ldi	r20, 0xF2	; 242
     bd0:	53 e4       	ldi	r21, 0x43	; 67
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     bda:	88 23       	and	r24, r24
     bdc:	bc f4       	brge	.+46     	; 0xc0c <Actulizar_PID+0x222>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e8       	ldi	r19, 0x80	; 128
     be2:	42 ef       	ldi	r20, 0xF2	; 242
     be4:	53 e4       	ldi	r21, 0x43	; 67
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	50 e4       	ldi	r21, 0x40	; 64
     bf6:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     bfa:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     bfe:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     c02:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     c06:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     c0a:	50 c0       	rjmp	.+160    	; 0xcac <Actulizar_PID+0x2c2>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 ec       	ldi	r19, 0xC0	; 192
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	54 e4       	ldi	r21, 0x44	; 68
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     c1c:	18 16       	cp	r1, r24
     c1e:	bc f4       	brge	.+46     	; 0xc4e <Actulizar_PID+0x264>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 ec       	ldi	r19, 0xC0	; 192
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	54 e4       	ldi	r21, 0x44	; 68
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	50 e4       	ldi	r21, 0x40	; 64
     c38:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     c3c:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
     c40:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
     c44:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
     c48:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
     c4c:	2f c0       	rjmp	.+94     	; 0xcac <Actulizar_PID+0x2c2>
     c4e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     c52:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     c56:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     c5a:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     c5e:	26 c0       	rjmp	.+76     	; 0xcac <Actulizar_PID+0x2c2>
     c60:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
     c64:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
     c68:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
     c6c:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e8       	ldi	r19, 0x80	; 128
     c74:	42 ef       	ldi	r20, 0xF2	; 242
     c76:	53 e4       	ldi	r21, 0x43	; 67
     c78:	c7 01       	movw	r24, r14
     c7a:	b6 01       	movw	r22, r12
     c7c:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     c80:	18 16       	cp	r1, r24
     c82:	64 f4       	brge	.+24     	; 0xc9c <Actulizar_PID+0x2b2>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 ec       	ldi	r19, 0xC0	; 192
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	54 e4       	ldi	r21, 0x44	; 68
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     c94:	88 23       	and	r24, r24
     c96:	14 f4       	brge	.+4      	; 0xc9c <Actulizar_PID+0x2b2>
     c98:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <noFueCero>
     c9c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     ca0:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     ca4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     ca8:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     cac:	8b b1       	in	r24, 0x0b	; 11
     cae:	8f 7d       	andi	r24, 0xDF	; 223
     cb0:	8b b9       	out	0x0b, r24	; 11
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <Actulizar_PID+0x2e0>
     cb4:	8b b1       	in	r24, 0x0b	; 11
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	8b b9       	out	0x0b, r24	; 11
     cba:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
     cbe:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
     cc2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
     cc6:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
     cca:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <vel>
     cce:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <vel+0x1>
     cd2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <vel+0x2>
     cd6:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <vel+0x3>
     cda:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
     cde:	cb 01       	movw	r24, r22
     ce0:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	08 95       	ret

00000cf2 <getDerivadaPID>:
     cf2:	60 91 15 03 	lds	r22, 0x0315	; 0x800315 <derivada>
     cf6:	70 91 16 03 	lds	r23, 0x0316	; 0x800316 <derivada+0x1>
     cfa:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <derivada+0x2>
     cfe:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <derivada+0x3>
     d02:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
     d06:	cb 01       	movw	r24, r22
     d08:	08 95       	ret

00000d0a <getIntegralPID>:
     d0a:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <s>
     d0e:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <s+0x1>
     d12:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <s+0x2>
     d16:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <s+0x3>
     d1a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
     d1e:	cb 01       	movw	r24, r22
     d20:	08 95       	ret

00000d22 <getValor>:
     d22:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <valor>
     d26:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <valor+0x1>
     d2a:	08 95       	ret

00000d2c <calcularIntegral>:
     d2c:	bc 01       	movw	r22, r24
     d2e:	99 0f       	add	r25, r25
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     d38:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <Ki>
     d3c:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <Ki+0x1>
     d40:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <Ki+0x2>
     d44:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <Ki+0x3>
     d48:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     d4c:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
     d50:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
     d54:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
     d58:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
     d5c:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     d60:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <s>
     d64:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <s+0x1>
     d68:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <s+0x2>
     d6c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <s+0x3>
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e8       	ldi	r19, 0x80	; 128
     d74:	4b eb       	ldi	r20, 0xBB	; 187
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	64 f4       	brge	.+24     	; 0xd98 <calcularIntegral+0x6c>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e8       	ldi	r25, 0x80	; 128
     d84:	ab eb       	ldi	r26, 0xBB	; 187
     d86:	b4 e4       	ldi	r27, 0x44	; 68
     d88:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <s>
     d8c:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <s+0x1>
     d90:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <s+0x2>
     d94:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <s+0x3>
     d98:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <s>
     d9c:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <s+0x1>
     da0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <s+0x2>
     da4:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <s+0x3>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e8       	ldi	r19, 0x80	; 128
     dac:	4b eb       	ldi	r20, 0xBB	; 187
     dae:	54 ec       	ldi	r21, 0xC4	; 196
     db0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     db4:	88 23       	and	r24, r24
     db6:	64 f4       	brge	.+24     	; 0xdd0 <calcularIntegral+0xa4>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e8       	ldi	r25, 0x80	; 128
     dbc:	ab eb       	ldi	r26, 0xBB	; 187
     dbe:	b4 ec       	ldi	r27, 0xC4	; 196
     dc0:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <s>
     dc4:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <s+0x1>
     dc8:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <s+0x2>
     dcc:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <s+0x3>
     dd0:	08 95       	ret

00000dd2 <ec_sin_sen>:
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <e>
     de2:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <e+0x1>
     de6:	be 01       	movw	r22, r28
     de8:	0d 2e       	mov	r0, r29
     dea:	00 0c       	add	r0, r0
     dec:	88 0b       	sbc	r24, r24
     dee:	99 0b       	sbc	r25, r25
     df0:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     df4:	23 ec       	ldi	r18, 0xC3	; 195
     df6:	35 ef       	ldi	r19, 0xF5	; 245
     df8:	48 ec       	ldi	r20, 0xC8	; 200
     dfa:	50 e4       	ldi	r21, 0x40	; 64
     dfc:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	48 e4       	ldi	r20, 0x48	; 72
     e06:	54 e4       	ldi	r21, 0x44	; 68
     e08:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
     e0c:	6b 01       	movw	r12, r22
     e0e:	7c 01       	movw	r14, r24
     e10:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <floate>
     e14:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <floate+0x1>
     e18:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <floate+0x2>
     e1c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <floate+0x3>
     e20:	d0 93 06 03 	sts	0x0306, r29	; 0x800306 <valor+0x1>
     e24:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <valor>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     e32:	18 16       	cp	r1, r24
     e34:	1c f5       	brge	.+70     	; 0xe7c <ec_sin_sen+0xaa>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 96 06 	call	0xd2c	; 0xd2c <calcularIntegral>
     e3e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <floate>
     e42:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <floate+0x1>
     e46:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <floate+0x2>
     e4a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <floate+0x3>
     e4e:	0e 94 b0 12 	call	0x2560	; 0x2560 <sqrt>
     e52:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
     e56:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
     e5a:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
     e5e:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
     e62:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     e66:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
     e6a:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
     e6e:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
     e72:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
     e76:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <ec_sin_sen+0x128>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	9c f5       	brge	.+102    	; 0xef4 <ec_sin_sen+0x122>
     e8e:	f7 fa       	bst	r15, 7
     e90:	f0 94       	com	r15
     e92:	f7 f8       	bld	r15, 7
     e94:	f0 94       	com	r15
     e96:	c0 92 25 03 	sts	0x0325, r12	; 0x800325 <floate>
     e9a:	d0 92 26 03 	sts	0x0326, r13	; 0x800326 <floate+0x1>
     e9e:	e0 92 27 03 	sts	0x0327, r14	; 0x800327 <floate+0x2>
     ea2:	f0 92 28 03 	sts	0x0328, r15	; 0x800328 <floate+0x3>
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	0e 94 96 06 	call	0xd2c	; 0xd2c <calcularIntegral>
     eae:	c0 90 1d 03 	lds	r12, 0x031D	; 0x80031d <s>
     eb2:	d0 90 1e 03 	lds	r13, 0x031E	; 0x80031e <s+0x1>
     eb6:	e0 90 1f 03 	lds	r14, 0x031F	; 0x80031f <s+0x2>
     eba:	f0 90 20 03 	lds	r15, 0x0320	; 0x800320 <s+0x3>
     ebe:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <floate>
     ec2:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <floate+0x1>
     ec6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <floate+0x2>
     eca:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <floate+0x3>
     ece:	0e 94 b0 12 	call	0x2560	; 0x2560 <sqrt>
     ed2:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
     ed6:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
     eda:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
     ede:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
     ee2:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	c7 01       	movw	r24, r14
     eec:	b6 01       	movw	r22, r12
     eee:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <ec_sin_sen+0x128>
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	cb 01       	movw	r24, r22
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	08 95       	ret

00000f08 <calcularDerivada_encoder>:
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <tiempoMuestra>
     f14:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <tiempoMuestra+0x1>
     f18:	68 34       	cpi	r22, 0x48	; 72
     f1a:	81 e7       	ldi	r24, 0x71	; 113
     f1c:	78 07       	cpc	r23, r24
     f1e:	7c f5       	brge	.+94     	; 0xf7e <calcularDerivada_encoder+0x76>
     f20:	89 e0       	ldi	r24, 0x09	; 9
     f22:	9d e3       	ldi	r25, 0x3D	; 61
     f24:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     f28:	07 2e       	mov	r0, r23
     f2a:	00 0c       	add	r0, r0
     f2c:	88 0b       	sbc	r24, r24
     f2e:	99 0b       	sbc	r25, r25
     f30:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	37 ed       	ldi	r19, 0xD7	; 215
     f38:	43 ea       	ldi	r20, 0xA3	; 163
     f3a:	5c e3       	ldi	r21, 0x3C	; 60
     f3c:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     f40:	6b 01       	movw	r12, r22
     f42:	7c 01       	movw	r14, r24
     f44:	28 e4       	ldi	r18, 0x48	; 72
     f46:	31 ee       	ldi	r19, 0xE1	; 225
     f48:	4a e7       	ldi	r20, 0x7A	; 122
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
     f50:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
     f54:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
     f58:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
     f5c:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c7 01       	movw	r24, r14
     f66:	b6 01       	movw	r22, r12
     f68:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     f6c:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <derivada_encoder>
     f70:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <derivada_encoder+0x1>
     f74:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <derivada_encoder+0x2>
     f78:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <derivada_encoder+0x3>
     f7c:	1b c0       	rjmp	.+54     	; 0xfb4 <calcularDerivada_encoder+0xac>
     f7e:	28 e4       	ldi	r18, 0x48	; 72
     f80:	31 ee       	ldi	r19, 0xE1	; 225
     f82:	4a e7       	ldi	r20, 0x7A	; 122
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
     f8a:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
     f8e:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
     f92:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
     f96:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	a9 01       	movw	r20, r18
     fa0:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
     fa4:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <derivada_encoder>
     fa8:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <derivada_encoder+0x1>
     fac:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <derivada_encoder+0x2>
     fb0:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <derivada_encoder+0x3>
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	08 95       	ret

00000fbe <setKi>:
     fbe:	60 93 2d 03 	sts	0x032D, r22	; 0x80032d <Ki>
     fc2:	70 93 2e 03 	sts	0x032E, r23	; 0x80032e <Ki+0x1>
     fc6:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <Ki+0x2>
     fca:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <Ki+0x3>
     fce:	08 95       	ret

00000fd0 <setKd>:
     fd0:	60 93 31 03 	sts	0x0331, r22	; 0x800331 <Kd>
     fd4:	70 93 32 03 	sts	0x0332, r23	; 0x800332 <Kd+0x1>
     fd8:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <Kd+0x2>
     fdc:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <Kd+0x3>
     fe0:	08 95       	ret

00000fe2 <setKp>:
     fe2:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <Kp>
     fe6:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <Kp+0x1>
     fea:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <Kp+0x2>
     fee:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <Kp+0x3>
     ff2:	08 95       	ret

00000ff4 <setIndice_ec_error>:
     ff4:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <indice_ec_error>
     ff8:	98 17       	cp	r25, r24
     ffa:	51 f0       	breq	.+20     	; 0x1010 <setIndice_ec_error+0x1c>
     ffc:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <indice_ec_error>
    1000:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <s>
    1004:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <s+0x1>
    1008:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <s+0x2>
    100c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <s+0x3>
    1010:	08 95       	ret

00001012 <calcularSen>:
    1012:	60 e2       	ldi	r22, 0x20	; 32
    1014:	73 e0       	ldi	r23, 0x03	; 3
    1016:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    101a:	99 23       	and	r25, r25
    101c:	14 f4       	brge	.+4      	; 0x1022 <calcularSen+0x10>
    101e:	80 5e       	subi	r24, 0xE0	; 224
    1020:	9c 4f       	sbci	r25, 0xFC	; 252
    1022:	80 39       	cpi	r24, 0x90	; 144
    1024:	21 e0       	ldi	r18, 0x01	; 1
    1026:	92 07       	cpc	r25, r18
    1028:	dc f0       	brlt	.+54     	; 0x1060 <calcularSen+0x4e>
    102a:	60 e9       	ldi	r22, 0x90	; 144
    102c:	71 e0       	ldi	r23, 0x01	; 1
    102e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1032:	89 3c       	cpi	r24, 0xC9	; 201
    1034:	91 05       	cpc	r25, r1
    1036:	4c f0       	brlt	.+18     	; 0x104a <calcularSen+0x38>
    1038:	28 ec       	ldi	r18, 0xC8	; 200
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1042:	a9 01       	movw	r20, r18
    1044:	48 1b       	sub	r20, r24
    1046:	59 0b       	sbc	r21, r25
    1048:	ca 01       	movw	r24, r20
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	fc 01       	movw	r30, r24
    1050:	e2 5e       	subi	r30, 0xE2	; 226
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	91 95       	neg	r25
    105a:	81 95       	neg	r24
    105c:	91 09       	sbc	r25, r1
    105e:	08 95       	ret
    1060:	60 e9       	ldi	r22, 0x90	; 144
    1062:	71 e0       	ldi	r23, 0x01	; 1
    1064:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1068:	89 3c       	cpi	r24, 0xC9	; 201
    106a:	91 05       	cpc	r25, r1
    106c:	4c f0       	brlt	.+18     	; 0x1080 <calcularSen+0x6e>
    106e:	28 ec       	ldi	r18, 0xC8	; 200
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1078:	a9 01       	movw	r20, r18
    107a:	48 1b       	sub	r20, r24
    107c:	59 0b       	sbc	r21, r25
    107e:	ca 01       	movw	r24, r20
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	fc 01       	movw	r30, r24
    1086:	e2 5e       	subi	r30, 0xE2	; 226
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	08 95       	ret

00001090 <frenoAbajo>:
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    10a0:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    10a4:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <puntosAngulo+0x1>
    10a8:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <puntosAngulo>
    10ac:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    10b0:	bc 01       	movw	r22, r24
    10b2:	43 96       	adiw	r24, 0x13	; 19
    10b4:	87 97       	sbiw	r24, 0x27	; 39
    10b6:	70 f4       	brcc	.+28     	; 0x10d4 <frenoAbajo+0x44>
    10b8:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <countStop>
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <countStop>
    10c2:	83 33       	cpi	r24, 0x33	; 51
    10c4:	48 f0       	brcs	.+18     	; 0x10d8 <frenoAbajo+0x48>
    10c6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <countStop>
    10ca:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
    10ce:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <estado>
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <frenoAbajo+0x48>
    10d4:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <countStop>
    10d8:	07 2e       	mov	r0, r23
    10da:	00 0c       	add	r0, r0
    10dc:	88 0b       	sbc	r24, r24
    10de:	99 0b       	sbc	r25, r25
    10e0:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 ed       	ldi	r20, 0xD0	; 208
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    10f0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
    10f4:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    10f8:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
    10fc:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1100:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <e>
    1104:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <e+0x1>
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    1110:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e6       	ldi	r25, 0x60	; 96
    1118:	aa ee       	ldi	r26, 0xEA	; 234
    111a:	b5 e4       	ldi	r27, 0x45	; 69
    111c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <posRef>
    1120:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <posRef+0x1>
    1124:	a0 93 1b 03 	sts	0x031B, r26	; 0x80031b <posRef+0x2>
    1128:	b0 93 1c 03 	sts	0x031C, r27	; 0x80031c <posRef+0x3>
    112c:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1130:	bc 01       	movw	r22, r24
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e6       	ldi	r23, 0x60	; 96
    1142:	8a ee       	ldi	r24, 0xEA	; 234
    1144:	95 e4       	ldi	r25, 0x45	; 69
    1146:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
    114a:	6b 01       	movw	r12, r22
    114c:	7c 01       	movw	r14, r24
    114e:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1152:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    1156:	07 2e       	mov	r0, r23
    1158:	00 0c       	add	r0, r0
    115a:	88 0b       	sbc	r24, r24
    115c:	99 0b       	sbc	r25, r25
    115e:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1162:	a7 01       	movw	r20, r14
    1164:	96 01       	movw	r18, r12
    1166:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    116a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
    116e:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    1172:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
    1176:	00 91 09 03 	lds	r16, 0x0309	; 0x800309 <derivada_pos>
    117a:	10 91 0a 03 	lds	r17, 0x030A	; 0x80030a <derivada_pos+0x1>
    117e:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <derivada_pos+0x2>
    1182:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <derivada_pos+0x3>
    1186:	00 93 15 03 	sts	0x0315, r16	; 0x800315 <derivada>
    118a:	10 93 16 03 	sts	0x0316, r17	; 0x800316 <derivada+0x1>
    118e:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <derivada+0x2>
    1192:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <derivada+0x3>
    1196:	cb 01       	movw	r24, r22
    1198:	0e 94 96 06 	call	0xd2c	; 0xd2c <calcularIntegral>
    119c:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    11a0:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    11a4:	07 2e       	mov	r0, r23
    11a6:	00 0c       	add	r0, r0
    11a8:	88 0b       	sbc	r24, r24
    11aa:	99 0b       	sbc	r25, r25
    11ac:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    11b0:	23 e3       	ldi	r18, 0x33	; 51
    11b2:	33 e3       	ldi	r19, 0x33	; 51
    11b4:	43 e3       	ldi	r20, 0x33	; 51
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	08 95       	ret

000011ca <calcularDerivada_angulo>:
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
    11d8:	0e 94 84 07 	call	0xf08	; 0xf08 <calcularDerivada_encoder>
    11dc:	ce 01       	movw	r24, r28
    11de:	88 53       	subi	r24, 0x38	; 56
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    11e6:	ec 01       	movw	r28, r24
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	54 e4       	ldi	r21, 0x44	; 68
    11f0:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <derivada_encoder>
    11f4:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <derivada_encoder+0x1>
    11f8:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <derivada_encoder+0x2>
    11fc:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <derivada_encoder+0x3>
    1200:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    1204:	6b 01       	movw	r12, r22
    1206:	7c 01       	movw	r14, r24
    1208:	be 01       	movw	r22, r28
    120a:	dd 0f       	add	r29, r29
    120c:	88 0b       	sbc	r24, r24
    120e:	99 0b       	sbc	r25, r25
    1210:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1214:	a7 01       	movw	r20, r14
    1216:	96 01       	movw	r18, r12
    1218:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    121c:	2a e1       	ldi	r18, 0x1A	; 26
    121e:	34 e3       	ldi	r19, 0x34	; 52
    1220:	4c e4       	ldi	r20, 0x4C	; 76
    1222:	52 e4       	ldi	r21, 0x42	; 66
    1224:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1228:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <derivada_angulo>
    122c:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <derivada_angulo+0x1>
    1230:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <derivada_angulo+0x2>
    1234:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <derivada_angulo+0x3>
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	08 95       	ret

00001246 <levantar>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <e>
    1252:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <e+0x1>
    1256:	d0 93 19 05 	sts	0x0519, r29	; 0x800519 <puntosAngulo+0x1>
    125a:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <puntosAngulo>
    125e:	ce 01       	movw	r24, r28
    1260:	60 e2       	ldi	r22, 0x20	; 32
    1262:	73 e0       	ldi	r23, 0x03	; 3
    1264:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1268:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    126c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1270:	99 23       	and	r25, r25
    1272:	34 f4       	brge	.+12     	; 0x1280 <levantar+0x3a>
    1274:	80 5e       	subi	r24, 0xE0	; 224
    1276:	9c 4f       	sbci	r25, 0xFC	; 252
    1278:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    127c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1280:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <fueMayor100>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	09 f0       	breq	.+2      	; 0x128a <levantar+0x44>
    1288:	44 c0       	rjmp	.+136    	; 0x1312 <levantar+0xcc>
    128a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    128e:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1292:	85 57       	subi	r24, 0x75	; 117
    1294:	91 40       	sbci	r25, 0x01	; 1
    1296:	c7 97       	sbiw	r24, 0x37	; 55
    1298:	68 f4       	brcc	.+26     	; 0x12b4 <levantar+0x6e>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <estado>
    12a0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <s>
    12a4:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <s+0x1>
    12a8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <s+0x2>
    12ac:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <s+0x3>
    12b0:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <fueMayor100>
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <calcularDerivada_angulo>
    12ba:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <derivada_angulo>
    12be:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <derivada_angulo+0x1>
    12c2:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <derivada_angulo+0x2>
    12c6:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <derivada_angulo+0x3>
    12ca:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <derivada>
    12ce:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <derivada+0x1>
    12d2:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <derivada+0x2>
    12d6:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <derivada+0x3>
    12da:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    12de:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    12e2:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    12e6:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    12ea:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    12ee:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    12f2:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    12f6:	bc 01       	movw	r22, r24
    12f8:	99 0f       	add	r25, r25
    12fa:	88 0b       	sbc	r24, r24
    12fc:	99 0b       	sbc	r25, r25
    12fe:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1302:	2d ec       	ldi	r18, 0xCD	; 205
    1304:	3c ec       	ldi	r19, 0xCC	; 204
    1306:	4c e4       	ldi	r20, 0x4C	; 76
    1308:	5f eb       	ldi	r21, 0xBF	; 191
    130a:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    130e:	8b 01       	movw	r16, r22
    1310:	9c 01       	movw	r18, r24
    1312:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <fueMayor100>
    1316:	81 11       	cpse	r24, r1
    1318:	34 c0       	rjmp	.+104    	; 0x1382 <levantar+0x13c>
    131a:	ce 01       	movw	r24, r28
    131c:	dd 23       	and	r29, r29
    131e:	24 f4       	brge	.+8      	; 0x1328 <levantar+0xe2>
    1320:	88 27       	eor	r24, r24
    1322:	99 27       	eor	r25, r25
    1324:	8c 1b       	sub	r24, r28
    1326:	9d 0b       	sbc	r25, r29
    1328:	80 57       	subi	r24, 0x70	; 112
    132a:	9e 4f       	sbci	r25, 0xFE	; 254
    132c:	60 e2       	ldi	r22, 0x20	; 32
    132e:	73 e0       	ldi	r23, 0x03	; 3
    1330:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1334:	85 3f       	cpi	r24, 0xF5	; 245
    1336:	91 40       	sbci	r25, 0x01	; 1
    1338:	1c f0       	brlt	.+6      	; 0x1340 <levantar+0xfa>
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <fueMayor100>
    1340:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <getTiempoSEOS>
    1344:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
    1348:	28 e4       	ldi	r18, 0x48	; 72
    134a:	31 ee       	ldi	r19, 0xE1	; 225
    134c:	4a e1       	ldi	r20, 0x1A	; 26
    134e:	50 e4       	ldi	r21, 0x40	; 64
    1350:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    1354:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
    1358:	cb 01       	movw	r24, r22
    135a:	60 e2       	ldi	r22, 0x20	; 32
    135c:	73 e0       	ldi	r23, 0x03	; 3
    135e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1362:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    1366:	bc 01       	movw	r22, r24
    1368:	99 0f       	add	r25, r25
    136a:	88 0b       	sbc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 ec       	ldi	r20, 0xC0	; 192
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    137e:	8b 01       	movw	r16, r22
    1380:	9c 01       	movw	r18, r24
    1382:	c9 01       	movw	r24, r18
    1384:	b8 01       	movw	r22, r16
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <superArriba>:
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <e>
    139c:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <e+0x1>
    13a0:	30 93 19 05 	sts	0x0519, r19	; 0x800519 <puntosAngulo+0x1>
    13a4:	20 93 18 05 	sts	0x0518, r18	; 0x800518 <puntosAngulo>
    13a8:	c9 01       	movw	r24, r18
    13aa:	60 e2       	ldi	r22, 0x20	; 32
    13ac:	73 e0       	ldi	r23, 0x03	; 3
    13ae:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    13b2:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    13b6:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    13ba:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    13be:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
    13c2:	99 23       	and	r25, r25
    13c4:	34 f4       	brge	.+12     	; 0x13d2 <superArriba+0x42>
    13c6:	80 5e       	subi	r24, 0xE0	; 224
    13c8:	9c 4f       	sbci	r25, 0xFC	; 252
    13ca:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    13ce:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    13d2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    13d6:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    13da:	ac 01       	movw	r20, r24
    13dc:	4f 5f       	subi	r20, 0xFF	; 255
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	50 93 08 03 	sts	0x0308, r21	; 0x800308 <e+0x1>
    13e4:	40 93 07 03 	sts	0x0307, r20	; 0x800307 <e>
    13e8:	8e 55       	subi	r24, 0x5E	; 94
    13ea:	91 40       	sbci	r25, 0x01	; 1
    13ec:	83 36       	cpi	r24, 0x63	; 99
    13ee:	91 05       	cpc	r25, r1
    13f0:	58 f0       	brcs	.+22     	; 0x1408 <superArriba+0x78>
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <estado>
    13f8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel>
    13fc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x1>
    1400:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x2>
    1404:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <vel+0x3>
    1408:	c9 01       	movw	r24, r18
    140a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <calcularDerivada_angulo>
    140e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <derivada_angulo>
    1412:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <derivada_angulo+0x1>
    1416:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <derivada_angulo+0x2>
    141a:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <derivada_angulo+0x3>
    141e:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <derivada>
    1422:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <derivada+0x1>
    1426:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <derivada+0x2>
    142a:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <derivada+0x3>
    142e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    1432:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    1436:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    143a:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    143e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
    1442:	0e 94 96 06 	call	0xd2c	; 0xd2c <calcularIntegral>
    1446:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    144a:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    144e:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <valor+0x1>
    1452:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <valor>
    1456:	07 2e       	mov	r0, r23
    1458:	00 0c       	add	r0, r0
    145a:	88 0b       	sbc	r24, r24
    145c:	99 0b       	sbc	r25, r25
    145e:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1462:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
    1466:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
    146a:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
    146e:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
    1472:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1476:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
    147a:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
    147e:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
    1482:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
    1486:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    148a:	6b 01       	movw	r12, r22
    148c:	7c 01       	movw	r14, r24
    148e:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <derivada>
    1492:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <derivada+0x1>
    1496:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <derivada+0x2>
    149a:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <derivada+0x3>
    149e:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <Kd>
    14a2:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <Kd+0x1>
    14a6:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Kd+0x2>
    14aa:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <Kd+0x3>
    14ae:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	c7 01       	movw	r24, r14
    14b8:	b6 01       	movw	r22, r12
    14ba:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    14be:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <vel>
    14c2:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <vel+0x1>
    14c6:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <vel+0x2>
    14ca:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <vel+0x3>
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	df 90       	pop	r13
    14d4:	cf 90       	pop	r12
    14d6:	08 95       	ret

000014d8 <calcularDerivada_pos>:
		 }
	 }
	//return( Kp*e + Kd*derivada + Ki*s);
}

void calcularDerivada_pos(int16_t e){
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
    14f0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <calcularDerivada_angulo>
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    14f4:	00 91 21 03 	lds	r16, 0x0321	; 0x800321 <vel>
    14f8:	10 91 22 03 	lds	r17, 0x0322	; 0x800322 <vel+0x1>
    14fc:	d0 91 23 03 	lds	r29, 0x0323	; 0x800323 <vel+0x2>
    1500:	c0 91 24 03 	lds	r28, 0x0324	; 0x800324 <vel+0x3>
	if (vel>1700)
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e8       	ldi	r19, 0x80	; 128
    1508:	44 ed       	ldi	r20, 0xD4	; 212
    150a:	54 e4       	ldi	r21, 0x44	; 68
    150c:	60 2f       	mov	r22, r16
    150e:	71 2f       	mov	r23, r17
    1510:	8d 2f       	mov	r24, r29
    1512:	9c 2f       	mov	r25, r28
    1514:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
    1518:	18 16       	cp	r1, r24
    151a:	2c f0       	brlt	.+10     	; 0x1526 <calcularDerivada_pos+0x4e>
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    151c:	c0 2e       	mov	r12, r16
    151e:	d1 2e       	mov	r13, r17
    1520:	ed 2e       	mov	r14, r29
    1522:	fc 2e       	mov	r15, r28
    1524:	0c c0       	rjmp	.+24     	; 0x153e <calcularDerivada_pos+0x66>
	if (vel>1700)
	{
		velAxi=1700;
    1526:	c1 2c       	mov	r12, r1
    1528:	68 94       	set
    152a:	dd 24       	eor	r13, r13
    152c:	d7 f8       	bld	r13, 7
    152e:	0f 2e       	mov	r0, r31
    1530:	f4 ed       	ldi	r31, 0xD4	; 212
    1532:	ef 2e       	mov	r14, r31
    1534:	f0 2d       	mov	r31, r0
    1536:	0f 2e       	mov	r0, r31
    1538:	f4 e4       	ldi	r31, 0x44	; 68
    153a:	ff 2e       	mov	r15, r31
    153c:	f0 2d       	mov	r31, r0
	}
	if (vel<-1700)
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e8       	ldi	r19, 0x80	; 128
    1542:	44 ed       	ldi	r20, 0xD4	; 212
    1544:	54 ec       	ldi	r21, 0xC4	; 196
    1546:	60 2f       	mov	r22, r16
    1548:	71 2f       	mov	r23, r17
    154a:	8d 2f       	mov	r24, r29
    154c:	9c 2f       	mov	r25, r28
    154e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__cmpsf2>
    1552:	88 23       	and	r24, r24
    1554:	64 f4       	brge	.+24     	; 0x156e <calcularDerivada_pos+0x96>
	{
		velAxi=-1700;
    1556:	c1 2c       	mov	r12, r1
    1558:	68 94       	set
    155a:	dd 24       	eor	r13, r13
    155c:	d7 f8       	bld	r13, 7
    155e:	0f 2e       	mov	r0, r31
    1560:	f4 ed       	ldi	r31, 0xD4	; 212
    1562:	ef 2e       	mov	r14, r31
    1564:	f0 2d       	mov	r31, r0
    1566:	0f 2e       	mov	r0, r31
    1568:	f4 ec       	ldi	r31, 0xC4	; 196
    156a:	ff 2e       	mov	r15, r31
    156c:	f0 2d       	mov	r31, r0
	}
	derivada_pos = derivada_angulo - velAxi*(8.0645);
    156e:	80 90 0d 03 	lds	r8, 0x030D	; 0x80030d <derivada_angulo>
    1572:	90 90 0e 03 	lds	r9, 0x030E	; 0x80030e <derivada_angulo+0x1>
    1576:	a0 90 0f 03 	lds	r10, 0x030F	; 0x80030f <derivada_angulo+0x2>
    157a:	b0 90 10 03 	lds	r11, 0x0310	; 0x800310 <derivada_angulo+0x3>
    157e:	21 e3       	ldi	r18, 0x31	; 49
    1580:	38 e0       	ldi	r19, 0x08	; 8
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	6c 2d       	mov	r22, r12
    1588:	7d 2d       	mov	r23, r13
    158a:	8e 2d       	mov	r24, r14
    158c:	9f 2d       	mov	r25, r15
    158e:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	c5 01       	movw	r24, r10
    1598:	b4 01       	movw	r22, r8
    159a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
    159e:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <derivada_pos>
    15a2:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <derivada_pos+0x1>
    15a6:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <derivada_pos+0x2>
    15aa:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <derivada_pos+0x3>
	//int16_t calculoAxi = e - eant;
	//eant = e;
	//derivada = (float)(0.02)*(float)calculoAxi+(float)(0.98)*derivada;
}
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	bf 90       	pop	r11
    15c0:	af 90       	pop	r10
    15c2:	9f 90       	pop	r9
    15c4:	8f 90       	pop	r8
    15c6:	08 95       	ret

000015c8 <ec_pos>:


float ec_pos(){
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
	puntosAngulo = e;
    15d0:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <e>
    15d4:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <e+0x1>
    15d8:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <puntosAngulo+0x1>
    15dc:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <puntosAngulo>
	e=calcularSen(e);
    15e0:	0e 94 09 08 	call	0x1012	; 0x1012 <calcularSen>
    15e4:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <e+0x1>
    15e8:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
    15ec:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <getSlideResistor>
    15f0:	bc 01       	movw	r22, r24
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
    15fa:	2d ec       	ldi	r18, 0xCD	; 205
    15fc:	3c ec       	ldi	r19, 0xCC	; 204
    15fe:	44 e5       	ldi	r20, 0x54	; 84
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1606:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <posRef>
    160a:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <posRef+0x1>
    160e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <posRef+0x2>
    1612:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;	//el lagro es: 20
    1616:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    161a:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    161e:	07 2e       	mov	r0, r23
    1620:	00 0c       	add	r0, r0
    1622:	88 0b       	sbc	r24, r24
    1624:	99 0b       	sbc	r25, r25
    1626:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 ed       	ldi	r20, 0xD0	; 208
    1630:	50 e4       	ldi	r21, 0x40	; 64
    1632:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1636:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
    163a:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    163e:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
	valor = getPos()+e;
    1642:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    1646:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <e>
    164a:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <e+0x1>
    164e:	82 0f       	add	r24, r18
    1650:	93 1f       	adc	r25, r19
    1652:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <valor+0x1>
    1656:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	
	calcularDerivada_pos(puntosAngulo);		//por ahora dejo fuera la pos
    165a:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <puntosAngulo>
    165e:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <puntosAngulo+0x1>
    1662:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <calcularDerivada_pos>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
    1666:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <posRef>
    166a:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <posRef+0x1>
    166e:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <posRef+0x2>
    1672:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <posRef+0x3>
    1676:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    167a:	bc 01       	movw	r22, r24
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 86 11 	call	0x230c	; 0x230c <__floatunsisf>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	c7 01       	movw	r24, r14
    168a:	b6 01       	movw	r22, r12
    168c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__subsf3>
    1690:	6b 01       	movw	r12, r22
    1692:	7c 01       	movw	r14, r24
    1694:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    1698:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    169c:	07 2e       	mov	r0, r23
    169e:	00 0c       	add	r0, r0
    16a0:	88 0b       	sbc	r24, r24
    16a2:	99 0b       	sbc	r25, r25
    16a4:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    16a8:	a7 01       	movw	r20, r14
    16aa:	96 01       	movw	r18, r12
    16ac:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    16b0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixsfsi>
    16b4:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <e+0x1>
    16b8:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	derivada = derivada_pos;
    16bc:	c0 90 09 03 	lds	r12, 0x0309	; 0x800309 <derivada_pos>
    16c0:	d0 90 0a 03 	lds	r13, 0x030A	; 0x80030a <derivada_pos+0x1>
    16c4:	e0 90 0b 03 	lds	r14, 0x030B	; 0x80030b <derivada_pos+0x2>
    16c8:	f0 90 0c 03 	lds	r15, 0x030C	; 0x80030c <derivada_pos+0x3>
    16cc:	c0 92 15 03 	sts	0x0315, r12	; 0x800315 <derivada>
    16d0:	d0 92 16 03 	sts	0x0316, r13	; 0x800316 <derivada+0x1>
    16d4:	e0 92 17 03 	sts	0x0317, r14	; 0x800317 <derivada+0x2>
    16d8:	f0 92 18 03 	sts	0x0318, r15	; 0x800318 <derivada+0x3>
	
	calcularIntegral(e);
    16dc:	cb 01       	movw	r24, r22
    16de:	0e 94 96 06 	call	0xd2c	; 0xd2c <calcularIntegral>
	return( Kp*e + Kd*derivada + s );	//0.3   0.07
    16e2:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <e>
    16e6:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <e+0x1>
    16ea:	07 2e       	mov	r0, r23
    16ec:	00 0c       	add	r0, r0
    16ee:	88 0b       	sbc	r24, r24
    16f0:	99 0b       	sbc	r25, r25
    16f2:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    16f6:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <Kp>
    16fa:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <Kp+0x1>
    16fe:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <Kp+0x2>
    1702:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <Kp+0x3>
    1706:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    170a:	6b 01       	movw	r12, r22
    170c:	7c 01       	movw	r14, r24
    170e:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <derivada>
    1712:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <derivada+0x1>
    1716:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <derivada+0x2>
    171a:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <derivada+0x3>
    171e:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <Kd>
    1722:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <Kd+0x1>
    1726:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Kd+0x2>
    172a:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <Kd+0x3>
    172e:	0e 94 3d 12 	call	0x247a	; 0x247a <__mulsf3>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    173e:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s>
    1742:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s+0x1>
    1746:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s+0x2>
    174a:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s+0x3>
    174e:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

0000175c <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
    175c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    1760:	88 23       	and	r24, r24
    1762:	91 f0       	breq	.+36     	; 0x1788 <f00+0x2c>
		angulo--;
    1764:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1768:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    1772:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    177e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroUno;
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if (IZQ){
    1788:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    178c:	88 23       	and	r24, r24
    178e:	89 f0       	breq	.+34     	; 0x17b2 <f00+0x56>
		angulo++;
    1790:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1794:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    179e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    17aa:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoCero;
    17ae:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    17b2:	08 95       	ret

000017b4 <f10>:
	}
}
void f10(void){
	if(DER){
    17b4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    17b8:	88 23       	and	r24, r24
    17ba:	91 f0       	breq	.+36     	; 0x17e0 <f10+0x2c>
		angulo++;
    17bc:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    17c0:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    17ca:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    17d6:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoUno;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if(!IZQ){
    17e0:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    17e4:	81 11       	cpse	r24, r1
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <f10+0x56>
		angulo--;
    17e8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    17ec:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    17f6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    1802:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroCero;
    1806:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
    180a:	08 95       	ret

0000180c <f01>:
	}
}
void f01(void){
	if(!DER){
    180c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    1810:	81 11       	cpse	r24, r1
    1812:	11 c0       	rjmp	.+34     	; 0x1836 <f01+0x2a>
		angulo++;
    1814:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1818:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    1822:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    182e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroCero;
    1832:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
	}
	if(IZQ){
    1836:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    183a:	88 23       	and	r24, r24
    183c:	91 f0       	breq	.+36     	; 0x1862 <f01+0x56>
		angulo--;
    183e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1842:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    184c:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    1858:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoUno;
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    1862:	08 95       	ret

00001864 <f11>:
	}
}
void f11(void){
	if(!DER){
    1864:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    1868:	81 11       	cpse	r24, r1
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <f11+0x2c>
		angulo--;
    186c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    1870:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    187a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=-1;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	9f ef       	ldi	r25, 0xFF	; 255
    1882:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    1886:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = UnoCero;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	}
	if(!IZQ){
    1890:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    1894:	81 11       	cpse	r24, r1
    1896:	12 c0       	rjmp	.+36     	; 0x18bc <f11+0x58>
		angulo++;
    1898:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <angulo>
    189c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <angulo+0x1>
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <angulo+0x1>
    18a6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <angulo>
		anguloANt=1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <anguloANt+0x1>
    18b2:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <anguloANt>
		estado = CeroUno;
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
    18bc:	08 95       	ret

000018be <getAnguloEncoder>:
//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
	*anguloOUT = angulo;
    18be:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <angulo>
    18c2:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <angulo+0x1>
    18c6:	fc 01       	movw	r30, r24
    18c8:	31 83       	std	Z+1, r19	; 0x01
    18ca:	20 83       	st	Z, r18
	if(tiempoMuestraOUT!=0){
    18cc:	61 15       	cp	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <getAnguloEncoder+0x16>
    18d2:	65 c0       	rjmp	.+202    	; 0x199e <getAnguloEncoder+0xe0>
		*tiempoMuestraOUT = anguloANt*(derivate_D + derivate_I)/2;
    18d4:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <derivate_D>
    18d8:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <derivate_D+0x1>
    18dc:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_I>
    18e0:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_I+0x1>
    18e4:	28 0f       	add	r18, r24
    18e6:	39 1f       	adc	r19, r25
    18e8:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <anguloANt>
    18ec:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <anguloANt+0x1>
    18f0:	24 9f       	mul	r18, r20
    18f2:	c0 01       	movw	r24, r0
    18f4:	25 9f       	mul	r18, r21
    18f6:	90 0d       	add	r25, r0
    18f8:	34 9f       	mul	r19, r20
    18fa:	90 0d       	add	r25, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	99 23       	and	r25, r25
    1900:	0c f4       	brge	.+2      	; 0x1904 <getAnguloEncoder+0x46>
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	95 95       	asr	r25
    1906:	87 95       	ror	r24
    1908:	fb 01       	movw	r30, r22
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
		
		if(*tiempoMuestraOUT == axiAnt){
    190e:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <axiAnt>
    1912:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <axiAnt+0x1>
    1916:	82 17       	cp	r24, r18
    1918:	93 07       	cpc	r25, r19
    191a:	39 f5       	brne	.+78     	; 0x196a <getAnguloEncoder+0xac>
			if(derivate_counter_D > derivate_counter_I){
    191c:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <derivate_counter_D>
    1920:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1924:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1928:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    192c:	82 17       	cp	r24, r18
    192e:	93 07       	cpc	r25, r19
    1930:	74 f4       	brge	.+28     	; 0x194e <getAnguloEncoder+0x90>
				*tiempoMuestraOUT = anguloANt*derivate_counter_D;	
    1932:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <derivate_counter_D>
    1936:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    193a:	42 9f       	mul	r20, r18
    193c:	c0 01       	movw	r24, r0
    193e:	43 9f       	mul	r20, r19
    1940:	90 0d       	add	r25, r0
    1942:	52 9f       	mul	r21, r18
    1944:	90 0d       	add	r25, r0
    1946:	11 24       	eor	r1, r1
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	0e c0       	rjmp	.+28     	; 0x196a <getAnguloEncoder+0xac>
			}else{
				*tiempoMuestraOUT = anguloANt*derivate_counter_I;	
    194e:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <derivate_counter_I>
    1952:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1956:	42 9f       	mul	r20, r18
    1958:	c0 01       	movw	r24, r0
    195a:	43 9f       	mul	r20, r19
    195c:	90 0d       	add	r25, r0
    195e:	52 9f       	mul	r21, r18
    1960:	90 0d       	add	r25, r0
    1962:	11 24       	eor	r1, r1
    1964:	fb 01       	movw	r30, r22
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
			}
		}
		
		axiAnt= anguloANt*(derivate_D + derivate_I)/2;;
    196a:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <derivate_D>
    196e:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <derivate_D+0x1>
    1972:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_I>
    1976:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_I+0x1>
    197a:	28 0f       	add	r18, r24
    197c:	39 1f       	adc	r19, r25
    197e:	42 9f       	mul	r20, r18
    1980:	c0 01       	movw	r24, r0
    1982:	43 9f       	mul	r20, r19
    1984:	90 0d       	add	r25, r0
    1986:	52 9f       	mul	r21, r18
    1988:	90 0d       	add	r25, r0
    198a:	11 24       	eor	r1, r1
    198c:	99 23       	and	r25, r25
    198e:	0c f4       	brge	.+2      	; 0x1992 <getAnguloEncoder+0xd4>
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	95 95       	asr	r25
    1994:	87 95       	ror	r24
    1996:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <axiAnt+0x1>
    199a:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <axiAnt>
    199e:	08 95       	ret

000019a0 <set_origen>:
		signoAnt= anguloANt;
	}
}

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    19a0:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <DER>
    19a4:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <IZQ>
    19a8:	89 23       	and	r24, r25
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <set_origen+0x12>
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    19b2:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <DER>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	22 23       	and	r18, r18
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <set_origen+0x22>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <IZQ>
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	82 23       	and	r24, r18
    19ca:	93 23       	and	r25, r19
    19cc:	89 2b       	or	r24, r25
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <set_origen+0x36>
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    19d6:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <DER>
    19da:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <IZQ>
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	33 23       	and	r19, r19
    19e4:	11 f0       	breq	.+4      	; 0x19ea <set_origen+0x4a>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	82 23       	and	r24, r18
    19ee:	93 23       	and	r25, r19
    19f0:	89 2b       	or	r24, r25
    19f2:	19 f0       	breq	.+6      	; 0x19fa <set_origen+0x5a>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    19fa:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <DER>
    19fe:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <IZQ>
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	81 11       	cpse	r24, r1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	21 11       	cpse	r18, r1
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	89 23       	and	r24, r25
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <set_origen+0x76>
    1a12:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <estado>
    1a16:	2f ef       	ldi	r18, 0xFF	; 255
    1a18:	80 e7       	ldi	r24, 0x70	; 112
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	21 50       	subi	r18, 0x01	; 1
    1a1e:	80 40       	sbci	r24, 0x00	; 0
    1a20:	90 40       	sbci	r25, 0x00	; 0
    1a22:	e1 f7       	brne	.-8      	; 0x1a1c <set_origen+0x7c>
    1a24:	00 c0       	rjmp	.+0      	; 0x1a26 <set_origen+0x86>
    1a26:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    1a28:	89 b1       	in	r24, 0x09	; 9
    1a2a:	88 70       	andi	r24, 0x08	; 8
    1a2c:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1a30:	89 b1       	in	r24, 0x09	; 9
    1a32:	84 70       	andi	r24, 0x04	; 4
    1a34:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1a38:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	e9 54       	subi	r30, 0x49	; 73
    1a44:	fd 4f       	sbci	r31, 0xFD	; 253
    1a46:	01 90       	ld	r0, Z+
    1a48:	f0 81       	ld	r31, Z
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	09 95       	icall
	
	angulo = 0;	
    1a4e:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <angulo+0x1>
    1a52:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <angulo>
    1a56:	08 95       	ret

00001a58 <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    1a58:	8a b1       	in	r24, 0x0a	; 10
    1a5a:	8b 7f       	andi	r24, 0xFB	; 251
    1a5c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    1a5e:	8b b1       	in	r24, 0x0b	; 11
    1a60:	84 60       	ori	r24, 0x04	; 4
    1a62:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    1a64:	8a b1       	in	r24, 0x0a	; 10
    1a66:	87 7f       	andi	r24, 0xF7	; 247
    1a68:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    1a6a:	8b b1       	in	r24, 0x0b	; 11
    1a6c:	88 60       	ori	r24, 0x08	; 8
    1a6e:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    1a70:	8d b3       	in	r24, 0x1d	; 29
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    1a76:	e9 e6       	ldi	r30, 0x69	; 105
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    1a80:	80 81       	ld	r24, Z
    1a82:	8d 7f       	andi	r24, 0xFD	; 253
    1a84:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    1a86:	8d b3       	in	r24, 0x1d	; 29
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    1a8c:	80 81       	ld	r24, Z
    1a8e:	84 60       	ori	r24, 0x04	; 4
    1a90:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    1a92:	80 81       	ld	r24, Z
    1a94:	87 7f       	andi	r24, 0xF7	; 247
    1a96:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    1aa4:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    1aa8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    1aac:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <set_origen>
    1ab0:	08 95       	ret

00001ab2 <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	2f 93       	push	r18
    1abe:	3f 93       	push	r19
    1ac0:	4f 93       	push	r20
    1ac2:	5f 93       	push	r21
    1ac4:	6f 93       	push	r22
    1ac6:	7f 93       	push	r23
    1ac8:	8f 93       	push	r24
    1aca:	9f 93       	push	r25
    1acc:	af 93       	push	r26
    1ace:	bf 93       	push	r27
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    1ad4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1ad8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1adc:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <derivate_I+0x1>
    1ae0:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <derivate_I>
	derivate_counter_I = 0;
    1ae4:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <derivate_counter_I+0x1>
    1ae8:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <derivate_counter_I>
	IZQ = LEERIZQ;
    1aec:	89 b1       	in	r24, 0x09	; 9
    1aee:	88 70       	andi	r24, 0x08	; 8
    1af0:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1af4:	89 b1       	in	r24, 0x09	; 9
    1af6:	84 70       	andi	r24, 0x04	; 4
    1af8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1afc:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	e9 54       	subi	r30, 0x49	; 73
    1b08:	fd 4f       	sbci	r31, 0xFD	; 253
    1b0a:	01 90       	ld	r0, Z+
    1b0c:	f0 81       	ld	r31, Z
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	09 95       	icall
}
    1b12:	ff 91       	pop	r31
    1b14:	ef 91       	pop	r30
    1b16:	bf 91       	pop	r27
    1b18:	af 91       	pop	r26
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	7f 91       	pop	r23
    1b20:	6f 91       	pop	r22
    1b22:	5f 91       	pop	r21
    1b24:	4f 91       	pop	r20
    1b26:	3f 91       	pop	r19
    1b28:	2f 91       	pop	r18
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    1b56:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1b5a:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1b5e:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <derivate_D+0x1>
    1b62:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <derivate_D>
	derivate_counter_D = 0;
    1b66:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <derivate_counter_D+0x1>
    1b6a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <derivate_counter_D>
	IZQ = LEERIZQ;
    1b6e:	89 b1       	in	r24, 0x09	; 9
    1b70:	88 70       	andi	r24, 0x08	; 8
    1b72:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <IZQ>
	DER = LEERDER;
    1b76:	89 b1       	in	r24, 0x09	; 9
    1b78:	84 70       	andi	r24, 0x04	; 4
    1b7a:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1b7e:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <estado>
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	e9 54       	subi	r30, 0x49	; 73
    1b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8c:	01 90       	ld	r0, Z+
    1b8e:	f0 81       	ld	r31, Z
    1b90:	e0 2d       	mov	r30, r0
    1b92:	09 95       	icall
}
    1b94:	ff 91       	pop	r31
    1b96:	ef 91       	pop	r30
    1b98:	bf 91       	pop	r27
    1b9a:	af 91       	pop	r26
    1b9c:	9f 91       	pop	r25
    1b9e:	8f 91       	pop	r24
    1ba0:	7f 91       	pop	r23
    1ba2:	6f 91       	pop	r22
    1ba4:	5f 91       	pop	r21
    1ba6:	4f 91       	pop	r20
    1ba8:	3f 91       	pop	r19
    1baa:	2f 91       	pop	r18
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti

00001bb6 <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    1bb6:	1f 92       	push	r1
    1bb8:	0f 92       	push	r0
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	0f 92       	push	r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	2f 93       	push	r18
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D<31000)derivate_counter_D++;
    1bc6:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1bca:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1bce:	88 31       	cpi	r24, 0x18	; 24
    1bd0:	99 47       	sbci	r25, 0x79	; 121
    1bd2:	4c f4       	brge	.+18     	; 0x1be6 <__vector_7+0x30>
    1bd4:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <derivate_counter_D>
    1bd8:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <derivate_counter_D+0x1>
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <derivate_counter_D+0x1>
    1be2:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <derivate_counter_D>
	if(derivate_counter_I<31000)derivate_counter_I++;
    1be6:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1bea:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1bee:	88 31       	cpi	r24, 0x18	; 24
    1bf0:	99 47       	sbci	r25, 0x79	; 121
    1bf2:	4c f4       	brge	.+18     	; 0x1c06 <__vector_7+0x50>
    1bf4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <derivate_counter_I>
    1bf8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <derivate_counter_I+0x1>
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <derivate_counter_I+0x1>
    1c02:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <derivate_counter_I>
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <getTiempoInforme>:

volatile unsigned char Flag_Informo=0,Flag_PID=0,Flag_Button=0,Flag_leerDatos=0;
volatile uint32_t tiempoSEOS=0,tiempoInforme=0;

uint32_t getTiempoInforme(){
	return tiempoInforme;
    1c16:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <tiempoInforme>
    1c1a:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <tiempoInforme+0x1>
    1c1e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <tiempoInforme+0x2>
    1c22:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <tiempoInforme+0x3>
}
    1c26:	08 95       	ret

00001c28 <getTiempoSEOS>:

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
    1c28:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <tiempoSEOS>
    1c2c:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <tiempoSEOS+0x1>
    1c30:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <tiempoSEOS+0x2>
    1c34:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <tiempoSEOS+0x3>
}
    1c38:	08 95       	ret

00001c3a <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    1c3a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <contPID>
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <contPID>
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <Flag_PID>
		contPID=0;
    1c4e:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    1c52:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <contInformo>
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <contInformo>
    1c5c:	84 31       	cpi	r24, 0x14	; 20
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <Flag_Informo>
		contInformo=0;
    1c66:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    1c6a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <contButtton>
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <contButtton>
    1c74:	8a 30       	cpi	r24, 0x0A	; 10
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <Flag_Button>
		contButtton=0;
    1c7e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    1c82:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <contLeerDatos>
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <contLeerDatos>
    1c8c:	88 32       	cpi	r24, 0x28	; 40
    1c8e:	29 f4       	brne	.+10     	; 0x1c9a <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <Flag_leerDatos>
		contLeerDatos=0;
    1c96:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <contLeerDatos>
    1c9a:	08 95       	ret

00001c9c <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    1c9c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <Flag_PID>
    1ca0:	88 23       	and	r24, r24
    1ca2:	21 f0       	breq	.+8      	; 0x1cac <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    1ca4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <Actulizar_PID>
		Flag_PID = 0;
    1ca8:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <Flag_PID>
	}
	if(Flag_Informo){
    1cac:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <Flag_Informo>
    1cb0:	88 23       	and	r24, r24
    1cb2:	21 f0       	breq	.+8      	; 0x1cbc <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    1cb4:	0e 94 14 01 	call	0x228	; 0x228 <Informar_Actulizar>
		Flag_Informo = 0;
    1cb8:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <Flag_Informo>
	}
	if(Flag_Button){
    1cbc:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <Flag_Button>
    1cc0:	88 23       	and	r24, r24
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    1cc4:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    1cc8:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <Flag_Button>
	}
	if(Flag_leerDatos){
    1ccc:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <Flag_leerDatos>
    1cd0:	88 23       	and	r24, r24
    1cd2:	21 f0       	breq	.+8      	; 0x1cdc <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    1cd4:	0e 94 94 01 	call	0x328	; 0x328 <actulizar_leerDatos>
		Flag_leerDatos=0;
    1cd8:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <Flag_leerDatos>
    1cdc:	08 95       	ret

00001cde <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    1ce6:	9c e7       	ldi	r25, 0x7C	; 124
    1ce8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    1cea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1cee:	08 95       	ret

00001cf0 <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    1cf0:	1f 92       	push	r1
    1cf2:	0f 92       	push	r0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    1d12:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <SEOS_SCH_Tasks>
	tiempoSEOS++;
    1d16:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <tiempoSEOS>
    1d1a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <tiempoSEOS+0x1>
    1d1e:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <tiempoSEOS+0x2>
    1d22:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <tiempoSEOS+0x3>
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	b1 1d       	adc	r27, r1
    1d2c:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <tiempoSEOS>
    1d30:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <tiempoSEOS+0x1>
    1d34:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <tiempoSEOS+0x2>
    1d38:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    1d3c:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <contTiempo>
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	98 0f       	add	r25, r24
    1d44:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <contTiempo>
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	a8 f0       	brcs	.+42     	; 0x1d76 <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    1d4c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <tiempoInforme>
    1d50:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <tiempoInforme+0x1>
    1d54:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <tiempoInforme+0x2>
    1d58:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <tiempoInforme+0x3>
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	a1 1d       	adc	r26, r1
    1d60:	b1 1d       	adc	r27, r1
    1d62:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <tiempoInforme>
    1d66:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <tiempoInforme+0x1>
    1d6a:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <tiempoInforme+0x2>
    1d6e:	b0 93 47 03 	sts	0x0347, r27	; 0x800347 <tiempoInforme+0x3>
		contTiempo=0;
    1d72:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <contTiempo>
	}
}
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	8f 93       	push	r24
    1da4:	9f 93       	push	r25
    1da6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1daa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1dae:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <valor+0x1>
    1db2:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <valor>
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <Inicializacion_slideResistor>:
    1dc4:	87 b1       	in	r24, 0x07	; 7
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	87 b9       	out	0x07, r24	; 7
    1dca:	88 b1       	in	r24, 0x08	; 8
    1dcc:	8e 7f       	andi	r24, 0xFE	; 254
    1dce:	88 b9       	out	0x08, r24	; 8
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    1dd6:	ea e7       	ldi	r30, 0x7A	; 122
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8f ea       	ldi	r24, 0xAF	; 175
    1ddc:	80 83       	st	Z, r24
    1dde:	ac e7       	ldi	r26, 0x7C	; 124
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	8c 91       	ld	r24, X
    1de4:	80 64       	ori	r24, 0x40	; 64
    1de6:	8c 93       	st	X, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	80 64       	ori	r24, 0x40	; 64
    1dec:	80 83       	st	Z, r24
    1dee:	08 95       	ret

00001df0 <getSlideResistor>:

uint16_t getSlideResistor(){
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    1df4:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <i>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	96 39       	cpi	r25, 0x96	; 150
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <getSlideResistor+0x10>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	2a e6       	ldi	r18, 0x6A	; 106
    1e02:	82 9f       	mul	r24, r18
    1e04:	90 0d       	add	r25, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <i>
	i = (i+1)%CANT;
    1e0c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <i>
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	6f e0       	ldi	r22, 0x0F	; 15
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1e1c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <i>
	valores[i]=valor;
    1e20:	c0 91 52 03 	lds	r28, 0x0352	; 0x800352 <i>
    1e24:	d0 e0       	ldi	r29, 0x00	; 0
    1e26:	cc 0f       	add	r28, r28
    1e28:	dd 1f       	adc	r29, r29
    1e2a:	cc 0f       	add	r28, r28
    1e2c:	dd 1f       	adc	r29, r29
    1e2e:	c9 5a       	subi	r28, 0xA9	; 169
    1e30:	dc 4f       	sbci	r29, 0xFC	; 252
    1e32:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <valor>
    1e36:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <valor+0x1>
    1e3a:	07 2e       	mov	r0, r23
    1e3c:	00 0c       	add	r0, r0
    1e3e:	88 0b       	sbc	r24, r24
    1e40:	99 0b       	sbc	r25, r25
    1e42:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
    1e46:	68 83       	st	Y, r22
    1e48:	79 83       	std	Y+1, r23	; 0x01
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    1e4e:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <total>
    1e52:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <total+0x1>
    1e56:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <total+0x2>
    1e5a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <total+0x3>
	for(k=0;k<CANT;k++){
    1e5e:	c0 e0       	ldi	r28, 0x00	; 0
    1e60:	28 c0       	rjmp	.+80     	; 0x1eb2 <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    1e62:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <i>
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0f 96       	adiw	r24, 0x0f	; 15
    1e6a:	8c 1b       	sub	r24, r28
    1e6c:	91 09       	sbc	r25, r1
    1e6e:	6f e0       	ldi	r22, 0x0F	; 15
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1e76:	fc 01       	movw	r30, r24
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	e9 5a       	subi	r30, 0xA9	; 169
    1e82:	fc 4f       	sbci	r31, 0xFC	; 252
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <total>
    1e90:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <total+0x1>
    1e94:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <total+0x2>
    1e98:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <total+0x3>
    1e9c:	0e 94 6d 10 	call	0x20da	; 0x20da <__addsf3>
    1ea0:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <total>
    1ea4:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <total+0x1>
    1ea8:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <total+0x2>
    1eac:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    1eb0:	cf 5f       	subi	r28, 0xFF	; 255
    1eb2:	cf 30       	cpi	r28, 0x0F	; 15
    1eb4:	b0 f2       	brcs	.-84     	; 0x1e62 <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e7       	ldi	r20, 0x70	; 112
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <total>
    1ec2:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <total+0x1>
    1ec6:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <total+0x2>
    1eca:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <total+0x3>
    1ece:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    1ed2:	0e 94 57 11 	call	0x22ae	; 0x22ae <__fixunssfsi>
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1eea:	e1 ec       	ldi	r30, 0xC1	; 193
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	80 83       	st	Z, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 68       	ori	r24, 0x80	; 128
    1ef8:	80 83       	st	Z, r24
    1efa:	80 81       	ld	r24, Z
    1efc:	88 60       	ori	r24, 0x08	; 8
    1efe:	80 83       	st	Z, r24
    1f00:	80 81       	ld	r24, Z
    1f02:	80 62       	ori	r24, 0x20	; 32
    1f04:	80 83       	st	Z, r24
    1f06:	e0 ec       	ldi	r30, 0xC0	; 192
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 62       	ori	r24, 0x20	; 32
    1f0e:	80 83       	st	Z, r24
    1f10:	08 95       	ret

00001f12 <getEspacioDisponibleBuffer>:
    1f12:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <tx_buffer_write>
    1f16:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <tx_buffer_read>
    1f1a:	98 17       	cp	r25, r24
    1f1c:	18 f0       	brcs	.+6      	; 0x1f24 <getEspacioDisponibleBuffer+0x12>
    1f1e:	89 1b       	sub	r24, r25
    1f20:	8a 51       	subi	r24, 0x1A	; 26
    1f22:	08 95       	ret
    1f24:	89 1b       	sub	r24, r25
    1f26:	08 95       	ret

00001f28 <UART_TransmitChar>:
    1f28:	48 2f       	mov	r20, r24
    1f2a:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <tx_buffer_write>
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	c9 01       	movw	r24, r18
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	66 ee       	ldi	r22, 0xE6	; 230
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1f3c:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <tx_buffer_read>
    1f40:	98 17       	cp	r25, r24
    1f42:	59 f0       	breq	.+22     	; 0x1f5a <UART_TransmitChar+0x32>
    1f44:	f9 01       	movw	r30, r18
    1f46:	e2 50       	subi	r30, 0x02	; 2
    1f48:	fc 4f       	sbci	r31, 0xFC	; 252
    1f4a:	40 83       	st	Z, r20
    1f4c:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <tx_buffer_write>
    1f50:	e1 ec       	ldi	r30, 0xC1	; 193
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 62       	ori	r24, 0x20	; 32
    1f58:	80 83       	st	Z, r24
    1f5a:	08 95       	ret

00001f5c <UART_TransmitString>:
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	ec 01       	movw	r28, r24
    1f64:	16 2f       	mov	r17, r22
    1f66:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getEspacioDisponibleBuffer>
    1f6a:	18 17       	cp	r17, r24
    1f6c:	20 f0       	brcs	.+8      	; 0x1f76 <UART_TransmitString+0x1a>
    1f6e:	06 c0       	rjmp	.+12     	; 0x1f7c <UART_TransmitString+0x20>
    1f70:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_TransmitChar>
    1f74:	21 96       	adiw	r28, 0x01	; 1
    1f76:	88 81       	ld	r24, Y
    1f78:	81 11       	cpse	r24, r1
    1f7a:	fa cf       	rjmp	.-12     	; 0x1f70 <UART_TransmitString+0x14>
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	08 95       	ret

00001f84 <__vector_19>:
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <tx_buffer_read>
    1fa4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <tx_buffer_write>
    1fa8:	e8 17       	cp	r30, r24
    1faa:	89 f0       	breq	.+34     	; 0x1fce <__vector_19+0x4a>
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	e2 50       	subi	r30, 0x02	; 2
    1fb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb2:	80 81       	ld	r24, Z
    1fb4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1fb8:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <tx_buffer_read>
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	66 ee       	ldi	r22, 0xE6	; 230
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    1fc8:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <tx_buffer_read>
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <__vector_19+0x54>
    1fce:	e1 ec       	ldi	r30, 0xC1	; 193
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 7d       	andi	r24, 0xDF	; 223
    1fd6:	80 83       	st	Z, r24
    1fd8:	ff 91       	pop	r31
    1fda:	ef 91       	pop	r30
    1fdc:	bf 91       	pop	r27
    1fde:	af 91       	pop	r26
    1fe0:	9f 91       	pop	r25
    1fe2:	8f 91       	pop	r24
    1fe4:	7f 91       	pop	r23
    1fe6:	6f 91       	pop	r22
    1fe8:	5f 91       	pop	r21
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <SacarDatosBufferEnter>:
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	ec 01       	movw	r28, r24
    1ffa:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <recibioEnter>
    1ffe:	88 23       	and	r24, r24
    2000:	21 f1       	breq	.+72     	; 0x204a <SacarDatosBufferEnter+0x56>
    2002:	f8 94       	cli
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	11 c0       	rjmp	.+34     	; 0x202a <SacarDatosBufferEnter+0x36>
    2008:	fe 01       	movw	r30, r28
    200a:	e2 0f       	add	r30, r18
    200c:	f1 1d       	adc	r31, r1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	dc 01       	movw	r26, r24
    2012:	a8 56       	subi	r26, 0x68	; 104
    2014:	bc 4f       	sbci	r27, 0xFC	; 252
    2016:	3c 91       	ld	r19, X
    2018:	30 83       	st	Z, r19
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	64 e6       	ldi	r22, 0x64	; 100
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
    2024:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rx_buffer_read>
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <rx_buffer_write>
    202e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <rx_buffer_read>
    2032:	98 17       	cp	r25, r24
    2034:	11 f0       	breq	.+4      	; 0x203a <SacarDatosBufferEnter+0x46>
    2036:	23 36       	cpi	r18, 0x63	; 99
    2038:	38 f3       	brcs	.-50     	; 0x2008 <SacarDatosBufferEnter+0x14>
    203a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <recibioEnter>
    203e:	78 94       	sei
    2040:	c2 0f       	add	r28, r18
    2042:	d1 1d       	adc	r29, r1
    2044:	18 82       	st	Y, r1
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	01 c0       	rjmp	.+2      	; 0x204c <SacarDatosBufferEnter+0x58>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <__vector_18>:

ISR(USART_RX_vect){
    2052:	1f 92       	push	r1
    2054:	0f 92       	push	r0
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	0f 92       	push	r0
    205a:	11 24       	eor	r1, r1
    205c:	2f 93       	push	r18
    205e:	3f 93       	push	r19
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    2072:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rx_buffer_write>
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	64 e6       	ldi	r22, 0x64	; 100
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
	uint8_t receivedChar = UDR0;
    2082:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    2086:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <rx_buffer_read>
    208a:	28 17       	cp	r18, r24
    208c:	a9 f0       	breq	.+42     	; 0x20b8 <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    208e:	9a 30       	cpi	r25, 0x0A	; 10
    2090:	11 f0       	breq	.+4      	; 0x2096 <__vector_18+0x44>
    2092:	9d 30       	cpi	r25, 0x0D	; 13
    2094:	21 f4       	brne	.+8      	; 0x209e <__vector_18+0x4c>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <recibioEnter>
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    209e:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <recibioEnter>
    20a2:	31 11       	cpse	r19, r1
    20a4:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    20a8:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <rx_buffer_write>
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	e8 56       	subi	r30, 0x68	; 104
    20b0:	fc 4f       	sbci	r31, 0xFC	; 252
    20b2:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    20b4:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rx_buffer_write>
		}
	}
}
    20b8:	ff 91       	pop	r31
    20ba:	ef 91       	pop	r30
    20bc:	bf 91       	pop	r27
    20be:	af 91       	pop	r26
    20c0:	9f 91       	pop	r25
    20c2:	8f 91       	pop	r24
    20c4:	7f 91       	pop	r23
    20c6:	6f 91       	pop	r22
    20c8:	5f 91       	pop	r21
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__subsf3>:
    20d8:	50 58       	subi	r21, 0x80	; 128

000020da <__addsf3>:
    20da:	bb 27       	eor	r27, r27
    20dc:	aa 27       	eor	r26, r26
    20de:	0e 94 84 10 	call	0x2108	; 0x2108 <__addsf3x>
    20e2:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__fp_round>
    20e6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__fp_pscA>
    20ea:	38 f0       	brcs	.+14     	; 0x20fa <__addsf3+0x20>
    20ec:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__fp_pscB>
    20f0:	20 f0       	brcs	.+8      	; 0x20fa <__addsf3+0x20>
    20f2:	39 f4       	brne	.+14     	; 0x2102 <__addsf3+0x28>
    20f4:	9f 3f       	cpi	r25, 0xFF	; 255
    20f6:	19 f4       	brne	.+6      	; 0x20fe <__addsf3+0x24>
    20f8:	26 f4       	brtc	.+8      	; 0x2102 <__addsf3+0x28>
    20fa:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__fp_nan>
    20fe:	0e f4       	brtc	.+2      	; 0x2102 <__addsf3+0x28>
    2100:	e0 95       	com	r30
    2102:	e7 fb       	bst	r30, 7
    2104:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_inf>

00002108 <__addsf3x>:
    2108:	e9 2f       	mov	r30, r25
    210a:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_split3>
    210e:	58 f3       	brcs	.-42     	; 0x20e6 <__addsf3+0xc>
    2110:	ba 17       	cp	r27, r26
    2112:	62 07       	cpc	r22, r18
    2114:	73 07       	cpc	r23, r19
    2116:	84 07       	cpc	r24, r20
    2118:	95 07       	cpc	r25, r21
    211a:	20 f0       	brcs	.+8      	; 0x2124 <__addsf3x+0x1c>
    211c:	79 f4       	brne	.+30     	; 0x213c <__addsf3x+0x34>
    211e:	a6 f5       	brtc	.+104    	; 0x2188 <__addsf3x+0x80>
    2120:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__fp_zero>
    2124:	0e f4       	brtc	.+2      	; 0x2128 <__addsf3x+0x20>
    2126:	e0 95       	com	r30
    2128:	0b 2e       	mov	r0, r27
    212a:	ba 2f       	mov	r27, r26
    212c:	a0 2d       	mov	r26, r0
    212e:	0b 01       	movw	r0, r22
    2130:	b9 01       	movw	r22, r18
    2132:	90 01       	movw	r18, r0
    2134:	0c 01       	movw	r0, r24
    2136:	ca 01       	movw	r24, r20
    2138:	a0 01       	movw	r20, r0
    213a:	11 24       	eor	r1, r1
    213c:	ff 27       	eor	r31, r31
    213e:	59 1b       	sub	r21, r25
    2140:	99 f0       	breq	.+38     	; 0x2168 <__addsf3x+0x60>
    2142:	59 3f       	cpi	r21, 0xF9	; 249
    2144:	50 f4       	brcc	.+20     	; 0x215a <__addsf3x+0x52>
    2146:	50 3e       	cpi	r21, 0xE0	; 224
    2148:	68 f1       	brcs	.+90     	; 0x21a4 <__addsf3x+0x9c>
    214a:	1a 16       	cp	r1, r26
    214c:	f0 40       	sbci	r31, 0x00	; 0
    214e:	a2 2f       	mov	r26, r18
    2150:	23 2f       	mov	r18, r19
    2152:	34 2f       	mov	r19, r20
    2154:	44 27       	eor	r20, r20
    2156:	58 5f       	subi	r21, 0xF8	; 248
    2158:	f3 cf       	rjmp	.-26     	; 0x2140 <__addsf3x+0x38>
    215a:	46 95       	lsr	r20
    215c:	37 95       	ror	r19
    215e:	27 95       	ror	r18
    2160:	a7 95       	ror	r26
    2162:	f0 40       	sbci	r31, 0x00	; 0
    2164:	53 95       	inc	r21
    2166:	c9 f7       	brne	.-14     	; 0x215a <__addsf3x+0x52>
    2168:	7e f4       	brtc	.+30     	; 0x2188 <__addsf3x+0x80>
    216a:	1f 16       	cp	r1, r31
    216c:	ba 0b       	sbc	r27, r26
    216e:	62 0b       	sbc	r22, r18
    2170:	73 0b       	sbc	r23, r19
    2172:	84 0b       	sbc	r24, r20
    2174:	ba f0       	brmi	.+46     	; 0x21a4 <__addsf3x+0x9c>
    2176:	91 50       	subi	r25, 0x01	; 1
    2178:	a1 f0       	breq	.+40     	; 0x21a2 <__addsf3x+0x9a>
    217a:	ff 0f       	add	r31, r31
    217c:	bb 1f       	adc	r27, r27
    217e:	66 1f       	adc	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	c2 f7       	brpl	.-16     	; 0x2176 <__addsf3x+0x6e>
    2186:	0e c0       	rjmp	.+28     	; 0x21a4 <__addsf3x+0x9c>
    2188:	ba 0f       	add	r27, r26
    218a:	62 1f       	adc	r22, r18
    218c:	73 1f       	adc	r23, r19
    218e:	84 1f       	adc	r24, r20
    2190:	48 f4       	brcc	.+18     	; 0x21a4 <__addsf3x+0x9c>
    2192:	87 95       	ror	r24
    2194:	77 95       	ror	r23
    2196:	67 95       	ror	r22
    2198:	b7 95       	ror	r27
    219a:	f7 95       	ror	r31
    219c:	9e 3f       	cpi	r25, 0xFE	; 254
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <__addsf3x+0x9a>
    21a0:	b0 cf       	rjmp	.-160    	; 0x2102 <__addsf3+0x28>
    21a2:	93 95       	inc	r25
    21a4:	88 0f       	add	r24, r24
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <__addsf3x+0xa2>
    21a8:	99 27       	eor	r25, r25
    21aa:	ee 0f       	add	r30, r30
    21ac:	97 95       	ror	r25
    21ae:	87 95       	ror	r24
    21b0:	08 95       	ret

000021b2 <__cmpsf2>:
    21b2:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fp_cmp>
    21b6:	08 f4       	brcc	.+2      	; 0x21ba <__cmpsf2+0x8>
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	08 95       	ret

000021bc <__divsf3>:
    21bc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divsf3x>
    21c0:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__fp_round>
    21c4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__fp_pscB>
    21c8:	58 f0       	brcs	.+22     	; 0x21e0 <__divsf3+0x24>
    21ca:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__fp_pscA>
    21ce:	40 f0       	brcs	.+16     	; 0x21e0 <__divsf3+0x24>
    21d0:	29 f4       	brne	.+10     	; 0x21dc <__divsf3+0x20>
    21d2:	5f 3f       	cpi	r21, 0xFF	; 255
    21d4:	29 f0       	breq	.+10     	; 0x21e0 <__divsf3+0x24>
    21d6:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_inf>
    21da:	51 11       	cpse	r21, r1
    21dc:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_szero>
    21e0:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__fp_nan>

000021e4 <__divsf3x>:
    21e4:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_split3>
    21e8:	68 f3       	brcs	.-38     	; 0x21c4 <__divsf3+0x8>

000021ea <__divsf3_pse>:
    21ea:	99 23       	and	r25, r25
    21ec:	b1 f3       	breq	.-20     	; 0x21da <__divsf3+0x1e>
    21ee:	55 23       	and	r21, r21
    21f0:	91 f3       	breq	.-28     	; 0x21d6 <__divsf3+0x1a>
    21f2:	95 1b       	sub	r25, r21
    21f4:	55 0b       	sbc	r21, r21
    21f6:	bb 27       	eor	r27, r27
    21f8:	aa 27       	eor	r26, r26
    21fa:	62 17       	cp	r22, r18
    21fc:	73 07       	cpc	r23, r19
    21fe:	84 07       	cpc	r24, r20
    2200:	38 f0       	brcs	.+14     	; 0x2210 <__divsf3_pse+0x26>
    2202:	9f 5f       	subi	r25, 0xFF	; 255
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	44 1f       	adc	r20, r20
    220c:	aa 1f       	adc	r26, r26
    220e:	a9 f3       	breq	.-22     	; 0x21fa <__divsf3_pse+0x10>
    2210:	35 d0       	rcall	.+106    	; 0x227c <__divsf3_pse+0x92>
    2212:	0e 2e       	mov	r0, r30
    2214:	3a f0       	brmi	.+14     	; 0x2224 <__divsf3_pse+0x3a>
    2216:	e0 e8       	ldi	r30, 0x80	; 128
    2218:	32 d0       	rcall	.+100    	; 0x227e <__divsf3_pse+0x94>
    221a:	91 50       	subi	r25, 0x01	; 1
    221c:	50 40       	sbci	r21, 0x00	; 0
    221e:	e6 95       	lsr	r30
    2220:	00 1c       	adc	r0, r0
    2222:	ca f7       	brpl	.-14     	; 0x2216 <__divsf3_pse+0x2c>
    2224:	2b d0       	rcall	.+86     	; 0x227c <__divsf3_pse+0x92>
    2226:	fe 2f       	mov	r31, r30
    2228:	29 d0       	rcall	.+82     	; 0x227c <__divsf3_pse+0x92>
    222a:	66 0f       	add	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	bb 1f       	adc	r27, r27
    2232:	26 17       	cp	r18, r22
    2234:	37 07       	cpc	r19, r23
    2236:	48 07       	cpc	r20, r24
    2238:	ab 07       	cpc	r26, r27
    223a:	b0 e8       	ldi	r27, 0x80	; 128
    223c:	09 f0       	breq	.+2      	; 0x2240 <__divsf3_pse+0x56>
    223e:	bb 0b       	sbc	r27, r27
    2240:	80 2d       	mov	r24, r0
    2242:	bf 01       	movw	r22, r30
    2244:	ff 27       	eor	r31, r31
    2246:	93 58       	subi	r25, 0x83	; 131
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	3a f0       	brmi	.+14     	; 0x225a <__divsf3_pse+0x70>
    224c:	9e 3f       	cpi	r25, 0xFE	; 254
    224e:	51 05       	cpc	r21, r1
    2250:	78 f0       	brcs	.+30     	; 0x2270 <__divsf3_pse+0x86>
    2252:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_inf>
    2256:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_szero>
    225a:	5f 3f       	cpi	r21, 0xFF	; 255
    225c:	e4 f3       	brlt	.-8      	; 0x2256 <__divsf3_pse+0x6c>
    225e:	98 3e       	cpi	r25, 0xE8	; 232
    2260:	d4 f3       	brlt	.-12     	; 0x2256 <__divsf3_pse+0x6c>
    2262:	86 95       	lsr	r24
    2264:	77 95       	ror	r23
    2266:	67 95       	ror	r22
    2268:	b7 95       	ror	r27
    226a:	f7 95       	ror	r31
    226c:	9f 5f       	subi	r25, 0xFF	; 255
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__divsf3_pse+0x78>
    2270:	88 0f       	add	r24, r24
    2272:	91 1d       	adc	r25, r1
    2274:	96 95       	lsr	r25
    2276:	87 95       	ror	r24
    2278:	97 f9       	bld	r25, 7
    227a:	08 95       	ret
    227c:	e1 e0       	ldi	r30, 0x01	; 1
    227e:	66 0f       	add	r22, r22
    2280:	77 1f       	adc	r23, r23
    2282:	88 1f       	adc	r24, r24
    2284:	bb 1f       	adc	r27, r27
    2286:	62 17       	cp	r22, r18
    2288:	73 07       	cpc	r23, r19
    228a:	84 07       	cpc	r24, r20
    228c:	ba 07       	cpc	r27, r26
    228e:	20 f0       	brcs	.+8      	; 0x2298 <__divsf3_pse+0xae>
    2290:	62 1b       	sub	r22, r18
    2292:	73 0b       	sbc	r23, r19
    2294:	84 0b       	sbc	r24, r20
    2296:	ba 0b       	sbc	r27, r26
    2298:	ee 1f       	adc	r30, r30
    229a:	88 f7       	brcc	.-30     	; 0x227e <__divsf3_pse+0x94>
    229c:	e0 95       	com	r30
    229e:	08 95       	ret

000022a0 <__fixsfsi>:
    22a0:	0e 94 57 11 	call	0x22ae	; 0x22ae <__fixunssfsi>
    22a4:	68 94       	set
    22a6:	b1 11       	cpse	r27, r1
    22a8:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_szero>
    22ac:	08 95       	ret

000022ae <__fixunssfsi>:
    22ae:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_splitA>
    22b2:	88 f0       	brcs	.+34     	; 0x22d6 <__fixunssfsi+0x28>
    22b4:	9f 57       	subi	r25, 0x7F	; 127
    22b6:	98 f0       	brcs	.+38     	; 0x22de <__fixunssfsi+0x30>
    22b8:	b9 2f       	mov	r27, r25
    22ba:	99 27       	eor	r25, r25
    22bc:	b7 51       	subi	r27, 0x17	; 23
    22be:	b0 f0       	brcs	.+44     	; 0x22ec <__fixunssfsi+0x3e>
    22c0:	e1 f0       	breq	.+56     	; 0x22fa <__fixunssfsi+0x4c>
    22c2:	66 0f       	add	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	88 1f       	adc	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	1a f0       	brmi	.+6      	; 0x22d2 <__fixunssfsi+0x24>
    22cc:	ba 95       	dec	r27
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__fixunssfsi+0x14>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <__fixunssfsi+0x4c>
    22d2:	b1 30       	cpi	r27, 0x01	; 1
    22d4:	91 f0       	breq	.+36     	; 0x22fa <__fixunssfsi+0x4c>
    22d6:	0e 94 31 12 	call	0x2462	; 0x2462 <__fp_zero>
    22da:	b1 e0       	ldi	r27, 0x01	; 1
    22dc:	08 95       	ret
    22de:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__fp_zero>
    22e2:	67 2f       	mov	r22, r23
    22e4:	78 2f       	mov	r23, r24
    22e6:	88 27       	eor	r24, r24
    22e8:	b8 5f       	subi	r27, 0xF8	; 248
    22ea:	39 f0       	breq	.+14     	; 0x22fa <__fixunssfsi+0x4c>
    22ec:	b9 3f       	cpi	r27, 0xF9	; 249
    22ee:	cc f3       	brlt	.-14     	; 0x22e2 <__fixunssfsi+0x34>
    22f0:	86 95       	lsr	r24
    22f2:	77 95       	ror	r23
    22f4:	67 95       	ror	r22
    22f6:	b3 95       	inc	r27
    22f8:	d9 f7       	brne	.-10     	; 0x22f0 <__fixunssfsi+0x42>
    22fa:	3e f4       	brtc	.+14     	; 0x230a <__fixunssfsi+0x5c>
    22fc:	90 95       	com	r25
    22fe:	80 95       	com	r24
    2300:	70 95       	com	r23
    2302:	61 95       	neg	r22
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	8f 4f       	sbci	r24, 0xFF	; 255
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	08 95       	ret

0000230c <__floatunsisf>:
    230c:	e8 94       	clt
    230e:	09 c0       	rjmp	.+18     	; 0x2322 <__floatsisf+0x12>

00002310 <__floatsisf>:
    2310:	97 fb       	bst	r25, 7
    2312:	3e f4       	brtc	.+14     	; 0x2322 <__floatsisf+0x12>
    2314:	90 95       	com	r25
    2316:	80 95       	com	r24
    2318:	70 95       	com	r23
    231a:	61 95       	neg	r22
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8f 4f       	sbci	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	99 23       	and	r25, r25
    2324:	a9 f0       	breq	.+42     	; 0x2350 <__floatsisf+0x40>
    2326:	f9 2f       	mov	r31, r25
    2328:	96 e9       	ldi	r25, 0x96	; 150
    232a:	bb 27       	eor	r27, r27
    232c:	93 95       	inc	r25
    232e:	f6 95       	lsr	r31
    2330:	87 95       	ror	r24
    2332:	77 95       	ror	r23
    2334:	67 95       	ror	r22
    2336:	b7 95       	ror	r27
    2338:	f1 11       	cpse	r31, r1
    233a:	f8 cf       	rjmp	.-16     	; 0x232c <__floatsisf+0x1c>
    233c:	fa f4       	brpl	.+62     	; 0x237c <__floatsisf+0x6c>
    233e:	bb 0f       	add	r27, r27
    2340:	11 f4       	brne	.+4      	; 0x2346 <__floatsisf+0x36>
    2342:	60 ff       	sbrs	r22, 0
    2344:	1b c0       	rjmp	.+54     	; 0x237c <__floatsisf+0x6c>
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	8f 4f       	sbci	r24, 0xFF	; 255
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	16 c0       	rjmp	.+44     	; 0x237c <__floatsisf+0x6c>
    2350:	88 23       	and	r24, r24
    2352:	11 f0       	breq	.+4      	; 0x2358 <__floatsisf+0x48>
    2354:	96 e9       	ldi	r25, 0x96	; 150
    2356:	11 c0       	rjmp	.+34     	; 0x237a <__floatsisf+0x6a>
    2358:	77 23       	and	r23, r23
    235a:	21 f0       	breq	.+8      	; 0x2364 <__floatsisf+0x54>
    235c:	9e e8       	ldi	r25, 0x8E	; 142
    235e:	87 2f       	mov	r24, r23
    2360:	76 2f       	mov	r23, r22
    2362:	05 c0       	rjmp	.+10     	; 0x236e <__floatsisf+0x5e>
    2364:	66 23       	and	r22, r22
    2366:	71 f0       	breq	.+28     	; 0x2384 <__floatsisf+0x74>
    2368:	96 e8       	ldi	r25, 0x86	; 134
    236a:	86 2f       	mov	r24, r22
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	2a f0       	brmi	.+10     	; 0x237c <__floatsisf+0x6c>
    2372:	9a 95       	dec	r25
    2374:	66 0f       	add	r22, r22
    2376:	77 1f       	adc	r23, r23
    2378:	88 1f       	adc	r24, r24
    237a:	da f7       	brpl	.-10     	; 0x2372 <__floatsisf+0x62>
    237c:	88 0f       	add	r24, r24
    237e:	96 95       	lsr	r25
    2380:	87 95       	ror	r24
    2382:	97 f9       	bld	r25, 7
    2384:	08 95       	ret

00002386 <__fp_cmp>:
    2386:	99 0f       	add	r25, r25
    2388:	00 08       	sbc	r0, r0
    238a:	55 0f       	add	r21, r21
    238c:	aa 0b       	sbc	r26, r26
    238e:	e0 e8       	ldi	r30, 0x80	; 128
    2390:	fe ef       	ldi	r31, 0xFE	; 254
    2392:	16 16       	cp	r1, r22
    2394:	17 06       	cpc	r1, r23
    2396:	e8 07       	cpc	r30, r24
    2398:	f9 07       	cpc	r31, r25
    239a:	c0 f0       	brcs	.+48     	; 0x23cc <__fp_cmp+0x46>
    239c:	12 16       	cp	r1, r18
    239e:	13 06       	cpc	r1, r19
    23a0:	e4 07       	cpc	r30, r20
    23a2:	f5 07       	cpc	r31, r21
    23a4:	98 f0       	brcs	.+38     	; 0x23cc <__fp_cmp+0x46>
    23a6:	62 1b       	sub	r22, r18
    23a8:	73 0b       	sbc	r23, r19
    23aa:	84 0b       	sbc	r24, r20
    23ac:	95 0b       	sbc	r25, r21
    23ae:	39 f4       	brne	.+14     	; 0x23be <__fp_cmp+0x38>
    23b0:	0a 26       	eor	r0, r26
    23b2:	61 f0       	breq	.+24     	; 0x23cc <__fp_cmp+0x46>
    23b4:	23 2b       	or	r18, r19
    23b6:	24 2b       	or	r18, r20
    23b8:	25 2b       	or	r18, r21
    23ba:	21 f4       	brne	.+8      	; 0x23c4 <__fp_cmp+0x3e>
    23bc:	08 95       	ret
    23be:	0a 26       	eor	r0, r26
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <__fp_cmp+0x3e>
    23c2:	a1 40       	sbci	r26, 0x01	; 1
    23c4:	a6 95       	lsr	r26
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	81 1d       	adc	r24, r1
    23ca:	81 1d       	adc	r24, r1
    23cc:	08 95       	ret

000023ce <__fp_inf>:
    23ce:	97 f9       	bld	r25, 7
    23d0:	9f 67       	ori	r25, 0x7F	; 127
    23d2:	80 e8       	ldi	r24, 0x80	; 128
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	08 95       	ret

000023da <__fp_nan>:
    23da:	9f ef       	ldi	r25, 0xFF	; 255
    23dc:	80 ec       	ldi	r24, 0xC0	; 192
    23de:	08 95       	ret

000023e0 <__fp_pscA>:
    23e0:	00 24       	eor	r0, r0
    23e2:	0a 94       	dec	r0
    23e4:	16 16       	cp	r1, r22
    23e6:	17 06       	cpc	r1, r23
    23e8:	18 06       	cpc	r1, r24
    23ea:	09 06       	cpc	r0, r25
    23ec:	08 95       	ret

000023ee <__fp_pscB>:
    23ee:	00 24       	eor	r0, r0
    23f0:	0a 94       	dec	r0
    23f2:	12 16       	cp	r1, r18
    23f4:	13 06       	cpc	r1, r19
    23f6:	14 06       	cpc	r1, r20
    23f8:	05 06       	cpc	r0, r21
    23fa:	08 95       	ret

000023fc <__fp_round>:
    23fc:	09 2e       	mov	r0, r25
    23fe:	03 94       	inc	r0
    2400:	00 0c       	add	r0, r0
    2402:	11 f4       	brne	.+4      	; 0x2408 <__fp_round+0xc>
    2404:	88 23       	and	r24, r24
    2406:	52 f0       	brmi	.+20     	; 0x241c <__fp_round+0x20>
    2408:	bb 0f       	add	r27, r27
    240a:	40 f4       	brcc	.+16     	; 0x241c <__fp_round+0x20>
    240c:	bf 2b       	or	r27, r31
    240e:	11 f4       	brne	.+4      	; 0x2414 <__fp_round+0x18>
    2410:	60 ff       	sbrs	r22, 0
    2412:	04 c0       	rjmp	.+8      	; 0x241c <__fp_round+0x20>
    2414:	6f 5f       	subi	r22, 0xFF	; 255
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	8f 4f       	sbci	r24, 0xFF	; 255
    241a:	9f 4f       	sbci	r25, 0xFF	; 255
    241c:	08 95       	ret

0000241e <__fp_split3>:
    241e:	57 fd       	sbrc	r21, 7
    2420:	90 58       	subi	r25, 0x80	; 128
    2422:	44 0f       	add	r20, r20
    2424:	55 1f       	adc	r21, r21
    2426:	59 f0       	breq	.+22     	; 0x243e <__fp_splitA+0x10>
    2428:	5f 3f       	cpi	r21, 0xFF	; 255
    242a:	71 f0       	breq	.+28     	; 0x2448 <__fp_splitA+0x1a>
    242c:	47 95       	ror	r20

0000242e <__fp_splitA>:
    242e:	88 0f       	add	r24, r24
    2430:	97 fb       	bst	r25, 7
    2432:	99 1f       	adc	r25, r25
    2434:	61 f0       	breq	.+24     	; 0x244e <__fp_splitA+0x20>
    2436:	9f 3f       	cpi	r25, 0xFF	; 255
    2438:	79 f0       	breq	.+30     	; 0x2458 <__fp_splitA+0x2a>
    243a:	87 95       	ror	r24
    243c:	08 95       	ret
    243e:	12 16       	cp	r1, r18
    2440:	13 06       	cpc	r1, r19
    2442:	14 06       	cpc	r1, r20
    2444:	55 1f       	adc	r21, r21
    2446:	f2 cf       	rjmp	.-28     	; 0x242c <__fp_split3+0xe>
    2448:	46 95       	lsr	r20
    244a:	f1 df       	rcall	.-30     	; 0x242e <__fp_splitA>
    244c:	08 c0       	rjmp	.+16     	; 0x245e <__fp_splitA+0x30>
    244e:	16 16       	cp	r1, r22
    2450:	17 06       	cpc	r1, r23
    2452:	18 06       	cpc	r1, r24
    2454:	99 1f       	adc	r25, r25
    2456:	f1 cf       	rjmp	.-30     	; 0x243a <__fp_splitA+0xc>
    2458:	86 95       	lsr	r24
    245a:	71 05       	cpc	r23, r1
    245c:	61 05       	cpc	r22, r1
    245e:	08 94       	sec
    2460:	08 95       	ret

00002462 <__fp_zero>:
    2462:	e8 94       	clt

00002464 <__fp_szero>:
    2464:	bb 27       	eor	r27, r27
    2466:	66 27       	eor	r22, r22
    2468:	77 27       	eor	r23, r23
    246a:	cb 01       	movw	r24, r22
    246c:	97 f9       	bld	r25, 7
    246e:	08 95       	ret

00002470 <__gesf2>:
    2470:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fp_cmp>
    2474:	08 f4       	brcc	.+2      	; 0x2478 <__gesf2+0x8>
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	08 95       	ret

0000247a <__mulsf3>:
    247a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__mulsf3x>
    247e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__fp_round>
    2482:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__fp_pscA>
    2486:	38 f0       	brcs	.+14     	; 0x2496 <__mulsf3+0x1c>
    2488:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__fp_pscB>
    248c:	20 f0       	brcs	.+8      	; 0x2496 <__mulsf3+0x1c>
    248e:	95 23       	and	r25, r21
    2490:	11 f0       	breq	.+4      	; 0x2496 <__mulsf3+0x1c>
    2492:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_inf>
    2496:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__fp_nan>
    249a:	11 24       	eor	r1, r1
    249c:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_szero>

000024a0 <__mulsf3x>:
    24a0:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_split3>
    24a4:	70 f3       	brcs	.-36     	; 0x2482 <__mulsf3+0x8>

000024a6 <__mulsf3_pse>:
    24a6:	95 9f       	mul	r25, r21
    24a8:	c1 f3       	breq	.-16     	; 0x249a <__mulsf3+0x20>
    24aa:	95 0f       	add	r25, r21
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	55 1f       	adc	r21, r21
    24b0:	62 9f       	mul	r22, r18
    24b2:	f0 01       	movw	r30, r0
    24b4:	72 9f       	mul	r23, r18
    24b6:	bb 27       	eor	r27, r27
    24b8:	f0 0d       	add	r31, r0
    24ba:	b1 1d       	adc	r27, r1
    24bc:	63 9f       	mul	r22, r19
    24be:	aa 27       	eor	r26, r26
    24c0:	f0 0d       	add	r31, r0
    24c2:	b1 1d       	adc	r27, r1
    24c4:	aa 1f       	adc	r26, r26
    24c6:	64 9f       	mul	r22, r20
    24c8:	66 27       	eor	r22, r22
    24ca:	b0 0d       	add	r27, r0
    24cc:	a1 1d       	adc	r26, r1
    24ce:	66 1f       	adc	r22, r22
    24d0:	82 9f       	mul	r24, r18
    24d2:	22 27       	eor	r18, r18
    24d4:	b0 0d       	add	r27, r0
    24d6:	a1 1d       	adc	r26, r1
    24d8:	62 1f       	adc	r22, r18
    24da:	73 9f       	mul	r23, r19
    24dc:	b0 0d       	add	r27, r0
    24de:	a1 1d       	adc	r26, r1
    24e0:	62 1f       	adc	r22, r18
    24e2:	83 9f       	mul	r24, r19
    24e4:	a0 0d       	add	r26, r0
    24e6:	61 1d       	adc	r22, r1
    24e8:	22 1f       	adc	r18, r18
    24ea:	74 9f       	mul	r23, r20
    24ec:	33 27       	eor	r19, r19
    24ee:	a0 0d       	add	r26, r0
    24f0:	61 1d       	adc	r22, r1
    24f2:	23 1f       	adc	r18, r19
    24f4:	84 9f       	mul	r24, r20
    24f6:	60 0d       	add	r22, r0
    24f8:	21 1d       	adc	r18, r1
    24fa:	82 2f       	mov	r24, r18
    24fc:	76 2f       	mov	r23, r22
    24fe:	6a 2f       	mov	r22, r26
    2500:	11 24       	eor	r1, r1
    2502:	9f 57       	subi	r25, 0x7F	; 127
    2504:	50 40       	sbci	r21, 0x00	; 0
    2506:	9a f0       	brmi	.+38     	; 0x252e <__mulsf3_pse+0x88>
    2508:	f1 f0       	breq	.+60     	; 0x2546 <__mulsf3_pse+0xa0>
    250a:	88 23       	and	r24, r24
    250c:	4a f0       	brmi	.+18     	; 0x2520 <__mulsf3_pse+0x7a>
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	bb 1f       	adc	r27, r27
    2514:	66 1f       	adc	r22, r22
    2516:	77 1f       	adc	r23, r23
    2518:	88 1f       	adc	r24, r24
    251a:	91 50       	subi	r25, 0x01	; 1
    251c:	50 40       	sbci	r21, 0x00	; 0
    251e:	a9 f7       	brne	.-22     	; 0x250a <__mulsf3_pse+0x64>
    2520:	9e 3f       	cpi	r25, 0xFE	; 254
    2522:	51 05       	cpc	r21, r1
    2524:	80 f0       	brcs	.+32     	; 0x2546 <__mulsf3_pse+0xa0>
    2526:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_inf>
    252a:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_szero>
    252e:	5f 3f       	cpi	r21, 0xFF	; 255
    2530:	e4 f3       	brlt	.-8      	; 0x252a <__mulsf3_pse+0x84>
    2532:	98 3e       	cpi	r25, 0xE8	; 232
    2534:	d4 f3       	brlt	.-12     	; 0x252a <__mulsf3_pse+0x84>
    2536:	86 95       	lsr	r24
    2538:	77 95       	ror	r23
    253a:	67 95       	ror	r22
    253c:	b7 95       	ror	r27
    253e:	f7 95       	ror	r31
    2540:	e7 95       	ror	r30
    2542:	9f 5f       	subi	r25, 0xFF	; 255
    2544:	c1 f7       	brne	.-16     	; 0x2536 <__mulsf3_pse+0x90>
    2546:	fe 2b       	or	r31, r30
    2548:	88 0f       	add	r24, r24
    254a:	91 1d       	adc	r25, r1
    254c:	96 95       	lsr	r25
    254e:	87 95       	ror	r24
    2550:	97 f9       	bld	r25, 7
    2552:	08 95       	ret
    2554:	19 f4       	brne	.+6      	; 0x255c <__mulsf3_pse+0xb6>
    2556:	16 f4       	brtc	.+4      	; 0x255c <__mulsf3_pse+0xb6>
    2558:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__fp_nan>
    255c:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_mpack>

00002560 <sqrt>:
    2560:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_splitA>
    2564:	b8 f3       	brcs	.-18     	; 0x2554 <__mulsf3_pse+0xae>
    2566:	99 23       	and	r25, r25
    2568:	c9 f3       	breq	.-14     	; 0x255c <__mulsf3_pse+0xb6>
    256a:	b6 f3       	brts	.-20     	; 0x2558 <__mulsf3_pse+0xb2>
    256c:	9f 57       	subi	r25, 0x7F	; 127
    256e:	55 0b       	sbc	r21, r21
    2570:	87 ff       	sbrs	r24, 7
    2572:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fp_norm2>
    2576:	00 24       	eor	r0, r0
    2578:	a0 e6       	ldi	r26, 0x60	; 96
    257a:	40 ea       	ldi	r20, 0xA0	; 160
    257c:	90 01       	movw	r18, r0
    257e:	80 58       	subi	r24, 0x80	; 128
    2580:	56 95       	lsr	r21
    2582:	97 95       	ror	r25
    2584:	28 f4       	brcc	.+10     	; 0x2590 <sqrt+0x30>
    2586:	80 5c       	subi	r24, 0xC0	; 192
    2588:	66 0f       	add	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	88 1f       	adc	r24, r24
    258e:	20 f0       	brcs	.+8      	; 0x2598 <sqrt+0x38>
    2590:	26 17       	cp	r18, r22
    2592:	37 07       	cpc	r19, r23
    2594:	48 07       	cpc	r20, r24
    2596:	30 f4       	brcc	.+12     	; 0x25a4 <sqrt+0x44>
    2598:	62 1b       	sub	r22, r18
    259a:	73 0b       	sbc	r23, r19
    259c:	84 0b       	sbc	r24, r20
    259e:	20 29       	or	r18, r0
    25a0:	31 29       	or	r19, r1
    25a2:	4a 2b       	or	r20, r26
    25a4:	a6 95       	lsr	r26
    25a6:	17 94       	ror	r1
    25a8:	07 94       	ror	r0
    25aa:	20 25       	eor	r18, r0
    25ac:	31 25       	eor	r19, r1
    25ae:	4a 27       	eor	r20, r26
    25b0:	58 f7       	brcc	.-42     	; 0x2588 <sqrt+0x28>
    25b2:	66 0f       	add	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	88 1f       	adc	r24, r24
    25b8:	20 f0       	brcs	.+8      	; 0x25c2 <sqrt+0x62>
    25ba:	26 17       	cp	r18, r22
    25bc:	37 07       	cpc	r19, r23
    25be:	48 07       	cpc	r20, r24
    25c0:	30 f4       	brcc	.+12     	; 0x25ce <sqrt+0x6e>
    25c2:	62 0b       	sbc	r22, r18
    25c4:	73 0b       	sbc	r23, r19
    25c6:	84 0b       	sbc	r24, r20
    25c8:	20 0d       	add	r18, r0
    25ca:	31 1d       	adc	r19, r1
    25cc:	41 1d       	adc	r20, r1
    25ce:	a0 95       	com	r26
    25d0:	81 f7       	brne	.-32     	; 0x25b2 <sqrt+0x52>
    25d2:	b9 01       	movw	r22, r18
    25d4:	84 2f       	mov	r24, r20
    25d6:	91 58       	subi	r25, 0x81	; 129
    25d8:	88 0f       	add	r24, r24
    25da:	96 95       	lsr	r25
    25dc:	87 95       	ror	r24
    25de:	08 95       	ret

000025e0 <__fp_mpack>:
    25e0:	9f 3f       	cpi	r25, 0xFF	; 255
    25e2:	31 f0       	breq	.+12     	; 0x25f0 <__fp_mpack_finite+0xc>

000025e4 <__fp_mpack_finite>:
    25e4:	91 50       	subi	r25, 0x01	; 1
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__fp_mpack_finite+0xc>
    25e8:	87 95       	ror	r24
    25ea:	77 95       	ror	r23
    25ec:	67 95       	ror	r22
    25ee:	b7 95       	ror	r27
    25f0:	88 0f       	add	r24, r24
    25f2:	91 1d       	adc	r25, r1
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	97 f9       	bld	r25, 7
    25fa:	08 95       	ret

000025fc <__fp_norm2>:
    25fc:	91 50       	subi	r25, 0x01	; 1
    25fe:	50 40       	sbci	r21, 0x00	; 0
    2600:	66 0f       	add	r22, r22
    2602:	77 1f       	adc	r23, r23
    2604:	88 1f       	adc	r24, r24
    2606:	d2 f7       	brpl	.-12     	; 0x25fc <__fp_norm2>
    2608:	08 95       	ret

0000260a <__udivmodhi4>:
    260a:	aa 1b       	sub	r26, r26
    260c:	bb 1b       	sub	r27, r27
    260e:	51 e1       	ldi	r21, 0x11	; 17
    2610:	07 c0       	rjmp	.+14     	; 0x2620 <__udivmodhi4_ep>

00002612 <__udivmodhi4_loop>:
    2612:	aa 1f       	adc	r26, r26
    2614:	bb 1f       	adc	r27, r27
    2616:	a6 17       	cp	r26, r22
    2618:	b7 07       	cpc	r27, r23
    261a:	10 f0       	brcs	.+4      	; 0x2620 <__udivmodhi4_ep>
    261c:	a6 1b       	sub	r26, r22
    261e:	b7 0b       	sbc	r27, r23

00002620 <__udivmodhi4_ep>:
    2620:	88 1f       	adc	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	5a 95       	dec	r21
    2626:	a9 f7       	brne	.-22     	; 0x2612 <__udivmodhi4_loop>
    2628:	80 95       	com	r24
    262a:	90 95       	com	r25
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	08 95       	ret

00002632 <__divmodhi4>:
    2632:	97 fb       	bst	r25, 7
    2634:	07 2e       	mov	r0, r23
    2636:	16 f4       	brtc	.+4      	; 0x263c <__divmodhi4+0xa>
    2638:	00 94       	com	r0
    263a:	07 d0       	rcall	.+14     	; 0x264a <__divmodhi4_neg1>
    263c:	77 fd       	sbrc	r23, 7
    263e:	09 d0       	rcall	.+18     	; 0x2652 <__divmodhi4_neg2>
    2640:	0e 94 05 13 	call	0x260a	; 0x260a <__udivmodhi4>
    2644:	07 fc       	sbrc	r0, 7
    2646:	05 d0       	rcall	.+10     	; 0x2652 <__divmodhi4_neg2>
    2648:	3e f4       	brtc	.+14     	; 0x2658 <__divmodhi4_exit>

0000264a <__divmodhi4_neg1>:
    264a:	90 95       	com	r25
    264c:	81 95       	neg	r24
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__divmodhi4_neg2>:
    2652:	70 95       	com	r23
    2654:	61 95       	neg	r22
    2656:	7f 4f       	sbci	r23, 0xFF	; 255

00002658 <__divmodhi4_exit>:
    2658:	08 95       	ret

0000265a <_exit>:
    265a:	f8 94       	cli

0000265c <__stop_program>:
    265c:	ff cf       	rjmp	.-2      	; 0x265c <__stop_program>
