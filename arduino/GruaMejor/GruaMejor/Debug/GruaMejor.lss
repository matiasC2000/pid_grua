
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  00001cae  00001d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001de  008002ec  008002ec  00001f2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024cb  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001214  00000000  00000000  00004773  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ae4  00000000  00000000  00005987  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000848  00000000  00000000  0000746c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b6c  00000000  00000000  00007cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001815  00000000  00000000  00008820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000a035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_1>
       8:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_11>
      30:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_18>
      4c:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ea       	ldi	r30, 0xAE	; 174
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3e       	cpi	r26, 0xEC	; 236
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac ee       	ldi	r26, 0xEC	; 236
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3c       	cpi	r26, 0xCA	; 202
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
      9e:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <contAOFF>
		if(++contAON>15){
      c8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <contAON>
		if(++contAOFF>15){
      e8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <__data_end>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <button_Actulizar+0x68>
		if(++contB>10){
     112:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <contB>
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <contB>
     11c:	8b 30       	cpi	r24, 0x0B	; 11
     11e:	30 f0       	brcs	.+12     	; 0x12c <button_Actulizar+0x6c>
			FLAG_button_B=1;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <FLAG_button_B>
     126:	08 95       	ret
		}
	}else{
		contB=0;
     128:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <contB>
     12c:	08 95       	ret

0000012e <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	8a eb       	ldi	r24, 0xBA	; 186
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
     138:	08 95       	ret

0000013a <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	ec 01       	movw	r28, r24
     140:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     142:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     148:	1b c0       	rjmp	.+54     	; 0x180 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     14a:	fe 01       	movw	r30, r28
     14c:	e4 23       	and	r30, r20
     14e:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     150:	23 e0       	ldi	r18, 0x03	; 3
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	29 1b       	sub	r18, r25
     156:	31 09       	sbc	r19, r1
     158:	22 0f       	add	r18, r18
     15a:	33 1f       	adc	r19, r19
     15c:	22 0f       	add	r18, r18
     15e:	33 1f       	adc	r19, r19
     160:	02 c0       	rjmp	.+4      	; 0x166 <Descomponerint16aHex+0x2c>
     162:	f6 95       	lsr	r31
     164:	e7 95       	ror	r30
     166:	2a 95       	dec	r18
     168:	e2 f7       	brpl	.-8      	; 0x162 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     16a:	e0 50       	subi	r30, 0x00	; 0
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	80 81       	ld	r24, Z
     170:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     172:	52 95       	swap	r21
     174:	42 95       	swap	r20
     176:	4f 70       	andi	r20, 0x0F	; 15
     178:	45 27       	eor	r20, r21
     17a:	5f 70       	andi	r21, 0x0F	; 15
     17c:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     17e:	9f 5f       	subi	r25, 0xFF	; 255
     180:	94 30       	cpi	r25, 0x04	; 4
     182:	18 f3       	brcs	.-58     	; 0x14a <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     184:	1c 92       	st	X, r1
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	cf 93       	push	r28
     196:	6b 01       	movw	r12, r22
     198:	7c 01       	movw	r14, r24
     19a:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     19c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1a6:	24 c0       	rjmp	.+72     	; 0x1f0 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1a8:	db 01       	movw	r26, r22
     1aa:	ca 01       	movw	r24, r20
     1ac:	8c 21       	and	r24, r12
     1ae:	9d 21       	and	r25, r13
     1b0:	ae 21       	and	r26, r14
     1b2:	bf 21       	and	r27, r15
     1b4:	27 e0       	ldi	r18, 0x07	; 7
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	2c 1b       	sub	r18, r28
     1ba:	31 09       	sbc	r19, r1
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <Descomponeruint32aHex+0x42>
     1c6:	b6 95       	lsr	r27
     1c8:	a7 95       	ror	r26
     1ca:	97 95       	ror	r25
     1cc:	87 95       	ror	r24
     1ce:	2a 95       	dec	r18
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <Descomponeruint32aHex+0x3a>
     1d2:	dc 01       	movw	r26, r24
     1d4:	a0 50       	subi	r26, 0x00	; 0
     1d6:	bf 4f       	sbci	r27, 0xFF	; 255
     1d8:	8c 91       	ld	r24, X
     1da:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	76 95       	lsr	r23
     1e2:	67 95       	ror	r22
     1e4:	57 95       	ror	r21
     1e6:	47 95       	ror	r20
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1ec:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ee:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1f0:	c8 30       	cpi	r28, 0x08	; 8
     1f2:	d0 f2       	brcs	.-76     	; 0x1a8 <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     1f4:	10 82       	st	Z, r1
}
     1f6:	cf 91       	pop	r28
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	6f 97       	sbiw	r28, 0x1f	; 31
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     216:	0e 94 0c 0b 	call	0x1618	; 0x1618 <getEspacioDisponibleBuffer>
     21a:	8f 3d       	cpi	r24, 0xDF	; 223
     21c:	20 f0       	brcs	.+8      	; 0x226 <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <FLAGmandarDatos>
     224:	06 c0       	rjmp	.+12     	; 0x232 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     226:	0e 94 0c 0b 	call	0x1618	; 0x1618 <getEspacioDisponibleBuffer>
     22a:	88 32       	cpi	r24, 0x28	; 40
     22c:	10 f4       	brcc	.+4      	; 0x232 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     22e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <FLAGmandarDatos>
		}
	}
	if(FLAGmandarDatos){
     232:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <FLAGmandarDatos>
     236:	88 23       	and	r24, r24
     238:	09 f4       	brne	.+2      	; 0x23c <Informar_Actulizar+0x3a>
     23a:	5a c0       	rjmp	.+180    	; 0x2f0 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     23c:	0e 94 97 09 	call	0x132e	; 0x132e <getTiempoInforme>
     240:	ae 01       	movw	r20, r28
     242:	4f 5f       	subi	r20, 0xFF	; 255
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	0e 94 c6 00 	call	0x18c	; 0x18c <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     24a:	6a e0       	ldi	r22, 0x0A	; 10
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
		UART_TransmitChar(';');
     254:	8b e3       	ldi	r24, 0x3B	; 59
     256:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     25a:	0e 94 92 04 	call	0x924	; 0x924 <getValor>
     25e:	be 01       	movw	r22, r28
     260:	67 5e       	subi	r22, 0xE7	; 231
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(error,7);
     268:	67 e0       	ldi	r22, 0x07	; 7
     26a:	ce 01       	movw	r24, r28
     26c:	49 96       	adiw	r24, 0x19	; 25
     26e:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     272:	8b e3       	ldi	r24, 0x3B	; 59
     274:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     278:	0e 94 86 04 	call	0x90c	; 0x90c <getIntegralPID>
     27c:	be 01       	movw	r22, r28
     27e:	6e 5e       	subi	r22, 0xEE	; 238
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     286:	67 e0       	ldi	r22, 0x07	; 7
     288:	ce 01       	movw	r24, r28
     28a:	42 96       	adiw	r24, 0x12	; 18
     28c:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     290:	8b e3       	ldi	r24, 0x3B	; 59
     292:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     296:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getDerivadaPID>
     29a:	be 01       	movw	r22, r28
     29c:	65 5f       	subi	r22, 0xF5	; 245
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2a4:	67 e0       	ldi	r22, 0x07	; 7
     2a6:	ce 01       	movw	r24, r28
     2a8:	0b 96       	adiw	r24, 0x0b	; 11
     2aa:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
		UART_TransmitChar(';');
     2ae:	8b e3       	ldi	r24, 0x3B	; 59
     2b0:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2b4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <getSlideResistor>
     2b8:	bc 01       	movw	r22, r24
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__floatunsisf>
     2c2:	2d ec       	ldi	r18, 0xCD	; 205
     2c4:	3c ec       	ldi	r19, 0xCC	; 204
     2c6:	44 e5       	ldi	r20, 0x54	; 84
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     2ce:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	be 01       	movw	r22, r28
     2d8:	67 5e       	subi	r22, 0xE7	; 231
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	0e 94 9d 00 	call	0x13a	; 0x13a <Descomponerint16aHex>
		UART_TransmitString(error,7);
     2e0:	67 e0       	ldi	r22, 0x07	; 7
     2e2:	ce 01       	movw	r24, r28
     2e4:	49 96       	adiw	r24, 0x19	; 25
     2e6:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
		UART_TransmitChar('\n');
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
	}
}
     2f0:	6f 96       	adiw	r28, 0x1f	; 31
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     302:	3f 92       	push	r3
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	c2 54       	subi	r28, 0x42	; 66
     32a:	d1 09       	sbc	r29, r1
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <SacarDatosBufferEnter>
     33e:	88 23       	and	r24, r24
     340:	09 f4       	brne	.+2      	; 0x344 <actulizar_leerDatos+0x42>
     342:	1a c1       	rjmp	.+564    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     344:	fe 01       	movw	r30, r28
     346:	f3 96       	adiw	r30, 0x33	; 51
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	df 01       	movw	r26, r30
     34c:	1d 92       	st	X+, r1
     34e:	8a 95       	dec	r24
     350:	e9 f7       	brne	.-6      	; 0x34c <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     352:	6a e0       	ldi	r22, 0x0A	; 10
     354:	83 ee       	ldi	r24, 0xE3	; 227
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     35c:	6a e0       	ldi	r22, 0x0A	; 10
     35e:	ce 01       	movw	r24, r28
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 31 0b 	call	0x1662	; 0x1662 <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     366:	e1 2c       	mov	r14, r1
     368:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     36a:	c4 c0       	rjmp	.+392    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     36c:	bd e2       	ldi	r27, 0x2D	; 45
     36e:	3b 12       	cpse	r3, r27
     370:	05 c0       	rjmp	.+10     	; 0x37c <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     372:	b7 fa       	bst	r11, 7
     374:	b0 94       	com	r11
     376:	b7 f8       	bld	r11, 7
     378:	b0 94       	com	r11
     37a:	2f c0       	rjmp	.+94     	; 0x3da <actulizar_leerDatos+0xd8>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     37c:	c3 2c       	mov	r12, r3
     37e:	d1 2c       	mov	r13, r1
     380:	e0 e3       	ldi	r30, 0x30	; 48
     382:	ce 1a       	sub	r12, r30
     384:	d1 08       	sbc	r13, r1
     386:	0e 2d       	mov	r16, r14
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	00 0f       	add	r16, r16
     38c:	11 1f       	adc	r17, r17
     38e:	00 0f       	add	r16, r16
     390:	11 1f       	adc	r17, r17
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	8c 0f       	add	r24, r28
     398:	9d 1f       	adc	r25, r29
     39a:	08 0f       	add	r16, r24
     39c:	19 1f       	adc	r17, r25
     39e:	d8 01       	movw	r26, r16
     3a0:	d2 96       	adiw	r26, 0x32	; 50
     3a2:	6d 91       	ld	r22, X+
     3a4:	7d 91       	ld	r23, X+
     3a6:	8d 91       	ld	r24, X+
     3a8:	9c 91       	ld	r25, X
     3aa:	d5 97       	sbiw	r26, 0x35	; 53
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e2       	ldi	r20, 0x20	; 32
     3b2:	51 e4       	ldi	r21, 0x41	; 65
     3b4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     3b8:	2b 01       	movw	r4, r22
     3ba:	3c 01       	movw	r6, r24
     3bc:	b6 01       	movw	r22, r12
     3be:	dd 0c       	add	r13, r13
     3c0:	88 0b       	sbc	r24, r24
     3c2:	99 0b       	sbc	r25, r25
     3c4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     3c8:	a3 01       	movw	r20, r6
     3ca:	92 01       	movw	r18, r4
     3cc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     3d0:	f8 01       	movw	r30, r16
     3d2:	62 ab       	std	Z+50, r22	; 0x32
     3d4:	73 ab       	std	Z+51, r23	; 0x33
     3d6:	84 ab       	std	Z+52, r24	; 0x34
     3d8:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     3da:	83 2d       	mov	r24, r3
     3dc:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
					i++;
     3e0:	f3 94       	inc	r15
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <actulizar_leerDatos+0xf2>
     3e4:	0f 2e       	mov	r0, r31
     3e6:	81 2c       	mov	r8, r1
     3e8:	91 2c       	mov	r9, r1
     3ea:	f0 e8       	ldi	r31, 0x80	; 128
     3ec:	af 2e       	mov	r10, r31
     3ee:	ff e3       	ldi	r31, 0x3F	; 63
     3f0:	bf 2e       	mov	r11, r31
     3f2:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     3f4:	e1 e0       	ldi	r30, 0x01	; 1
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ec 0f       	add	r30, r28
     3fa:	fd 1f       	adc	r31, r29
     3fc:	ef 0d       	add	r30, r15
     3fe:	f1 1d       	adc	r31, r1
     400:	30 80       	ld	r3, Z
     402:	fc e2       	ldi	r31, 0x2C	; 44
     404:	3f 16       	cp	r3, r31
     406:	09 f4       	brne	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     408:	47 c0       	rjmp	.+142    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     40a:	8e e2       	ldi	r24, 0x2E	; 46
     40c:	38 16       	cp	r3, r24
     40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     410:	43 c0       	rjmp	.+134    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     412:	90 e2       	ldi	r25, 0x20	; 32
     414:	39 16       	cp	r3, r25
     416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	3f c0       	rjmp	.+126    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     41a:	31 10       	cpse	r3, r1
     41c:	a7 cf       	rjmp	.-178    	; 0x36c <actulizar_leerDatos+0x6a>
     41e:	3c c0       	rjmp	.+120    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     420:	0e 32       	cpi	r16, 0x2E	; 46
     422:	c9 f1       	breq	.+114    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     424:	0c 32       	cpi	r16, 0x2C	; 44
     426:	b9 f1       	breq	.+110    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     428:	10 e0       	ldi	r17, 0x00	; 0
     42a:	00 53       	subi	r16, 0x30	; 48
     42c:	11 09       	sbc	r17, r1
     42e:	ce 2c       	mov	r12, r14
     430:	d1 2c       	mov	r13, r1
     432:	cc 0c       	add	r12, r12
     434:	dd 1c       	adc	r13, r13
     436:	cc 0c       	add	r12, r12
     438:	dd 1c       	adc	r13, r13
     43a:	a1 e0       	ldi	r26, 0x01	; 1
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	ac 0f       	add	r26, r28
     440:	bd 1f       	adc	r27, r29
     442:	ca 0e       	add	r12, r26
     444:	db 1e       	adc	r13, r27
     446:	f6 01       	movw	r30, r12
     448:	62 a9       	ldd	r22, Z+50	; 0x32
     44a:	73 a9       	ldd	r23, Z+51	; 0x33
     44c:	84 a9       	ldd	r24, Z+52	; 0x34
     44e:	95 a9       	ldd	r25, Z+53	; 0x35
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e2       	ldi	r20, 0x20	; 32
     456:	51 e4       	ldi	r21, 0x41	; 65
     458:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     45c:	2b 01       	movw	r4, r22
     45e:	3c 01       	movw	r6, r24
     460:	b8 01       	movw	r22, r16
     462:	11 0f       	add	r17, r17
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     46c:	a3 01       	movw	r20, r6
     46e:	92 01       	movw	r18, r4
     470:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     474:	d6 01       	movw	r26, r12
     476:	d2 96       	adiw	r26, 0x32	; 50
     478:	6d 93       	st	X+, r22
     47a:	7d 93       	st	X+, r23
     47c:	8d 93       	st	X+, r24
     47e:	9c 93       	st	X, r25
     480:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	c5 01       	movw	r24, r10
     48c:	b4 01       	movw	r22, r8
     48e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     492:	4b 01       	movw	r8, r22
     494:	5c 01       	movw	r10, r24
					
				}
				i++;
     496:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ec 0f       	add	r30, r28
     49e:	fd 1f       	adc	r31, r29
     4a0:	ef 0d       	add	r30, r15
     4a2:	f1 1d       	adc	r31, r1
     4a4:	00 81       	ld	r16, Z
     4a6:	00 32       	cpi	r16, 0x20	; 32
     4a8:	11 f0       	breq	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4aa:	01 11       	cpse	r16, r1
     4ac:	b9 cf       	rjmp	.-142    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4ae:	ce 2c       	mov	r12, r14
     4b0:	d1 2c       	mov	r13, r1
     4b2:	cc 0c       	add	r12, r12
     4b4:	dd 1c       	adc	r13, r13
     4b6:	cc 0c       	add	r12, r12
     4b8:	dd 1c       	adc	r13, r13
     4ba:	e1 e0       	ldi	r30, 0x01	; 1
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ec 0f       	add	r30, r28
     4c0:	fd 1f       	adc	r31, r29
     4c2:	ce 0e       	add	r12, r30
     4c4:	df 1e       	adc	r13, r31
     4c6:	d6 01       	movw	r26, r12
     4c8:	d2 96       	adiw	r26, 0x32	; 50
     4ca:	6d 91       	ld	r22, X+
     4cc:	7d 91       	ld	r23, X+
     4ce:	8d 91       	ld	r24, X+
     4d0:	9c 91       	ld	r25, X
     4d2:	d5 97       	sbiw	r26, 0x35	; 53
     4d4:	a5 01       	movw	r20, r10
     4d6:	94 01       	movw	r18, r8
     4d8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__divsf3>
     4dc:	f6 01       	movw	r30, r12
     4de:	62 ab       	std	Z+50, r22	; 0x32
     4e0:	73 ab       	std	Z+51, r23	; 0x33
     4e2:	84 ab       	std	Z+52, r24	; 0x34
     4e4:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     4e6:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     4e8:	00 32       	cpi	r16, 0x20	; 32
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4ec:	80 2f       	mov	r24, r16
     4ee:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
     4f2:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     4f4:	e1 e0       	ldi	r30, 0x01	; 1
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 1f       	adc	r31, r29
     4fc:	ef 0d       	add	r30, r15
     4fe:	f1 1d       	adc	r31, r1
     500:	80 81       	ld	r24, Z
     502:	81 11       	cpse	r24, r1
     504:	6f cf       	rjmp	.-290    	; 0x3e4 <actulizar_leerDatos+0xe2>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     506:	6b a9       	ldd	r22, Y+51	; 0x33
     508:	7c a9       	ldd	r23, Y+52	; 0x34
     50a:	8d a9       	ldd	r24, Y+53	; 0x35
     50c:	9e a9       	ldd	r25, Y+54	; 0x36
     50e:	23 e3       	ldi	r18, 0x33	; 51
     510:	33 e3       	ldi	r19, 0x33	; 51
     512:	43 e4       	ldi	r20, 0x43	; 67
     514:	51 ec       	ldi	r21, 0xC1	; 193
     516:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__cmpsf2>
     51a:	81 11       	cpse	r24, r1
     51c:	04 c0       	rjmp	.+8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			ONLEDBLUE;
     51e:	8b b1       	in	r24, 0x0b	; 11
     520:	80 64       	ori	r24, 0x40	; 64
     522:	8b b9       	out	0x0b, r24	; 11
     524:	03 c0       	rjmp	.+6      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
		}else{
			OFFLEDBLUE;
     526:	8b b1       	in	r24, 0x0b	; 11
     528:	8f 7b       	andi	r24, 0xBF	; 191
     52a:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     52c:	f4 e0       	ldi	r31, 0x04	; 4
     52e:	ef 12       	cpse	r14, r31
     530:	23 c0       	rjmp	.+70     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
			setKp(valores[0]);
     532:	6b a9       	ldd	r22, Y+51	; 0x33
     534:	7c a9       	ldd	r23, Y+52	; 0x34
     536:	8d a9       	ldd	r24, Y+53	; 0x35
     538:	9e a9       	ldd	r25, Y+54	; 0x36
     53a:	0e 94 96 05 	call	0xb2c	; 0xb2c <setKp>
			setKi(valores[1]);
     53e:	6f a9       	ldd	r22, Y+55	; 0x37
     540:	78 ad       	ldd	r23, Y+56	; 0x38
     542:	89 ad       	ldd	r24, Y+57	; 0x39
     544:	9a ad       	ldd	r25, Y+58	; 0x3a
     546:	0e 94 84 05 	call	0xb08	; 0xb08 <setKi>
			setKd(valores[2]);
     54a:	6b ad       	ldd	r22, Y+59	; 0x3b
     54c:	7c ad       	ldd	r23, Y+60	; 0x3c
     54e:	8d ad       	ldd	r24, Y+61	; 0x3d
     550:	9e ad       	ldd	r25, Y+62	; 0x3e
     552:	0e 94 8d 05 	call	0xb1a	; 0xb1a <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     556:	23 96       	adiw	r28, 0x03	; 3
     558:	6c ad       	ldd	r22, Y+60	; 0x3c
     55a:	7d ad       	ldd	r23, Y+61	; 0x3d
     55c:	8e ad       	ldd	r24, Y+62	; 0x3e
     55e:	9f ad       	ldd	r25, Y+63	; 0x3f
     560:	23 97       	sbiw	r28, 0x03	; 3
     562:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixunssfsi>
     566:	16 2f       	mov	r17, r22
     568:	86 2f       	mov	r24, r22
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     570:	80 e3       	ldi	r24, 0x30	; 48
     572:	81 0f       	add	r24, r17
     574:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
		}
	}
     578:	ce 5b       	subi	r28, 0xBE	; 190
     57a:	df 4f       	sbci	r29, 0xFF	; 255
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	5f 90       	pop	r5
     5a4:	4f 90       	pop	r4
     5a6:	3f 90       	pop	r3
     5a8:	08 95       	ret

000005aa <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5aa:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <UART_Init>
	Inicializacion_Motor();
     5ae:	0e 94 80 03 	call	0x700	; 0x700 <Inicializacion_Motor>
	SensorEncoder_init();
     5b2:	0e 94 b8 08 	call	0x1170	; 0x1170 <SensorEncoder_init>
	Inicializacion_slideResistor();
     5b6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Inicializacion_slideResistor>
	button_init();
     5ba:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5be:	8a b1       	in	r24, 0x0a	; 10
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5c4:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5c6:	0e 94 97 00 	call	0x12e	; 0x12e <Informar_MensajeInicial>
	OFFLEDGREEN;
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
	*/
	SEOS_Init();
     5ca:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <SEOS_Init>
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     5ce:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <SEOS_Dispatch_Tasks>
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <main+0x24>

000005d4 <setVelocidad>:
	}
	
	PASOS16;salto=16;
	//apago el led
	OFFLEDBLUE;
	pos = 0;
     5d4:	bc 01       	movw	r22, r24
     5d6:	00 97       	sbiw	r24, 0x00	; 0
     5d8:	61 f4       	brne	.+24     	; 0x5f2 <setVelocidad+0x1e>
     5da:	85 b1       	in	r24, 0x05	; 5
     5dc:	87 70       	andi	r24, 0x07	; 7
     5de:	88 63       	ori	r24, 0x38	; 56
     5e0:	85 b9       	out	0x05, r24	; 5
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     5e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	7a ef       	ldi	r23, 0xFA	; 250
     5f0:	66 c0       	rjmp	.+204    	; 0x6be <setVelocidad+0xea>
     5f2:	99 23       	and	r25, r25
     5f4:	84 f4       	brge	.+32     	; 0x616 <setVelocidad+0x42>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <lado>
     5fc:	71 95       	neg	r23
     5fe:	61 95       	neg	r22
     600:	71 09       	sbc	r23, r1
     602:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <ladoAnt>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	11 f4       	brne	.+4      	; 0x60e <setVelocidad+0x3a>
     60a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <ladoAnt>
     614:	0d c0       	rjmp	.+26     	; 0x630 <setVelocidad+0x5c>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <lado>
     61c:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <ladoAnt>
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	19 f4       	brne	.+6      	; 0x62a <setVelocidad+0x56>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <ladoAnt>
     630:	65 3f       	cpi	r22, 0xF5	; 245
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	78 07       	cpc	r23, r24
     636:	5c f0       	brlt	.+22     	; 0x64e <setVelocidad+0x7a>
     638:	88 e1       	ldi	r24, 0x18	; 24
     63a:	99 e7       	ldi	r25, 0x79	; 121
     63c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     640:	80 e1       	ldi	r24, 0x10	; 16
     642:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     646:	85 b1       	in	r24, 0x05	; 5
     648:	87 70       	andi	r24, 0x07	; 7
     64a:	85 b9       	out	0x05, r24	; 5
     64c:	38 c0       	rjmp	.+112    	; 0x6be <setVelocidad+0xea>
     64e:	6b 3f       	cpi	r22, 0xFB	; 251
     650:	71 05       	cpc	r23, r1
     652:	64 f0       	brlt	.+24     	; 0x66c <setVelocidad+0x98>
     654:	88 e9       	ldi	r24, 0x98	; 152
     656:	9a e3       	ldi	r25, 0x3A	; 58
     658:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     662:	85 b1       	in	r24, 0x05	; 5
     664:	87 70       	andi	r24, 0x07	; 7
     666:	80 62       	ori	r24, 0x20	; 32
     668:	85 b9       	out	0x05, r24	; 5
     66a:	29 c0       	rjmp	.+82     	; 0x6be <setVelocidad+0xea>
     66c:	6e 37       	cpi	r22, 0x7E	; 126
     66e:	71 05       	cpc	r23, r1
     670:	64 f0       	brlt	.+24     	; 0x68a <setVelocidad+0xb6>
     672:	8c e4       	ldi	r24, 0x4C	; 76
     674:	9d e1       	ldi	r25, 0x1D	; 29
     676:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     680:	85 b1       	in	r24, 0x05	; 5
     682:	87 70       	andi	r24, 0x07	; 7
     684:	80 61       	ori	r24, 0x10	; 16
     686:	85 b9       	out	0x05, r24	; 5
     688:	1a c0       	rjmp	.+52     	; 0x6be <setVelocidad+0xea>
     68a:	60 34       	cpi	r22, 0x40	; 64
     68c:	71 05       	cpc	r23, r1
     68e:	64 f0       	brlt	.+24     	; 0x6a8 <setVelocidad+0xd4>
     690:	86 ea       	ldi	r24, 0xA6	; 166
     692:	9e e0       	ldi	r25, 0x0E	; 14
     694:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     69e:	85 b1       	in	r24, 0x05	; 5
     6a0:	87 70       	andi	r24, 0x07	; 7
     6a2:	80 63       	ori	r24, 0x30	; 48
     6a4:	85 b9       	out	0x05, r24	; 5
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <setVelocidad+0xea>
     6a8:	83 e5       	ldi	r24, 0x53	; 83
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6b6:	85 b1       	in	r24, 0x05	; 5
     6b8:	87 70       	andi	r24, 0x07	; 7
     6ba:	88 63       	ori	r24, 0x38	; 56
     6bc:	85 b9       	out	0x05, r24	; 5
     6be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6c2:	88 23       	and	r24, r24
     6c4:	21 f0       	breq	.+8      	; 0x6ce <setVelocidad+0xfa>
     6c6:	64 5c       	subi	r22, 0xC4	; 196
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
     6ce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     6d2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     6d6:	cb 01       	movw	r24, r22
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	82 17       	cp	r24, r18
     6dc:	93 07       	cpc	r25, r19
     6de:	58 f4       	brcc	.+22     	; 0x6f6 <setVelocidad+0x122>
     6e0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6e4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     6e8:	62 50       	subi	r22, 0x02	; 2
     6ea:	71 09       	sbc	r23, r1
     6ec:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     6f0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     6f4:	08 95       	ret
     6f6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6fa:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     6fe:	08 95       	ret

00000700 <Inicializacion_Motor>:
     700:	84 b1       	in	r24, 0x04	; 4
     702:	8e 63       	ori	r24, 0x3E	; 62
     704:	84 b9       	out	0x04, r24	; 4
     706:	8a b1       	in	r24, 0x0a	; 10
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	8a b9       	out	0x0a, r24	; 10
     70c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     710:	8d e0       	ldi	r24, 0x0D	; 13
     712:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	86 bb       	out	0x16, r24	; 22
     71a:	20 e1       	ldi	r18, 0x10	; 16
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     722:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     726:	20 e7       	ldi	r18, 0x70	; 112
     728:	37 e1       	ldi	r19, 0x17	; 23
     72a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     72e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     732:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     736:	08 95       	ret

00000738 <getPos>:
     738:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     73c:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     740:	08 95       	ret

00000742 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     754:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     758:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     75c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     760:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     764:	32 02       	muls	r19, r18
     766:	80 0d       	add	r24, r0
     768:	91 1d       	adc	r25, r1
     76a:	11 24       	eor	r1, r1
     76c:	80 33       	cpi	r24, 0x30	; 48
     76e:	95 43       	sbci	r25, 0x35	; 53
     770:	08 f5       	brcc	.+66     	; 0x7b4 <__vector_11+0x72>
     772:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     776:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     77a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     77e:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     782:	32 02       	muls	r19, r18
     784:	80 0d       	add	r24, r0
     786:	91 1d       	adc	r25, r1
     788:	11 24       	eor	r1, r1
     78a:	89 2b       	or	r24, r25
     78c:	99 f0       	breq	.+38     	; 0x7b4 <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     78e:	85 b1       	in	r24, 0x05	; 5
     790:	84 60       	ori	r24, 0x04	; 4
     792:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     794:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lado>
     798:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     79c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <pos>
     7a0:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <pos+0x1>
     7a4:	32 02       	muls	r19, r18
     7a6:	80 0d       	add	r24, r0
     7a8:	91 1d       	adc	r25, r1
     7aa:	11 24       	eor	r1, r1
     7ac:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <pos+0x1>
     7b0:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <pos>
	}		
}
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     7d2:	85 b1       	in	r24, 0x05	; 5
     7d4:	8b 7f       	andi	r24, 0xFB	; 251
     7d6:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     7d8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <lado>
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	19 f4       	brne	.+6      	; 0x7e6 <__vector_12+0x20>
		IRDER;
     7e0:	85 b1       	in	r24, 0x05	; 5
     7e2:	8d 7f       	andi	r24, 0xFD	; 253
     7e4:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     7e6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <lado>
     7ea:	8f 3f       	cpi	r24, 0xFF	; 255
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <__vector_12+0x2e>
		IRIZQ;
     7ee:	85 b1       	in	r24, 0x05	; 5
     7f0:	82 60       	ori	r24, 0x02	; 2
     7f2:	85 b9       	out	0x05, r24	; 5
// 		break;
// 		default:
// 		// Manejar el caso por defecto, si es necesario
// 		break;
// 	}
}
     7f4:	8f 91       	pop	r24
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <Actulizar_PID>:
	return s;
}

int16_t getError(){
	return e;
}
     800:	68 ef       	ldi	r22, 0xF8	; 248
     802:	72 e0       	ldi	r23, 0x02	; 2
     804:	8c ef       	ldi	r24, 0xFC	; 252
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 fd 07 	call	0xffa	; 0xffa <getAnguloEncoder>
     80c:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <indice_ec_error>
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ee 5e       	subi	r30, 0xEE	; 238
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	01 90       	ld	r0, Z+
     81c:	f0 81       	ld	r31, Z
     81e:	e0 2d       	mov	r30, r0
     820:	09 95       	icall
     822:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <vel>
     826:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <vel+0x1>
     82a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <vel+0x2>
     82e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <vel+0x3>
     832:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__data_end>
     836:	22 23       	and	r18, r18
     838:	61 f0       	breq	.+24     	; 0x852 <Actulizar_PID+0x52>
     83a:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <FLAG_habilitar_PID>
     83e:	22 23       	and	r18, r18
     840:	19 f0       	breq	.+6      	; 0x848 <Actulizar_PID+0x48>
     842:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <FLAG_habilitar_PID>
     846:	03 c0       	rjmp	.+6      	; 0x84e <Actulizar_PID+0x4e>
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <FLAG_habilitar_PID>
     84e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <__data_end>
     852:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <FLAG_habilitar_PID>
     856:	22 23       	and	r18, r18
     858:	a1 f1       	breq	.+104    	; 0x8c2 <Actulizar_PID+0xc2>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	4a e7       	ldi	r20, 0x7A	; 122
     860:	54 e4       	ldi	r21, 0x44	; 68
     862:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	64 f4       	brge	.+24     	; 0x882 <Actulizar_PID+0x82>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	aa e7       	ldi	r26, 0x7A	; 122
     870:	b4 e4       	ldi	r27, 0x44	; 68
     872:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <vel>
     876:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <vel+0x1>
     87a:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <vel+0x2>
     87e:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <vel+0x3>
     882:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <vel>
     886:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <vel+0x1>
     88a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <vel+0x2>
     88e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <vel+0x3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	54 ec       	ldi	r21, 0xC4	; 196
     89a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__cmpsf2>
     89e:	88 23       	and	r24, r24
     8a0:	64 f4       	brge	.+24     	; 0x8ba <Actulizar_PID+0xba>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	aa e7       	ldi	r26, 0x7A	; 122
     8a8:	b4 ec       	ldi	r27, 0xC4	; 196
     8aa:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <vel>
     8ae:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <vel+0x1>
     8b2:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <vel+0x2>
     8b6:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <vel+0x3>
     8ba:	8b b1       	in	r24, 0x0b	; 11
     8bc:	80 62       	ori	r24, 0x20	; 32
     8be:	8b b9       	out	0x0b, r24	; 11
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <Actulizar_PID+0xd8>
     8c2:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <vel>
     8c6:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <vel+0x1>
     8ca:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <vel+0x2>
     8ce:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <vel+0x3>
     8d2:	8b b1       	in	r24, 0x0b	; 11
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	8b b9       	out	0x0b, r24	; 11
     8d8:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <vel>
     8dc:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <vel+0x1>
     8e0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <vel+0x2>
     8e4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <vel+0x3>
     8e8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     8ec:	cb 01       	movw	r24, r22
     8ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <setVelocidad>
     8f2:	08 95       	ret

000008f4 <getDerivadaPID>:
     8f4:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <derivada>
     8f8:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <derivada+0x1>
     8fc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <derivada+0x2>
     900:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <derivada+0x3>
     904:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     908:	cb 01       	movw	r24, r22
     90a:	08 95       	ret

0000090c <getIntegralPID>:
     90c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <s>
     910:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <s+0x1>
     914:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <s+0x2>
     918:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <s+0x3>
     91c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     920:	cb 01       	movw	r24, r22
     922:	08 95       	ret

00000924 <getValor>:

int16_t getValor(){
	return valor;
}
     924:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <valor>
     928:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <valor+0x1>
     92c:	08 95       	ret

0000092e <calcularIntegral>:

void calcularIntegral(int16_t e){
	s += Ki*e;
     92e:	bc 01       	movw	r22, r24
     930:	99 0f       	add	r25, r25
     932:	88 0b       	sbc	r24, r24
     934:	99 0b       	sbc	r25, r25
     936:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     93a:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <Ki>
     93e:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <Ki+0x1>
     942:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <Ki+0x2>
     946:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <Ki+0x3>
     94a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     94e:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     952:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     956:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     95a:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     95e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     962:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <s>
     966:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <s+0x1>
     96a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <s+0x2>
     96e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <s+0x3>
	if(s > LIMITESUPI) s = LIMITESUPI;
     972:	20 e8       	ldi	r18, 0x80	; 128
     974:	36 e9       	ldi	r19, 0x96	; 150
     976:	48 e1       	ldi	r20, 0x18	; 24
     978:	5b e4       	ldi	r21, 0x4B	; 75
     97a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	64 f4       	brge	.+24     	; 0x99a <calcularIntegral+0x6c>
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	96 e9       	ldi	r25, 0x96	; 150
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	bb e4       	ldi	r27, 0x4B	; 75
     98a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <s>
     98e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <s+0x1>
     992:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <s+0x2>
     996:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <s+0x3>
	if(s < -LIMITESUPI) s = -LIMITESUPI;
     99a:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <s>
     99e:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <s+0x1>
     9a2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <s+0x2>
     9a6:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <s+0x3>
     9aa:	20 e8       	ldi	r18, 0x80	; 128
     9ac:	36 e9       	ldi	r19, 0x96	; 150
     9ae:	48 e1       	ldi	r20, 0x18	; 24
     9b0:	5b ec       	ldi	r21, 0xCB	; 203
     9b2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	64 f4       	brge	.+24     	; 0x9d2 <calcularIntegral+0xa4>
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	96 e9       	ldi	r25, 0x96	; 150
     9be:	a8 e1       	ldi	r26, 0x18	; 24
     9c0:	bb ec       	ldi	r27, 0xCB	; 203
     9c2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <s>
     9c6:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <s+0x1>
     9ca:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <s+0x2>
     9ce:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <s+0x3>
     9d2:	08 95       	ret

000009d4 <calcularDerivada>:
}

void calcularDerivada(int16_t e){
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
	derivadas[1] = derivadas[0];
	derivadas[0] = (e-posAnt[0]);
	derivada = 0.7 * derivadas[0]+ 0.15 * derivadas[1] + 0.15 * derivadas[2];
	posAnt[0]=e;*/
	
	derivada = (float)(0.02)*(float)30000/(float)tiempoMuestra+(float)(0.98)*derivada;
     9dc:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <tiempoMuestra>
     9e0:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <tiempoMuestra+0x1>
     9e4:	07 2e       	mov	r0, r23
     9e6:	00 0c       	add	r0, r0
     9e8:	88 0b       	sbc	r24, r24
     9ea:	99 0b       	sbc	r25, r25
     9ec:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	86 e1       	ldi	r24, 0x16	; 22
     9fa:	94 e4       	ldi	r25, 0x44	; 68
     9fc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__divsf3>
     a00:	6b 01       	movw	r12, r22
     a02:	7c 01       	movw	r14, r24
     a04:	28 e4       	ldi	r18, 0x48	; 72
     a06:	31 ee       	ldi	r19, 0xE1	; 225
     a08:	4a e7       	ldi	r20, 0x7A	; 122
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <derivada>
     a10:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <derivada+0x1>
     a14:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <derivada+0x2>
     a18:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <derivada+0x3>
     a1c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     a2c:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <derivada>
     a30:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <derivada+0x1>
     a34:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <derivada+0x2>
     a38:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <derivada+0x3>
// 		posAnt[1]=posAnt[0];
// 		derivada=(e-posAnt[0])/(tiempo-tiempoAnt[0]);
// 		posAnt[0]=e;
// 		tiempoAnt[0]=tiempo;
// 	}
}
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <ec_sin_sen>:
	calcularIntegral(e);
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
}

float ec_sin_sen(){	
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
	
	//hago que vuelva
	e= e;//%800;
     a4e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     a52:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
	valor = e;
     a56:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     a5a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	
	calcularDerivada(e);
     a5e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	calcularIntegral(e);
     a62:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     a66:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     a6a:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	
	return( Kp*e + Kd*derivada + Ki*s);
     a6e:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     a72:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     a76:	07 2e       	mov	r0, r23
     a78:	00 0c       	add	r0, r0
     a7a:	88 0b       	sbc	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     a82:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     a86:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     a8a:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     a8e:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     a92:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     a96:	6b 01       	movw	r12, r22
     a98:	7c 01       	movw	r14, r24
     a9a:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     a9e:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     aa2:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     aa6:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     aaa:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Kd>
     aae:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Kd+0x1>
     ab2:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Kd+0x2>
     ab6:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Kd+0x3>
     aba:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     aca:	6b 01       	movw	r12, r22
     acc:	7c 01       	movw	r14, r24
     ace:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     ad2:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     ad6:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     ada:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     ade:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <Ki>
     ae2:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <Ki+0x1>
     ae6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <Ki+0x2>
     aea:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Ki+0x3>
     aee:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
}
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	08 95       	ret

00000b08 <setKi>:
// 		tiempoAnt[0]=tiempo;
// 	}
}

void setKi(float val){
	Ki=val;
     b08:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <Ki>
     b0c:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <Ki+0x1>
     b10:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <Ki+0x2>
     b14:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Ki+0x3>
     b18:	08 95       	ret

00000b1a <setKd>:
}
void setKd(float val){
	Kd=val;
     b1a:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <Kd>
     b1e:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <Kd+0x1>
     b22:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <Kd+0x2>
     b26:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <Kd+0x3>
     b2a:	08 95       	ret

00000b2c <setKp>:
}
void setKp(float val){
	Kp=val;
     b2c:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <Kp>
     b30:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <Kp+0x1>
     b34:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Kp+0x2>
     b38:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <Kp+0x3>
     b3c:	08 95       	ret

00000b3e <setIndice_ec_error>:
}

void setIndice_ec_error(uint8_t indice){
	if (indice != indice_ec_error)
     b3e:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <indice_ec_error>
     b42:	98 17       	cp	r25, r24
     b44:	51 f0       	breq	.+20     	; 0xb5a <setIndice_ec_error+0x1c>
	{
		indice_ec_error = indice;
     b46:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <indice_ec_error>
		s = 0; //reseteo el valor de la suma de la integral se resetea
     b4a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <s>
     b4e:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <s+0x1>
     b52:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <s+0x2>
     b56:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <s+0x3>
     b5a:	08 95       	ret

00000b5c <calcularSen>:
	}
}

int16_t calcularSen(int16_t sen){
	sen= sen%800;
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	73 e0       	ldi	r23, 0x03	; 3
     b60:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
	if(sen<0){
     b64:	99 23       	and	r25, r25
     b66:	14 f4       	brge	.+4      	; 0xb6c <calcularSen+0x10>
		sen = 800+sen;
     b68:	80 5e       	subi	r24, 0xE0	; 224
     b6a:	9c 4f       	sbci	r25, 0xFC	; 252
	}
	if(sen>399){
     b6c:	80 39       	cpi	r24, 0x90	; 144
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	92 07       	cpc	r25, r18
     b72:	dc f0       	brlt	.+54     	; 0xbaa <calcularSen+0x4e>
		sen = sen%400;
     b74:	60 e9       	ldi	r22, 0x90	; 144
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     b7c:	89 3c       	cpi	r24, 0xC9	; 201
     b7e:	91 05       	cpc	r25, r1
     b80:	4c f0       	brlt	.+18     	; 0xb94 <calcularSen+0x38>
     b82:	28 ec       	ldi	r18, 0xC8	; 200
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	b9 01       	movw	r22, r18
     b88:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     b8c:	a9 01       	movw	r20, r18
     b8e:	48 1b       	sub	r20, r24
     b90:	59 0b       	sbc	r21, r25
     b92:	ca 01       	movw	r24, r20
		sen = - sen2[sen];
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	e8 5e       	subi	r30, 0xE8	; 232
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	91 95       	neg	r25
     ba4:	81 95       	neg	r24
     ba6:	91 09       	sbc	r25, r1
     ba8:	08 95       	ret
	}else{
		sen = sen%400;
     baa:	60 e9       	ldi	r22, 0x90	; 144
     bac:	71 e0       	ldi	r23, 0x01	; 1
     bae:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     bb2:	89 3c       	cpi	r24, 0xC9	; 201
     bb4:	91 05       	cpc	r25, r1
     bb6:	4c f0       	brlt	.+18     	; 0xbca <calcularSen+0x6e>
     bb8:	28 ec       	ldi	r18, 0xC8	; 200
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	b9 01       	movw	r22, r18
     bbe:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     bc2:	a9 01       	movw	r20, r18
     bc4:	48 1b       	sub	r20, r24
     bc6:	59 0b       	sbc	r21, r25
     bc8:	ca 01       	movw	r24, r20
		sen = sen2[sen];
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	fc 01       	movw	r30, r24
     bd0:	e8 5e       	subi	r30, 0xE8	; 232
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
	}
	return sen;
}
     bd8:	08 95       	ret

00000bda <ec_basico>:

float ec_basico(){
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	cf 93       	push	r28
	int8_t multi=1;
	e = e % 800;
     be4:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     be8:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     bec:	60 e2       	ldi	r22, 0x20	; 32
     bee:	73 e0       	ldi	r23, 0x03	; 3
     bf0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
     bf4:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     bf8:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	if(e<0){
     bfc:	99 23       	and	r25, r25
     bfe:	34 f4       	brge	.+12     	; 0xc0c <ec_basico+0x32>
		e = 800+e;
     c00:	80 5e       	subi	r24, 0xE0	; 224
     c02:	9c 4f       	sbci	r25, 0xFC	; 252
     c04:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     c08:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	}
	if(e > 350 && e < 450){
     c0c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     c10:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     c14:	9c 01       	movw	r18, r24
     c16:	2f 55       	subi	r18, 0x5F	; 95
     c18:	31 40       	sbci	r19, 0x01	; 1
     c1a:	23 36       	cpi	r18, 0x63	; 99
     c1c:	31 05       	cpc	r19, r1
     c1e:	10 f0       	brcs	.+4      	; 0xc24 <ec_basico+0x4a>
	}
	return sen;
}

float ec_basico(){
	int8_t multi=1;
     c20:	c1 e0       	ldi	r28, 0x01	; 1
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <ec_basico+0x4c>
	e = e % 800;
	if(e<0){
		e = 800+e;
	}
	if(e > 350 && e < 450){
		multi = -1;
     c24:	cf ef       	ldi	r28, 0xFF	; 255
	}
	e=calcularSen(e);
     c26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <calcularSen>
     c2a:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     c2e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	valor = e;
     c32:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     c36:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	calcularDerivada(e);
     c3a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	calcularIntegral(e);
     c3e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     c42:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     c46:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
     c4a:	6c 2f       	mov	r22, r28
     c4c:	cc 0f       	add	r28, r28
     c4e:	77 0b       	sbc	r23, r23
     c50:	88 0b       	sbc	r24, r24
     c52:	99 0b       	sbc	r25, r25
     c54:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     c58:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     c5c:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     c60:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     c64:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     c68:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     c6c:	6b 01       	movw	r12, r22
     c6e:	7c 01       	movw	r14, r24
     c70:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     c74:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     c78:	07 2e       	mov	r0, r23
     c7a:	00 0c       	add	r0, r0
     c7c:	88 0b       	sbc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     c84:	a7 01       	movw	r20, r14
     c86:	96 01       	movw	r18, r12
     c88:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     c8c:	6b 01       	movw	r12, r22
     c8e:	7c 01       	movw	r14, r24
     c90:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     c94:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     c98:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     c9c:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     ca0:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Kd>
     ca4:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Kd+0x1>
     ca8:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Kd+0x2>
     cac:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Kd+0x3>
     cb0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     cc0:	6b 01       	movw	r12, r22
     cc2:	7c 01       	movw	r14, r24
     cc4:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     cc8:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     ccc:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     cd0:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     cd4:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <Ki>
     cd8:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <Ki+0x1>
     cdc:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <Ki+0x2>
     ce0:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Ki+0x3>
     ce4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     ce8:	9b 01       	movw	r18, r22
     cea:	ac 01       	movw	r20, r24
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
}
     cf4:	cf 91       	pop	r28
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <ec_pos>:
	
	return( Kp*e + Kd*derivada + Ki*s);
}


float ec_pos(){
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
	e=calcularSen(e);
     d0c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <e>
     d10:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <e+0x1>
     d14:	0e 94 ae 05 	call	0xb5c	; 0xb5c <calcularSen>
     d18:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <e+0x1>
     d1c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
     d20:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <getSlideResistor>
     d24:	bc 01       	movw	r22, r24
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__floatunsisf>
     d2e:	2d ec       	ldi	r18, 0xCD	; 205
     d30:	3c ec       	ldi	r19, 0xCC	; 204
     d32:	44 e5       	ldi	r20, 0x54	; 84
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     d3a:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <posRef>
     d3e:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <posRef+0x1>
     d42:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <posRef+0x2>
     d46:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;
     d4a:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     d4e:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     d52:	07 2e       	mov	r0, r23
     d54:	00 0c       	add	r0, r0
     d56:	88 0b       	sbc	r24, r24
     d58:	99 0b       	sbc	r25, r25
     d5a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 ed       	ldi	r20, 0xD0	; 208
     d64:	50 e4       	ldi	r21, 0x40	; 64
     d66:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     d6a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     d6e:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <e+0x1>
     d72:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <e>
	valor = getPos()+e;
     d76:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     d7a:	c0 91 fc 02 	lds	r28, 0x02FC	; 0x8002fc <e>
     d7e:	d0 91 fd 02 	lds	r29, 0x02FD	; 0x8002fd <e+0x1>
     d82:	8c 0f       	add	r24, r28
     d84:	9d 1f       	adc	r25, r29
     d86:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <valor+0x1>
     d8a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	calcularDerivada(e-getPos());
     d8e:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     d92:	9e 01       	movw	r18, r28
     d94:	28 1b       	sub	r18, r24
     d96:	39 0b       	sbc	r19, r25
     d98:	c9 01       	movw	r24, r18
     d9a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <calcularDerivada>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
     d9e:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <posRef>
     da2:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <posRef+0x1>
     da6:	e0 90 04 03 	lds	r14, 0x0304	; 0x800304 <posRef+0x2>
     daa:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <posRef+0x3>
     dae:	0e 94 9c 03 	call	0x738	; 0x738 <getPos>
     db2:	bc 01       	movw	r22, r24
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__floatunsisf>
     dbc:	9b 01       	movw	r18, r22
     dbe:	ac 01       	movw	r20, r24
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	0e 94 ef 0b 	call	0x17de	; 0x17de <__subsf3>
     dc8:	6b 01       	movw	r12, r22
     dca:	7c 01       	movw	r14, r24
     dcc:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     dd0:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     dd4:	07 2e       	mov	r0, r23
     dd6:	00 0c       	add	r0, r0
     dd8:	88 0b       	sbc	r24, r24
     dda:	99 0b       	sbc	r25, r25
     ddc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     de0:	a7 01       	movw	r20, r14
     de2:	96 01       	movw	r18, r12
     de4:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     de8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__fixsfsi>
     dec:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <e+0x1>
     df0:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	calcularIntegral(e);
     df4:	cb 01       	movw	r24, r22
     df6:	0e 94 97 04 	call	0x92e	; 0x92e <calcularIntegral>
	return( Kp*e + Kd*derivada + Ki*s );
     dfa:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <e>
     dfe:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <e+0x1>
     e02:	07 2e       	mov	r0, r23
     e04:	00 0c       	add	r0, r0
     e06:	88 0b       	sbc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
     e0e:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Kp>
     e12:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Kp+0x1>
     e16:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <Kp+0x2>
     e1a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <Kp+0x3>
     e1e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     e22:	6b 01       	movw	r12, r22
     e24:	7c 01       	movw	r14, r24
     e26:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <derivada>
     e2a:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <derivada+0x1>
     e2e:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <derivada+0x2>
     e32:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <derivada+0x3>
     e36:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <Kd>
     e3a:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <Kd+0x1>
     e3e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Kd+0x2>
     e42:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Kd+0x3>
     e46:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     e56:	6b 01       	movw	r12, r22
     e58:	7c 01       	movw	r14, r24
     e5a:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <s>
     e5e:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <s+0x1>
     e62:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <s+0x2>
     e66:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <s+0x3>
     e6a:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <Ki>
     e6e:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <Ki+0x1>
     e72:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <Ki+0x2>
     e76:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Ki+0x3>
     e7a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	08 95       	ret

00000e98 <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
     e98:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <DER>
     e9c:	88 23       	and	r24, r24
     e9e:	91 f0       	breq	.+36     	; 0xec4 <f00+0x2c>
		angulo--;
     ea0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     ea4:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     eae:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=-1;
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	9f ef       	ldi	r25, 0xFF	; 255
     eb6:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     eba:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = CeroUno;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	}
	if (IZQ){
     ec4:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <IZQ>
     ec8:	88 23       	and	r24, r24
     eca:	89 f0       	breq	.+34     	; 0xeee <f00+0x56>
		angulo++;
     ecc:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     ed0:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     eda:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     ee6:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = UnoCero;
     eea:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
     eee:	08 95       	ret

00000ef0 <f10>:
	}
}
void f10(void){
	if(DER){
     ef0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <DER>
     ef4:	88 23       	and	r24, r24
     ef6:	91 f0       	breq	.+36     	; 0xf1c <f10+0x2c>
		angulo++;
     ef8:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     efc:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     f06:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     f12:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = UnoUno;
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	}
	if(!IZQ){
     f1c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <IZQ>
     f20:	81 11       	cpse	r24, r1
     f22:	11 c0       	rjmp	.+34     	; 0xf46 <f10+0x56>
		angulo--;
     f24:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     f28:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     f32:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=-1;
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     f3e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = CeroCero;
     f42:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <estado>
     f46:	08 95       	ret

00000f48 <f01>:
	}
}
void f01(void){
	if(!DER){
     f48:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <DER>
     f4c:	81 11       	cpse	r24, r1
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <f01+0x2a>
		angulo++;
     f50:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     f54:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     f5e:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     f6a:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = CeroCero;
     f6e:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <estado>
	}
	if(IZQ){
     f72:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <IZQ>
     f76:	88 23       	and	r24, r24
     f78:	91 f0       	breq	.+36     	; 0xf9e <f01+0x56>
		angulo--;
     f7a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     f7e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     f88:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=-1;
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	9f ef       	ldi	r25, 0xFF	; 255
     f90:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     f94:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = UnoUno;
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
     f9e:	08 95       	ret

00000fa0 <f11>:
	}
}
void f11(void){
	if(!DER){
     fa0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <DER>
     fa4:	81 11       	cpse	r24, r1
     fa6:	12 c0       	rjmp	.+36     	; 0xfcc <f11+0x2c>
		angulo--;
     fa8:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     fac:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     fb6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=-1;
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     fc2:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = UnoCero;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	}
	if(!IZQ){
     fcc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <IZQ>
     fd0:	81 11       	cpse	r24, r1
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <f11+0x58>
		angulo++;
     fd4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <angulo>
     fd8:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <angulo+0x1>
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <angulo+0x1>
     fe2:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <angulo>
		anguloANt=1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <anguloANt+0x1>
     fee:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <anguloANt>
		estado = CeroUno;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
     ff8:	08 95       	ret

00000ffa <getAnguloEncoder>:

//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	eb 01       	movw	r28, r22
	*anguloOUT = angulo;
    1000:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <angulo>
    1004:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <angulo+0x1>
    1008:	fc 01       	movw	r30, r24
    100a:	31 83       	std	Z+1, r19	; 0x01
    100c:	20 83       	st	Z, r18
	if(tiempoMuestraOUT!=0){
    100e:	20 97       	sbiw	r28, 0x00	; 0
    1010:	09 f4       	brne	.+2      	; 0x1014 <getAnguloEncoder+0x1a>
    1012:	4f c0       	rjmp	.+158    	; 0x10b2 <getAnguloEncoder+0xb8>
		//*tiempoMuestraOUT = tiempoMuestra;
		int16_t axi = (derivate_D + derivate_I)/2;
    1014:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <derivate_D>
    1018:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <derivate_D+0x1>
    101c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <derivate_I>
    1020:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <derivate_I+0x1>
    1024:	68 0f       	add	r22, r24
    1026:	79 1f       	adc	r23, r25
    1028:	77 23       	and	r23, r23
    102a:	14 f4       	brge	.+4      	; 0x1030 <getAnguloEncoder+0x36>
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	9b 01       	movw	r18, r22
    1032:	35 95       	asr	r19
    1034:	27 95       	ror	r18
		//puedo hacer que duvuelva el mismo y que no cambie
		
		//*tiempoMuestraOUT = anguloANt * axi;
		if(anguloANt == signoAnt){
    1036:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <anguloANt>
    103a:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <anguloANt+0x1>
    103e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <signoAnt>
    1042:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <signoAnt+0x1>
    1046:	e8 17       	cp	r30, r24
    1048:	f9 07       	cpc	r31, r25
    104a:	59 f5       	brne	.+86     	; 0x10a2 <getAnguloEncoder+0xa8>
			if(axiAnt != axi){
    104c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <axiAnt>
    1050:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <axiAnt+0x1>
    1054:	28 17       	cp	r18, r24
    1056:	39 07       	cpc	r19, r25
    1058:	81 f0       	breq	.+32     	; 0x107a <getAnguloEncoder+0x80>
				axiAnt = (derivate_D + derivate_I)/2;
    105a:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <axiAnt+0x1>
    105e:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <axiAnt>
				*tiempoMuestraOUT = anguloANt * axiAnt;
    1062:	2e 9f       	mul	r18, r30
    1064:	c0 01       	movw	r24, r0
    1066:	2f 9f       	mul	r18, r31
    1068:	90 0d       	add	r25, r0
    106a:	3e 9f       	mul	r19, r30
    106c:	90 0d       	add	r25, r0
    106e:	11 24       	eor	r1, r1
    1070:	99 83       	std	Y+1, r25	; 0x01
    1072:	88 83       	st	Y, r24
				count_equals=0;
    1074:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <count_equals>
    1078:	18 c0       	rjmp	.+48     	; 0x10aa <getAnguloEncoder+0xb0>
			}else{
				*tiempoMuestraOUT = anguloANt*((derivate_D + derivate_I)/2+derivate_counter_D/5);
    107a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <derivate_counter_D>
    107e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <derivate_counter_D+0x1>
    1082:	65 e0       	ldi	r22, 0x05	; 5
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    108a:	62 0f       	add	r22, r18
    108c:	73 1f       	adc	r23, r19
    108e:	e6 9f       	mul	r30, r22
    1090:	c0 01       	movw	r24, r0
    1092:	e7 9f       	mul	r30, r23
    1094:	90 0d       	add	r25, r0
    1096:	f6 9f       	mul	r31, r22
    1098:	90 0d       	add	r25, r0
    109a:	11 24       	eor	r1, r1
    109c:	99 83       	std	Y+1, r25	; 0x01
    109e:	88 83       	st	Y, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <getAnguloEncoder+0xb0>
				//*tiempoMuestraOUT = anguloANt * ((derivate_D + derivate_I)/2+(derivate_counter_D+derivate_counter_I)/2)/2;
			}
		}else{
			*tiempoMuestraOUT = 16000;
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	9e e3       	ldi	r25, 0x3E	; 62
    10a6:	99 83       	std	Y+1, r25	; 0x01
    10a8:	88 83       	st	Y, r24
		}
		signoAnt= anguloANt;
    10aa:	f0 93 21 03 	sts	0x0321, r31	; 0x800321 <signoAnt+0x1>
    10ae:	e0 93 20 03 	sts	0x0320, r30	; 0x800320 <signoAnt>
	}
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <set_origen>:

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    10b8:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <DER>
    10bc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <IZQ>
    10c0:	89 23       	and	r24, r25
    10c2:	19 f0       	breq	.+6      	; 0x10ca <set_origen+0x12>
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    10ca:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <DER>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	22 23       	and	r18, r18
    10d4:	11 f0       	breq	.+4      	; 0x10da <set_origen+0x22>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <IZQ>
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	82 23       	and	r24, r18
    10e2:	93 23       	and	r25, r19
    10e4:	89 2b       	or	r24, r25
    10e6:	19 f0       	breq	.+6      	; 0x10ee <set_origen+0x36>
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    10ee:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <DER>
    10f2:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <IZQ>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	33 23       	and	r19, r19
    10fc:	11 f0       	breq	.+4      	; 0x1102 <set_origen+0x4a>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	82 23       	and	r24, r18
    1106:	93 23       	and	r25, r19
    1108:	89 2b       	or	r24, r25
    110a:	19 f0       	breq	.+6      	; 0x1112 <set_origen+0x5a>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    1112:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <DER>
    1116:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <IZQ>
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	81 11       	cpse	r24, r1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	21 11       	cpse	r18, r1
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	89 23       	and	r24, r25
    1128:	11 f0       	breq	.+4      	; 0x112e <set_origen+0x76>
    112a:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <estado>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	80 e7       	ldi	r24, 0x70	; 112
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	80 40       	sbci	r24, 0x00	; 0
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	e1 f7       	brne	.-8      	; 0x1134 <set_origen+0x7c>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <set_origen+0x86>
    113e:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    1140:	89 b1       	in	r24, 0x09	; 9
    1142:	88 70       	andi	r24, 0x08	; 8
    1144:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <IZQ>
	DER = LEERDER;
    1148:	89 b1       	in	r24, 0x09	; 9
    114a:	84 70       	andi	r24, 0x04	; 4
    114c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1150:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <estado>
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	e1 55       	subi	r30, 0x51	; 81
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
    115e:	01 90       	ld	r0, Z+
    1160:	f0 81       	ld	r31, Z
    1162:	e0 2d       	mov	r30, r0
    1164:	09 95       	icall
	
	angulo = 0;	
    1166:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <angulo+0x1>
    116a:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <angulo>
    116e:	08 95       	ret

00001170 <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    1170:	8a b1       	in	r24, 0x0a	; 10
    1172:	8b 7f       	andi	r24, 0xFB	; 251
    1174:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    1176:	8b b1       	in	r24, 0x0b	; 11
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    117c:	8a b1       	in	r24, 0x0a	; 10
    117e:	87 7f       	andi	r24, 0xF7	; 247
    1180:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    1182:	8b b1       	in	r24, 0x0b	; 11
    1184:	88 60       	ori	r24, 0x08	; 8
    1186:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    1188:	8d b3       	in	r24, 0x1d	; 29
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    118e:	e9 e6       	ldi	r30, 0x69	; 105
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    1198:	80 81       	ld	r24, Z
    119a:	8d 7f       	andi	r24, 0xFD	; 253
    119c:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    119e:	8d b3       	in	r24, 0x1d	; 29
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    11a4:	80 81       	ld	r24, Z
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    11aa:	80 81       	ld	r24, Z
    11ac:	87 7f       	andi	r24, 0xF7	; 247
    11ae:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    11bc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    11c0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    11c4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <set_origen>
    11c8:	08 95       	ret

000011ca <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	2f 93       	push	r18
    11d6:	3f 93       	push	r19
    11d8:	4f 93       	push	r20
    11da:	5f 93       	push	r21
    11dc:	6f 93       	push	r22
    11de:	7f 93       	push	r23
    11e0:	8f 93       	push	r24
    11e2:	9f 93       	push	r25
    11e4:	af 93       	push	r26
    11e6:	bf 93       	push	r27
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    11ec:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <derivate_counter_I>
    11f0:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <derivate_counter_I+0x1>
    11f4:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <derivate_I+0x1>
    11f8:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <derivate_I>
	derivate_counter_I = 0;
    11fc:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <derivate_counter_I+0x1>
    1200:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <derivate_counter_I>
	IZQ = LEERIZQ;
    1204:	89 b1       	in	r24, 0x09	; 9
    1206:	88 70       	andi	r24, 0x08	; 8
    1208:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <IZQ>
	DER = LEERDER;
    120c:	89 b1       	in	r24, 0x09	; 9
    120e:	84 70       	andi	r24, 0x04	; 4
    1210:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1214:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <estado>
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	e1 55       	subi	r30, 0x51	; 81
    1220:	fd 4f       	sbci	r31, 0xFD	; 253
    1222:	01 90       	ld	r0, Z+
    1224:	f0 81       	ld	r31, Z
    1226:	e0 2d       	mov	r30, r0
    1228:	09 95       	icall
}
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    126e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <derivate_counter_D>
    1272:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <derivate_counter_D+0x1>
    1276:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <derivate_D+0x1>
    127a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <derivate_D>
	derivate_counter_D = 0;
    127e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <derivate_counter_D+0x1>
    1282:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <derivate_counter_D>
	IZQ = LEERIZQ;
    1286:	89 b1       	in	r24, 0x09	; 9
    1288:	88 70       	andi	r24, 0x08	; 8
    128a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <IZQ>
	DER = LEERDER;
    128e:	89 b1       	in	r24, 0x09	; 9
    1290:	84 70       	andi	r24, 0x04	; 4
    1292:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1296:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <estado>
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	e1 55       	subi	r30, 0x51	; 81
    12a2:	fd 4f       	sbci	r31, 0xFD	; 253
    12a4:	01 90       	ld	r0, Z+
    12a6:	f0 81       	ld	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	09 95       	icall
}
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D!=32000)derivate_counter_D++;
    12de:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <derivate_counter_D>
    12e2:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <derivate_counter_D+0x1>
    12e6:	81 15       	cp	r24, r1
    12e8:	9d 47       	sbci	r25, 0x7D	; 125
    12ea:	49 f0       	breq	.+18     	; 0x12fe <__vector_7+0x30>
    12ec:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <derivate_counter_D>
    12f0:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <derivate_counter_D+0x1>
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <derivate_counter_D+0x1>
    12fa:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <derivate_counter_D>
	if(derivate_counter_I!=32000)derivate_counter_I++;
    12fe:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <derivate_counter_I>
    1302:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <derivate_counter_I+0x1>
    1306:	81 15       	cp	r24, r1
    1308:	9d 47       	sbci	r25, 0x7D	; 125
    130a:	49 f0       	breq	.+18     	; 0x131e <__vector_7+0x50>
    130c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <derivate_counter_I>
    1310:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <derivate_counter_I+0x1>
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <derivate_counter_I+0x1>
    131a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <derivate_counter_I>
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <getTiempoInforme>:
	return tiempoInforme;
}

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
}
    132e:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <tiempoInforme>
    1332:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <tiempoInforme+0x1>
    1336:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <tiempoInforme+0x2>
    133a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <tiempoInforme+0x3>
    133e:	08 95       	ret

00001340 <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    1340:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <contPID>
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <contPID>
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	29 f4       	brne	.+10     	; 0x1358 <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Flag_PID>
		contPID=0;
    1354:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    1358:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <contInformo>
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <contInformo>
    1362:	84 31       	cpi	r24, 0x14	; 20
    1364:	29 f4       	brne	.+10     	; 0x1370 <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <Flag_Informo>
		contInformo=0;
    136c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    1370:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <contButtton>
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <contButtton>
    137a:	8a 30       	cpi	r24, 0x0A	; 10
    137c:	29 f4       	brne	.+10     	; 0x1388 <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <Flag_Button>
		contButtton=0;
    1384:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    1388:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <contLeerDatos>
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <contLeerDatos>
    1392:	88 32       	cpi	r24, 0x28	; 40
    1394:	29 f4       	brne	.+10     	; 0x13a0 <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <Flag_leerDatos>
		contLeerDatos=0;
    139c:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <contLeerDatos>
    13a0:	08 95       	ret

000013a2 <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    13a2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Flag_PID>
    13a6:	88 23       	and	r24, r24
    13a8:	21 f0       	breq	.+8      	; 0x13b2 <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    13aa:	0e 94 00 04 	call	0x800	; 0x800 <Actulizar_PID>
		Flag_PID = 0;
    13ae:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <Flag_PID>
	}
	if(Flag_Informo){
    13b2:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <Flag_Informo>
    13b6:	88 23       	and	r24, r24
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    13ba:	0e 94 01 01 	call	0x202	; 0x202 <Informar_Actulizar>
		Flag_Informo = 0;
    13be:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <Flag_Informo>
	}
	if(Flag_Button){
    13c2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <Flag_Button>
    13c6:	88 23       	and	r24, r24
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    13ca:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    13ce:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <Flag_Button>
	}
	if(Flag_leerDatos){
    13d2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <Flag_leerDatos>
    13d6:	88 23       	and	r24, r24
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    13da:	0e 94 81 01 	call	0x302	; 0x302 <actulizar_leerDatos>
		Flag_leerDatos=0;
    13de:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <Flag_leerDatos>
    13e2:	08 95       	ret

000013e4 <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    13ec:	9c e7       	ldi	r25, 0x7C	; 124
    13ee:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    13f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    13f4:	08 95       	ret

000013f6 <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    1418:	0e 94 a0 09 	call	0x1340	; 0x1340 <SEOS_SCH_Tasks>
	tiempoSEOS++;
    141c:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <tiempoSEOS>
    1420:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <tiempoSEOS+0x1>
    1424:	a0 91 30 03 	lds	r26, 0x0330	; 0x800330 <tiempoSEOS+0x2>
    1428:	b0 91 31 03 	lds	r27, 0x0331	; 0x800331 <tiempoSEOS+0x3>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	a1 1d       	adc	r26, r1
    1430:	b1 1d       	adc	r27, r1
    1432:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <tiempoSEOS>
    1436:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <tiempoSEOS+0x1>
    143a:	a0 93 30 03 	sts	0x0330, r26	; 0x800330 <tiempoSEOS+0x2>
    143e:	b0 93 31 03 	sts	0x0331, r27	; 0x800331 <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    1442:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <contTiempo>
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	98 0f       	add	r25, r24
    144a:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <contTiempo>
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	a8 f0       	brcs	.+42     	; 0x147c <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    1452:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tiempoInforme>
    1456:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tiempoInforme+0x1>
    145a:	a0 91 2c 03 	lds	r26, 0x032C	; 0x80032c <tiempoInforme+0x2>
    145e:	b0 91 2d 03 	lds	r27, 0x032D	; 0x80032d <tiempoInforme+0x3>
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	a1 1d       	adc	r26, r1
    1466:	b1 1d       	adc	r27, r1
    1468:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <tiempoInforme>
    146c:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <tiempoInforme+0x1>
    1470:	a0 93 2c 03 	sts	0x032C, r26	; 0x80032c <tiempoInforme+0x2>
    1474:	b0 93 2d 03 	sts	0x032D, r27	; 0x80032d <tiempoInforme+0x3>
		contTiempo=0;
    1478:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <contTiempo>
	}
}
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
    14ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14b4:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <valor+0x1>
    14b8:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <valor>
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <Inicializacion_slideResistor>:
    14ca:	87 b1       	in	r24, 0x07	; 7
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	87 b9       	out	0x07, r24	; 7
    14d0:	88 b1       	in	r24, 0x08	; 8
    14d2:	8e 7f       	andi	r24, 0xFE	; 254
    14d4:	88 b9       	out	0x08, r24	; 8
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    14dc:	ea e7       	ldi	r30, 0x7A	; 122
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8f ea       	ldi	r24, 0xAF	; 175
    14e2:	80 83       	st	Z, r24
    14e4:	ac e7       	ldi	r26, 0x7C	; 124
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	8c 91       	ld	r24, X
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	8c 93       	st	X, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	80 83       	st	Z, r24
    14f4:	08 95       	ret

000014f6 <getSlideResistor>:

uint16_t getSlideResistor(){
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    14fa:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <i>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	96 39       	cpi	r25, 0x96	; 150
    1502:	08 f4       	brcc	.+2      	; 0x1506 <getSlideResistor+0x10>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	2a e6       	ldi	r18, 0x6A	; 106
    1508:	82 9f       	mul	r24, r18
    150a:	90 0d       	add	r25, r0
    150c:	11 24       	eor	r1, r1
    150e:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <i>
	i = (i+1)%CANT;
    1512:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <i>
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	6f e0       	ldi	r22, 0x0F	; 15
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    1522:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <i>
	valores[i]=valor;
    1526:	c0 91 38 03 	lds	r28, 0x0338	; 0x800338 <i>
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	cc 0f       	add	r28, r28
    152e:	dd 1f       	adc	r29, r29
    1530:	cc 0f       	add	r28, r28
    1532:	dd 1f       	adc	r29, r29
    1534:	c3 5c       	subi	r28, 0xC3	; 195
    1536:	dc 4f       	sbci	r29, 0xFC	; 252
    1538:	60 91 79 03 	lds	r22, 0x0379	; 0x800379 <valor>
    153c:	70 91 7a 03 	lds	r23, 0x037A	; 0x80037a <valor+0x1>
    1540:	07 2e       	mov	r0, r23
    1542:	00 0c       	add	r0, r0
    1544:	88 0b       	sbc	r24, r24
    1546:	99 0b       	sbc	r25, r25
    1548:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__floatsisf>
    154c:	68 83       	st	Y, r22
    154e:	79 83       	std	Y+1, r23	; 0x01
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    1554:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <total>
    1558:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <total+0x1>
    155c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <total+0x2>
    1560:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <total+0x3>
	for(k=0;k<CANT;k++){
    1564:	c0 e0       	ldi	r28, 0x00	; 0
    1566:	28 c0       	rjmp	.+80     	; 0x15b8 <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    1568:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <i>
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0f 96       	adiw	r24, 0x0f	; 15
    1570:	8c 1b       	sub	r24, r28
    1572:	91 09       	sbc	r25, r1
    1574:	6f e0       	ldi	r22, 0x0F	; 15
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    157c:	fc 01       	movw	r30, r24
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	e3 5c       	subi	r30, 0xC3	; 195
    1588:	fc 4f       	sbci	r31, 0xFC	; 252
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <total>
    1596:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <total+0x1>
    159a:	40 91 3b 03 	lds	r20, 0x033B	; 0x80033b <total+0x2>
    159e:	50 91 3c 03 	lds	r21, 0x033C	; 0x80033c <total+0x3>
    15a2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3>
    15a6:	60 93 39 03 	sts	0x0339, r22	; 0x800339 <total>
    15aa:	70 93 3a 03 	sts	0x033A, r23	; 0x80033a <total+0x1>
    15ae:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <total+0x2>
    15b2:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    15b6:	cf 5f       	subi	r28, 0xFF	; 255
    15b8:	cf 30       	cpi	r28, 0x0F	; 15
    15ba:	b0 f2       	brcs	.-84     	; 0x1568 <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e7       	ldi	r20, 0x70	; 112
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <total>
    15c8:	70 91 3a 03 	lds	r23, 0x033A	; 0x80033a <total+0x1>
    15cc:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <total+0x2>
    15d0:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <total+0x3>
    15d4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__divsf3>
    15d8:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixunssfsi>
    15dc:	cb 01       	movw	r24, r22
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    15e4:	86 e0       	ldi	r24, 0x06	; 6
    15e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    15f0:	e1 ec       	ldi	r30, 0xC1	; 193
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 61       	ori	r24, 0x10	; 16
    15f8:	80 83       	st	Z, r24
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	80 83       	st	Z, r24
    1600:	80 81       	ld	r24, Z
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	80 83       	st	Z, r24
    1606:	80 81       	ld	r24, Z
    1608:	80 62       	ori	r24, 0x20	; 32
    160a:	80 83       	st	Z, r24
    160c:	e0 ec       	ldi	r30, 0xC0	; 192
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 62       	ori	r24, 0x20	; 32
    1614:	80 83       	st	Z, r24
    1616:	08 95       	ret

00001618 <getEspacioDisponibleBuffer>:
    1618:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <tx_buffer_write>
    161c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <tx_buffer_read>
    1620:	98 17       	cp	r25, r24
    1622:	18 f0       	brcs	.+6      	; 0x162a <getEspacioDisponibleBuffer+0x12>
    1624:	89 1b       	sub	r24, r25
    1626:	8a 51       	subi	r24, 0x1A	; 26
    1628:	08 95       	ret
    162a:	89 1b       	sub	r24, r25
    162c:	08 95       	ret

0000162e <UART_TransmitChar>:
    162e:	48 2f       	mov	r20, r24
    1630:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <tx_buffer_write>
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	66 ee       	ldi	r22, 0xE6	; 230
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    1642:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <tx_buffer_read>
    1646:	98 17       	cp	r25, r24
    1648:	59 f0       	breq	.+22     	; 0x1660 <UART_TransmitChar+0x32>
    164a:	f9 01       	movw	r30, r18
    164c:	ec 51       	subi	r30, 0x1C	; 28
    164e:	fc 4f       	sbci	r31, 0xFC	; 252
    1650:	40 83       	st	Z, r20
    1652:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <tx_buffer_write>
    1656:	e1 ec       	ldi	r30, 0xC1	; 193
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 62       	ori	r24, 0x20	; 32
    165e:	80 83       	st	Z, r24
    1660:	08 95       	ret

00001662 <UART_TransmitString>:
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	16 2f       	mov	r17, r22
    166c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <getEspacioDisponibleBuffer>
    1670:	18 17       	cp	r17, r24
    1672:	20 f0       	brcs	.+8      	; 0x167c <UART_TransmitString+0x1a>
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <UART_TransmitString+0x20>
    1676:	0e 94 17 0b 	call	0x162e	; 0x162e <UART_TransmitChar>
    167a:	21 96       	adiw	r28, 0x01	; 1
    167c:	88 81       	ld	r24, Y
    167e:	81 11       	cpse	r24, r1
    1680:	fa cf       	rjmp	.-12     	; 0x1676 <UART_TransmitString+0x14>
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	08 95       	ret

0000168a <__vector_19>:
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <tx_buffer_read>
    16aa:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <tx_buffer_write>
    16ae:	e8 17       	cp	r30, r24
    16b0:	89 f0       	breq	.+34     	; 0x16d4 <__vector_19+0x4a>
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	ec 51       	subi	r30, 0x1C	; 28
    16b6:	fc 4f       	sbci	r31, 0xFC	; 252
    16b8:	80 81       	ld	r24, Z
    16ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    16be:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <tx_buffer_read>
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	66 ee       	ldi	r22, 0xE6	; 230
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    16ce:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <tx_buffer_read>
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <__vector_19+0x54>
    16d4:	e1 ec       	ldi	r30, 0xC1	; 193
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8f 7d       	andi	r24, 0xDF	; 223
    16dc:	80 83       	st	Z, r24
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <SacarDatosBufferEnter>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
    1700:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <recibioEnter>
    1704:	88 23       	and	r24, r24
    1706:	21 f1       	breq	.+72     	; 0x1750 <SacarDatosBufferEnter+0x56>
    1708:	f8 94       	cli
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	11 c0       	rjmp	.+34     	; 0x1730 <SacarDatosBufferEnter+0x36>
    170e:	fe 01       	movw	r30, r28
    1710:	e2 0f       	add	r30, r18
    1712:	f1 1d       	adc	r31, r1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	dc 01       	movw	r26, r24
    1718:	a2 58       	subi	r26, 0x82	; 130
    171a:	bc 4f       	sbci	r27, 0xFC	; 252
    171c:	3c 91       	ld	r19, X
    171e:	30 83       	st	Z, r19
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	64 e6       	ldi	r22, 0x64	; 100
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
    172a:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <rx_buffer_read>
    172e:	2f 5f       	subi	r18, 0xFF	; 255
    1730:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <rx_buffer_write>
    1734:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <rx_buffer_read>
    1738:	98 17       	cp	r25, r24
    173a:	11 f0       	breq	.+4      	; 0x1740 <SacarDatosBufferEnter+0x46>
    173c:	23 36       	cpi	r18, 0x63	; 99
    173e:	38 f3       	brcs	.-50     	; 0x170e <SacarDatosBufferEnter+0x14>
    1740:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <recibioEnter>
    1744:	78 94       	sei
    1746:	c2 0f       	add	r28, r18
    1748:	d1 1d       	adc	r29, r1
    174a:	18 82       	st	Y, r1
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <SacarDatosBufferEnter+0x58>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <__vector_18>:

ISR(USART_RX_vect){
    1758:	1f 92       	push	r1
    175a:	0f 92       	push	r0
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	0f 92       	push	r0
    1760:	11 24       	eor	r1, r1
    1762:	2f 93       	push	r18
    1764:	3f 93       	push	r19
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    1778:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rx_buffer_write>
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	64 e6       	ldi	r22, 0x64	; 100
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
	uint8_t receivedChar = UDR0;
    1788:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    178c:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <rx_buffer_read>
    1790:	28 17       	cp	r18, r24
    1792:	a9 f0       	breq	.+42     	; 0x17be <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    1794:	9a 30       	cpi	r25, 0x0A	; 10
    1796:	11 f0       	breq	.+4      	; 0x179c <__vector_18+0x44>
    1798:	9d 30       	cpi	r25, 0x0D	; 13
    179a:	21 f4       	brne	.+8      	; 0x17a4 <__vector_18+0x4c>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <recibioEnter>
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    17a4:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <recibioEnter>
    17a8:	31 11       	cpse	r19, r1
    17aa:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    17ae:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <rx_buffer_write>
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	e2 58       	subi	r30, 0x82	; 130
    17b6:	fc 4f       	sbci	r31, 0xFC	; 252
    17b8:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    17ba:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rx_buffer_write>
		}
	}
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__subsf3>:
    17de:	50 58       	subi	r21, 0x80	; 128

000017e0 <__addsf3>:
    17e0:	bb 27       	eor	r27, r27
    17e2:	aa 27       	eor	r26, r26
    17e4:	0e 94 07 0c 	call	0x180e	; 0x180e <__addsf3x>
    17e8:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_round>
    17ec:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_pscA>
    17f0:	38 f0       	brcs	.+14     	; 0x1800 <__addsf3+0x20>
    17f2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__fp_pscB>
    17f6:	20 f0       	brcs	.+8      	; 0x1800 <__addsf3+0x20>
    17f8:	39 f4       	brne	.+14     	; 0x1808 <__addsf3+0x28>
    17fa:	9f 3f       	cpi	r25, 0xFF	; 255
    17fc:	19 f4       	brne	.+6      	; 0x1804 <__addsf3+0x24>
    17fe:	26 f4       	brtc	.+8      	; 0x1808 <__addsf3+0x28>
    1800:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_nan>
    1804:	0e f4       	brtc	.+2      	; 0x1808 <__addsf3+0x28>
    1806:	e0 95       	com	r30
    1808:	e7 fb       	bst	r30, 7
    180a:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_inf>

0000180e <__addsf3x>:
    180e:	e9 2f       	mov	r30, r25
    1810:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__fp_split3>
    1814:	58 f3       	brcs	.-42     	; 0x17ec <__addsf3+0xc>
    1816:	ba 17       	cp	r27, r26
    1818:	62 07       	cpc	r22, r18
    181a:	73 07       	cpc	r23, r19
    181c:	84 07       	cpc	r24, r20
    181e:	95 07       	cpc	r25, r21
    1820:	20 f0       	brcs	.+8      	; 0x182a <__addsf3x+0x1c>
    1822:	79 f4       	brne	.+30     	; 0x1842 <__addsf3x+0x34>
    1824:	a6 f5       	brtc	.+104    	; 0x188e <__addsf3x+0x80>
    1826:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_zero>
    182a:	0e f4       	brtc	.+2      	; 0x182e <__addsf3x+0x20>
    182c:	e0 95       	com	r30
    182e:	0b 2e       	mov	r0, r27
    1830:	ba 2f       	mov	r27, r26
    1832:	a0 2d       	mov	r26, r0
    1834:	0b 01       	movw	r0, r22
    1836:	b9 01       	movw	r22, r18
    1838:	90 01       	movw	r18, r0
    183a:	0c 01       	movw	r0, r24
    183c:	ca 01       	movw	r24, r20
    183e:	a0 01       	movw	r20, r0
    1840:	11 24       	eor	r1, r1
    1842:	ff 27       	eor	r31, r31
    1844:	59 1b       	sub	r21, r25
    1846:	99 f0       	breq	.+38     	; 0x186e <__addsf3x+0x60>
    1848:	59 3f       	cpi	r21, 0xF9	; 249
    184a:	50 f4       	brcc	.+20     	; 0x1860 <__addsf3x+0x52>
    184c:	50 3e       	cpi	r21, 0xE0	; 224
    184e:	68 f1       	brcs	.+90     	; 0x18aa <__addsf3x+0x9c>
    1850:	1a 16       	cp	r1, r26
    1852:	f0 40       	sbci	r31, 0x00	; 0
    1854:	a2 2f       	mov	r26, r18
    1856:	23 2f       	mov	r18, r19
    1858:	34 2f       	mov	r19, r20
    185a:	44 27       	eor	r20, r20
    185c:	58 5f       	subi	r21, 0xF8	; 248
    185e:	f3 cf       	rjmp	.-26     	; 0x1846 <__addsf3x+0x38>
    1860:	46 95       	lsr	r20
    1862:	37 95       	ror	r19
    1864:	27 95       	ror	r18
    1866:	a7 95       	ror	r26
    1868:	f0 40       	sbci	r31, 0x00	; 0
    186a:	53 95       	inc	r21
    186c:	c9 f7       	brne	.-14     	; 0x1860 <__addsf3x+0x52>
    186e:	7e f4       	brtc	.+30     	; 0x188e <__addsf3x+0x80>
    1870:	1f 16       	cp	r1, r31
    1872:	ba 0b       	sbc	r27, r26
    1874:	62 0b       	sbc	r22, r18
    1876:	73 0b       	sbc	r23, r19
    1878:	84 0b       	sbc	r24, r20
    187a:	ba f0       	brmi	.+46     	; 0x18aa <__addsf3x+0x9c>
    187c:	91 50       	subi	r25, 0x01	; 1
    187e:	a1 f0       	breq	.+40     	; 0x18a8 <__addsf3x+0x9a>
    1880:	ff 0f       	add	r31, r31
    1882:	bb 1f       	adc	r27, r27
    1884:	66 1f       	adc	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	c2 f7       	brpl	.-16     	; 0x187c <__addsf3x+0x6e>
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <__addsf3x+0x9c>
    188e:	ba 0f       	add	r27, r26
    1890:	62 1f       	adc	r22, r18
    1892:	73 1f       	adc	r23, r19
    1894:	84 1f       	adc	r24, r20
    1896:	48 f4       	brcc	.+18     	; 0x18aa <__addsf3x+0x9c>
    1898:	87 95       	ror	r24
    189a:	77 95       	ror	r23
    189c:	67 95       	ror	r22
    189e:	b7 95       	ror	r27
    18a0:	f7 95       	ror	r31
    18a2:	9e 3f       	cpi	r25, 0xFE	; 254
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <__addsf3x+0x9a>
    18a6:	b0 cf       	rjmp	.-160    	; 0x1808 <__addsf3+0x28>
    18a8:	93 95       	inc	r25
    18aa:	88 0f       	add	r24, r24
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <__addsf3x+0xa2>
    18ae:	99 27       	eor	r25, r25
    18b0:	ee 0f       	add	r30, r30
    18b2:	97 95       	ror	r25
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret

000018b8 <__cmpsf2>:
    18b8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_cmp>
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <__cmpsf2+0x8>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	08 95       	ret

000018c2 <__divsf3>:
    18c2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divsf3x>
    18c6:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_round>
    18ca:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__fp_pscB>
    18ce:	58 f0       	brcs	.+22     	; 0x18e6 <__divsf3+0x24>
    18d0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_pscA>
    18d4:	40 f0       	brcs	.+16     	; 0x18e6 <__divsf3+0x24>
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <__divsf3+0x20>
    18d8:	5f 3f       	cpi	r21, 0xFF	; 255
    18da:	29 f0       	breq	.+10     	; 0x18e6 <__divsf3+0x24>
    18dc:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_inf>
    18e0:	51 11       	cpse	r21, r1
    18e2:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_szero>
    18e6:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_nan>

000018ea <__divsf3x>:
    18ea:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__fp_split3>
    18ee:	68 f3       	brcs	.-38     	; 0x18ca <__divsf3+0x8>

000018f0 <__divsf3_pse>:
    18f0:	99 23       	and	r25, r25
    18f2:	b1 f3       	breq	.-20     	; 0x18e0 <__divsf3+0x1e>
    18f4:	55 23       	and	r21, r21
    18f6:	91 f3       	breq	.-28     	; 0x18dc <__divsf3+0x1a>
    18f8:	95 1b       	sub	r25, r21
    18fa:	55 0b       	sbc	r21, r21
    18fc:	bb 27       	eor	r27, r27
    18fe:	aa 27       	eor	r26, r26
    1900:	62 17       	cp	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	38 f0       	brcs	.+14     	; 0x1916 <__divsf3_pse+0x26>
    1908:	9f 5f       	subi	r25, 0xFF	; 255
    190a:	5f 4f       	sbci	r21, 0xFF	; 255
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	44 1f       	adc	r20, r20
    1912:	aa 1f       	adc	r26, r26
    1914:	a9 f3       	breq	.-22     	; 0x1900 <__divsf3_pse+0x10>
    1916:	35 d0       	rcall	.+106    	; 0x1982 <__divsf3_pse+0x92>
    1918:	0e 2e       	mov	r0, r30
    191a:	3a f0       	brmi	.+14     	; 0x192a <__divsf3_pse+0x3a>
    191c:	e0 e8       	ldi	r30, 0x80	; 128
    191e:	32 d0       	rcall	.+100    	; 0x1984 <__divsf3_pse+0x94>
    1920:	91 50       	subi	r25, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	e6 95       	lsr	r30
    1926:	00 1c       	adc	r0, r0
    1928:	ca f7       	brpl	.-14     	; 0x191c <__divsf3_pse+0x2c>
    192a:	2b d0       	rcall	.+86     	; 0x1982 <__divsf3_pse+0x92>
    192c:	fe 2f       	mov	r31, r30
    192e:	29 d0       	rcall	.+82     	; 0x1982 <__divsf3_pse+0x92>
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	bb 1f       	adc	r27, r27
    1938:	26 17       	cp	r18, r22
    193a:	37 07       	cpc	r19, r23
    193c:	48 07       	cpc	r20, r24
    193e:	ab 07       	cpc	r26, r27
    1940:	b0 e8       	ldi	r27, 0x80	; 128
    1942:	09 f0       	breq	.+2      	; 0x1946 <__divsf3_pse+0x56>
    1944:	bb 0b       	sbc	r27, r27
    1946:	80 2d       	mov	r24, r0
    1948:	bf 01       	movw	r22, r30
    194a:	ff 27       	eor	r31, r31
    194c:	93 58       	subi	r25, 0x83	; 131
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	3a f0       	brmi	.+14     	; 0x1960 <__divsf3_pse+0x70>
    1952:	9e 3f       	cpi	r25, 0xFE	; 254
    1954:	51 05       	cpc	r21, r1
    1956:	78 f0       	brcs	.+30     	; 0x1976 <__divsf3_pse+0x86>
    1958:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_inf>
    195c:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_szero>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	e4 f3       	brlt	.-8      	; 0x195c <__divsf3_pse+0x6c>
    1964:	98 3e       	cpi	r25, 0xE8	; 232
    1966:	d4 f3       	brlt	.-12     	; 0x195c <__divsf3_pse+0x6c>
    1968:	86 95       	lsr	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f7 95       	ror	r31
    1972:	9f 5f       	subi	r25, 0xFF	; 255
    1974:	c9 f7       	brne	.-14     	; 0x1968 <__divsf3_pse+0x78>
    1976:	88 0f       	add	r24, r24
    1978:	91 1d       	adc	r25, r1
    197a:	96 95       	lsr	r25
    197c:	87 95       	ror	r24
    197e:	97 f9       	bld	r25, 7
    1980:	08 95       	ret
    1982:	e1 e0       	ldi	r30, 0x01	; 1
    1984:	66 0f       	add	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	bb 1f       	adc	r27, r27
    198c:	62 17       	cp	r22, r18
    198e:	73 07       	cpc	r23, r19
    1990:	84 07       	cpc	r24, r20
    1992:	ba 07       	cpc	r27, r26
    1994:	20 f0       	brcs	.+8      	; 0x199e <__divsf3_pse+0xae>
    1996:	62 1b       	sub	r22, r18
    1998:	73 0b       	sbc	r23, r19
    199a:	84 0b       	sbc	r24, r20
    199c:	ba 0b       	sbc	r27, r26
    199e:	ee 1f       	adc	r30, r30
    19a0:	88 f7       	brcc	.-30     	; 0x1984 <__divsf3_pse+0x94>
    19a2:	e0 95       	com	r30
    19a4:	08 95       	ret

000019a6 <__fixsfsi>:
    19a6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixunssfsi>
    19aa:	68 94       	set
    19ac:	b1 11       	cpse	r27, r1
    19ae:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_szero>
    19b2:	08 95       	ret

000019b4 <__fixunssfsi>:
    19b4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fp_splitA>
    19b8:	88 f0       	brcs	.+34     	; 0x19dc <__fixunssfsi+0x28>
    19ba:	9f 57       	subi	r25, 0x7F	; 127
    19bc:	98 f0       	brcs	.+38     	; 0x19e4 <__fixunssfsi+0x30>
    19be:	b9 2f       	mov	r27, r25
    19c0:	99 27       	eor	r25, r25
    19c2:	b7 51       	subi	r27, 0x17	; 23
    19c4:	b0 f0       	brcs	.+44     	; 0x19f2 <__fixunssfsi+0x3e>
    19c6:	e1 f0       	breq	.+56     	; 0x1a00 <__fixunssfsi+0x4c>
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	1a f0       	brmi	.+6      	; 0x19d8 <__fixunssfsi+0x24>
    19d2:	ba 95       	dec	r27
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__fixunssfsi+0x14>
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <__fixunssfsi+0x4c>
    19d8:	b1 30       	cpi	r27, 0x01	; 1
    19da:	91 f0       	breq	.+36     	; 0x1a00 <__fixunssfsi+0x4c>
    19dc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__fp_zero>
    19e0:	b1 e0       	ldi	r27, 0x01	; 1
    19e2:	08 95       	ret
    19e4:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_zero>
    19e8:	67 2f       	mov	r22, r23
    19ea:	78 2f       	mov	r23, r24
    19ec:	88 27       	eor	r24, r24
    19ee:	b8 5f       	subi	r27, 0xF8	; 248
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <__fixunssfsi+0x4c>
    19f2:	b9 3f       	cpi	r27, 0xF9	; 249
    19f4:	cc f3       	brlt	.-14     	; 0x19e8 <__fixunssfsi+0x34>
    19f6:	86 95       	lsr	r24
    19f8:	77 95       	ror	r23
    19fa:	67 95       	ror	r22
    19fc:	b3 95       	inc	r27
    19fe:	d9 f7       	brne	.-10     	; 0x19f6 <__fixunssfsi+0x42>
    1a00:	3e f4       	brtc	.+14     	; 0x1a10 <__fixunssfsi+0x5c>
    1a02:	90 95       	com	r25
    1a04:	80 95       	com	r24
    1a06:	70 95       	com	r23
    1a08:	61 95       	neg	r22
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	08 95       	ret

00001a12 <__floatunsisf>:
    1a12:	e8 94       	clt
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <__floatsisf+0x12>

00001a16 <__floatsisf>:
    1a16:	97 fb       	bst	r25, 7
    1a18:	3e f4       	brtc	.+14     	; 0x1a28 <__floatsisf+0x12>
    1a1a:	90 95       	com	r25
    1a1c:	80 95       	com	r24
    1a1e:	70 95       	com	r23
    1a20:	61 95       	neg	r22
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	99 23       	and	r25, r25
    1a2a:	a9 f0       	breq	.+42     	; 0x1a56 <__floatsisf+0x40>
    1a2c:	f9 2f       	mov	r31, r25
    1a2e:	96 e9       	ldi	r25, 0x96	; 150
    1a30:	bb 27       	eor	r27, r27
    1a32:	93 95       	inc	r25
    1a34:	f6 95       	lsr	r31
    1a36:	87 95       	ror	r24
    1a38:	77 95       	ror	r23
    1a3a:	67 95       	ror	r22
    1a3c:	b7 95       	ror	r27
    1a3e:	f1 11       	cpse	r31, r1
    1a40:	f8 cf       	rjmp	.-16     	; 0x1a32 <__floatsisf+0x1c>
    1a42:	fa f4       	brpl	.+62     	; 0x1a82 <__floatsisf+0x6c>
    1a44:	bb 0f       	add	r27, r27
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <__floatsisf+0x36>
    1a48:	60 ff       	sbrs	r22, 0
    1a4a:	1b c0       	rjmp	.+54     	; 0x1a82 <__floatsisf+0x6c>
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	16 c0       	rjmp	.+44     	; 0x1a82 <__floatsisf+0x6c>
    1a56:	88 23       	and	r24, r24
    1a58:	11 f0       	breq	.+4      	; 0x1a5e <__floatsisf+0x48>
    1a5a:	96 e9       	ldi	r25, 0x96	; 150
    1a5c:	11 c0       	rjmp	.+34     	; 0x1a80 <__floatsisf+0x6a>
    1a5e:	77 23       	and	r23, r23
    1a60:	21 f0       	breq	.+8      	; 0x1a6a <__floatsisf+0x54>
    1a62:	9e e8       	ldi	r25, 0x8E	; 142
    1a64:	87 2f       	mov	r24, r23
    1a66:	76 2f       	mov	r23, r22
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <__floatsisf+0x5e>
    1a6a:	66 23       	and	r22, r22
    1a6c:	71 f0       	breq	.+28     	; 0x1a8a <__floatsisf+0x74>
    1a6e:	96 e8       	ldi	r25, 0x86	; 134
    1a70:	86 2f       	mov	r24, r22
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	2a f0       	brmi	.+10     	; 0x1a82 <__floatsisf+0x6c>
    1a78:	9a 95       	dec	r25
    1a7a:	66 0f       	add	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 1f       	adc	r24, r24
    1a80:	da f7       	brpl	.-10     	; 0x1a78 <__floatsisf+0x62>
    1a82:	88 0f       	add	r24, r24
    1a84:	96 95       	lsr	r25
    1a86:	87 95       	ror	r24
    1a88:	97 f9       	bld	r25, 7
    1a8a:	08 95       	ret

00001a8c <__fp_cmp>:
    1a8c:	99 0f       	add	r25, r25
    1a8e:	00 08       	sbc	r0, r0
    1a90:	55 0f       	add	r21, r21
    1a92:	aa 0b       	sbc	r26, r26
    1a94:	e0 e8       	ldi	r30, 0x80	; 128
    1a96:	fe ef       	ldi	r31, 0xFE	; 254
    1a98:	16 16       	cp	r1, r22
    1a9a:	17 06       	cpc	r1, r23
    1a9c:	e8 07       	cpc	r30, r24
    1a9e:	f9 07       	cpc	r31, r25
    1aa0:	c0 f0       	brcs	.+48     	; 0x1ad2 <__fp_cmp+0x46>
    1aa2:	12 16       	cp	r1, r18
    1aa4:	13 06       	cpc	r1, r19
    1aa6:	e4 07       	cpc	r30, r20
    1aa8:	f5 07       	cpc	r31, r21
    1aaa:	98 f0       	brcs	.+38     	; 0x1ad2 <__fp_cmp+0x46>
    1aac:	62 1b       	sub	r22, r18
    1aae:	73 0b       	sbc	r23, r19
    1ab0:	84 0b       	sbc	r24, r20
    1ab2:	95 0b       	sbc	r25, r21
    1ab4:	39 f4       	brne	.+14     	; 0x1ac4 <__fp_cmp+0x38>
    1ab6:	0a 26       	eor	r0, r26
    1ab8:	61 f0       	breq	.+24     	; 0x1ad2 <__fp_cmp+0x46>
    1aba:	23 2b       	or	r18, r19
    1abc:	24 2b       	or	r18, r20
    1abe:	25 2b       	or	r18, r21
    1ac0:	21 f4       	brne	.+8      	; 0x1aca <__fp_cmp+0x3e>
    1ac2:	08 95       	ret
    1ac4:	0a 26       	eor	r0, r26
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <__fp_cmp+0x3e>
    1ac8:	a1 40       	sbci	r26, 0x01	; 1
    1aca:	a6 95       	lsr	r26
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	81 1d       	adc	r24, r1
    1ad0:	81 1d       	adc	r24, r1
    1ad2:	08 95       	ret

00001ad4 <__fp_inf>:
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	9f 67       	ori	r25, 0x7F	; 127
    1ad8:	80 e8       	ldi	r24, 0x80	; 128
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	08 95       	ret

00001ae0 <__fp_nan>:
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	80 ec       	ldi	r24, 0xC0	; 192
    1ae4:	08 95       	ret

00001ae6 <__fp_pscA>:
    1ae6:	00 24       	eor	r0, r0
    1ae8:	0a 94       	dec	r0
    1aea:	16 16       	cp	r1, r22
    1aec:	17 06       	cpc	r1, r23
    1aee:	18 06       	cpc	r1, r24
    1af0:	09 06       	cpc	r0, r25
    1af2:	08 95       	ret

00001af4 <__fp_pscB>:
    1af4:	00 24       	eor	r0, r0
    1af6:	0a 94       	dec	r0
    1af8:	12 16       	cp	r1, r18
    1afa:	13 06       	cpc	r1, r19
    1afc:	14 06       	cpc	r1, r20
    1afe:	05 06       	cpc	r0, r21
    1b00:	08 95       	ret

00001b02 <__fp_round>:
    1b02:	09 2e       	mov	r0, r25
    1b04:	03 94       	inc	r0
    1b06:	00 0c       	add	r0, r0
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <__fp_round+0xc>
    1b0a:	88 23       	and	r24, r24
    1b0c:	52 f0       	brmi	.+20     	; 0x1b22 <__fp_round+0x20>
    1b0e:	bb 0f       	add	r27, r27
    1b10:	40 f4       	brcc	.+16     	; 0x1b22 <__fp_round+0x20>
    1b12:	bf 2b       	or	r27, r31
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <__fp_round+0x18>
    1b16:	60 ff       	sbrs	r22, 0
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <__fp_round+0x20>
    1b1a:	6f 5f       	subi	r22, 0xFF	; 255
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	08 95       	ret

00001b24 <__fp_split3>:
    1b24:	57 fd       	sbrc	r21, 7
    1b26:	90 58       	subi	r25, 0x80	; 128
    1b28:	44 0f       	add	r20, r20
    1b2a:	55 1f       	adc	r21, r21
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <__fp_splitA+0x10>
    1b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b30:	71 f0       	breq	.+28     	; 0x1b4e <__fp_splitA+0x1a>
    1b32:	47 95       	ror	r20

00001b34 <__fp_splitA>:
    1b34:	88 0f       	add	r24, r24
    1b36:	97 fb       	bst	r25, 7
    1b38:	99 1f       	adc	r25, r25
    1b3a:	61 f0       	breq	.+24     	; 0x1b54 <__fp_splitA+0x20>
    1b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3e:	79 f0       	breq	.+30     	; 0x1b5e <__fp_splitA+0x2a>
    1b40:	87 95       	ror	r24
    1b42:	08 95       	ret
    1b44:	12 16       	cp	r1, r18
    1b46:	13 06       	cpc	r1, r19
    1b48:	14 06       	cpc	r1, r20
    1b4a:	55 1f       	adc	r21, r21
    1b4c:	f2 cf       	rjmp	.-28     	; 0x1b32 <__fp_split3+0xe>
    1b4e:	46 95       	lsr	r20
    1b50:	f1 df       	rcall	.-30     	; 0x1b34 <__fp_splitA>
    1b52:	08 c0       	rjmp	.+16     	; 0x1b64 <__fp_splitA+0x30>
    1b54:	16 16       	cp	r1, r22
    1b56:	17 06       	cpc	r1, r23
    1b58:	18 06       	cpc	r1, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	f1 cf       	rjmp	.-30     	; 0x1b40 <__fp_splitA+0xc>
    1b5e:	86 95       	lsr	r24
    1b60:	71 05       	cpc	r23, r1
    1b62:	61 05       	cpc	r22, r1
    1b64:	08 94       	sec
    1b66:	08 95       	ret

00001b68 <__fp_zero>:
    1b68:	e8 94       	clt

00001b6a <__fp_szero>:
    1b6a:	bb 27       	eor	r27, r27
    1b6c:	66 27       	eor	r22, r22
    1b6e:	77 27       	eor	r23, r23
    1b70:	cb 01       	movw	r24, r22
    1b72:	97 f9       	bld	r25, 7
    1b74:	08 95       	ret

00001b76 <__gesf2>:
    1b76:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_cmp>
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <__gesf2+0x8>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	08 95       	ret

00001b80 <__mulsf3>:
    1b80:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__mulsf3x>
    1b84:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_round>
    1b88:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_pscA>
    1b8c:	38 f0       	brcs	.+14     	; 0x1b9c <__mulsf3+0x1c>
    1b8e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__mulsf3+0x1c>
    1b94:	95 23       	and	r25, r21
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <__mulsf3+0x1c>
    1b98:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_inf>
    1b9c:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_nan>
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_szero>

00001ba6 <__mulsf3x>:
    1ba6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__fp_split3>
    1baa:	70 f3       	brcs	.-36     	; 0x1b88 <__mulsf3+0x8>

00001bac <__mulsf3_pse>:
    1bac:	95 9f       	mul	r25, r21
    1bae:	c1 f3       	breq	.-16     	; 0x1ba0 <__mulsf3+0x20>
    1bb0:	95 0f       	add	r25, r21
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	62 9f       	mul	r22, r18
    1bb8:	f0 01       	movw	r30, r0
    1bba:	72 9f       	mul	r23, r18
    1bbc:	bb 27       	eor	r27, r27
    1bbe:	f0 0d       	add	r31, r0
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	63 9f       	mul	r22, r19
    1bc4:	aa 27       	eor	r26, r26
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	aa 1f       	adc	r26, r26
    1bcc:	64 9f       	mul	r22, r20
    1bce:	66 27       	eor	r22, r22
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	66 1f       	adc	r22, r22
    1bd6:	82 9f       	mul	r24, r18
    1bd8:	22 27       	eor	r18, r18
    1bda:	b0 0d       	add	r27, r0
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	62 1f       	adc	r22, r18
    1be0:	73 9f       	mul	r23, r19
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	62 1f       	adc	r22, r18
    1be8:	83 9f       	mul	r24, r19
    1bea:	a0 0d       	add	r26, r0
    1bec:	61 1d       	adc	r22, r1
    1bee:	22 1f       	adc	r18, r18
    1bf0:	74 9f       	mul	r23, r20
    1bf2:	33 27       	eor	r19, r19
    1bf4:	a0 0d       	add	r26, r0
    1bf6:	61 1d       	adc	r22, r1
    1bf8:	23 1f       	adc	r18, r19
    1bfa:	84 9f       	mul	r24, r20
    1bfc:	60 0d       	add	r22, r0
    1bfe:	21 1d       	adc	r18, r1
    1c00:	82 2f       	mov	r24, r18
    1c02:	76 2f       	mov	r23, r22
    1c04:	6a 2f       	mov	r22, r26
    1c06:	11 24       	eor	r1, r1
    1c08:	9f 57       	subi	r25, 0x7F	; 127
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	9a f0       	brmi	.+38     	; 0x1c34 <__mulsf3_pse+0x88>
    1c0e:	f1 f0       	breq	.+60     	; 0x1c4c <__mulsf3_pse+0xa0>
    1c10:	88 23       	and	r24, r24
    1c12:	4a f0       	brmi	.+18     	; 0x1c26 <__mulsf3_pse+0x7a>
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	91 50       	subi	r25, 0x01	; 1
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	a9 f7       	brne	.-22     	; 0x1c10 <__mulsf3_pse+0x64>
    1c26:	9e 3f       	cpi	r25, 0xFE	; 254
    1c28:	51 05       	cpc	r21, r1
    1c2a:	80 f0       	brcs	.+32     	; 0x1c4c <__mulsf3_pse+0xa0>
    1c2c:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_inf>
    1c30:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_szero>
    1c34:	5f 3f       	cpi	r21, 0xFF	; 255
    1c36:	e4 f3       	brlt	.-8      	; 0x1c30 <__mulsf3_pse+0x84>
    1c38:	98 3e       	cpi	r25, 0xE8	; 232
    1c3a:	d4 f3       	brlt	.-12     	; 0x1c30 <__mulsf3_pse+0x84>
    1c3c:	86 95       	lsr	r24
    1c3e:	77 95       	ror	r23
    1c40:	67 95       	ror	r22
    1c42:	b7 95       	ror	r27
    1c44:	f7 95       	ror	r31
    1c46:	e7 95       	ror	r30
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	c1 f7       	brne	.-16     	; 0x1c3c <__mulsf3_pse+0x90>
    1c4c:	fe 2b       	or	r31, r30
    1c4e:	88 0f       	add	r24, r24
    1c50:	91 1d       	adc	r25, r1
    1c52:	96 95       	lsr	r25
    1c54:	87 95       	ror	r24
    1c56:	97 f9       	bld	r25, 7
    1c58:	08 95       	ret

00001c5a <__udivmodhi4>:
    1c5a:	aa 1b       	sub	r26, r26
    1c5c:	bb 1b       	sub	r27, r27
    1c5e:	51 e1       	ldi	r21, 0x11	; 17
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <__udivmodhi4_ep>

00001c62 <__udivmodhi4_loop>:
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	a6 17       	cp	r26, r22
    1c68:	b7 07       	cpc	r27, r23
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <__udivmodhi4_ep>
    1c6c:	a6 1b       	sub	r26, r22
    1c6e:	b7 0b       	sbc	r27, r23

00001c70 <__udivmodhi4_ep>:
    1c70:	88 1f       	adc	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	5a 95       	dec	r21
    1c76:	a9 f7       	brne	.-22     	; 0x1c62 <__udivmodhi4_loop>
    1c78:	80 95       	com	r24
    1c7a:	90 95       	com	r25
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	08 95       	ret

00001c82 <__divmodhi4>:
    1c82:	97 fb       	bst	r25, 7
    1c84:	07 2e       	mov	r0, r23
    1c86:	16 f4       	brtc	.+4      	; 0x1c8c <__divmodhi4+0xa>
    1c88:	00 94       	com	r0
    1c8a:	07 d0       	rcall	.+14     	; 0x1c9a <__divmodhi4_neg1>
    1c8c:	77 fd       	sbrc	r23, 7
    1c8e:	09 d0       	rcall	.+18     	; 0x1ca2 <__divmodhi4_neg2>
    1c90:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__udivmodhi4>
    1c94:	07 fc       	sbrc	r0, 7
    1c96:	05 d0       	rcall	.+10     	; 0x1ca2 <__divmodhi4_neg2>
    1c98:	3e f4       	brtc	.+14     	; 0x1ca8 <__divmodhi4_exit>

00001c9a <__divmodhi4_neg1>:
    1c9a:	90 95       	com	r25
    1c9c:	81 95       	neg	r24
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	08 95       	ret

00001ca2 <__divmodhi4_neg2>:
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca8 <__divmodhi4_exit>:
    1ca8:	08 95       	ret

00001caa <_exit>:
    1caa:	f8 94       	cli

00001cac <__stop_program>:
    1cac:	ff cf       	rjmp	.-2      	; 0x1cac <__stop_program>
