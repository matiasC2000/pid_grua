
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  0000222a  000022be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000222a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  008002f4  008002f4  000024b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002945  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136b  00000000  00000000  000051a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d90  00000000  00000000  0000650c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000948  00000000  00000000  0000829c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb6  00000000  00000000  00008be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a9b  00000000  00000000  0000989a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000b335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__vector_1>
       8:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_11>
      30:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__vector_18>
      4c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e2       	ldi	r30, 0x2A	; 42
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3f       	cpi	r26, 0xF4	; 244
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a4 ef       	ldi	r26, 0xF4	; 244
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 31       	cpi	r26, 0x14	; 20
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      9e:	0c 94 13 11 	jmp	0x2226	; 0x2226 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0,FLAG_button_B_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <contAOFF>
		if(++contAON>15){
      c8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <contAON>
		if(++contAOFF>15){
      e8:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <FLAG_button_A_change>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0d c0       	rjmp	.+26     	; 0x12c <button_Actulizar+0x6c>
		//apretado
		contBOFF=0;
     112:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <contBOFF>
		if(++contB>15){
     116:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <contB>
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <contB>
     120:	80 31       	cpi	r24, 0x10	; 16
     122:	b8 f0       	brcs	.+46     	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B=1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <FLAG_button_B>
     12a:	08 95       	ret
			contBON=100;
		}
	}else{
		//lo solto
		contBON=0;
		if(++contBOFF>15){
     12c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <contBOFF>
     130:	8f 5f       	subi	r24, 0xFF	; 255
     132:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <contBOFF>
     136:	80 31       	cpi	r24, 0x10	; 16
     138:	28 f0       	brcs	.+10     	; 0x144 <button_Actulizar+0x84>
			FLAG_button_B=0;
     13a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <FLAG_button_B>
			contBOFF=100;
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <contBOFF>
		}
		if(contBOFF==13){
     144:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <contBOFF>
     148:	8d 30       	cpi	r24, 0x0D	; 13
     14a:	19 f4       	brne	.+6      	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B_change=1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end>
     152:	08 95       	ret

00000154 <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	82 ec       	ldi	r24, 0xC2	; 194
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
     15e:	08 95       	ret

00000160 <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     168:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     16e:	1b c0       	rjmp	.+54     	; 0x1a6 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     170:	fe 01       	movw	r30, r28
     172:	e4 23       	and	r30, r20
     174:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	29 1b       	sub	r18, r25
     17c:	31 09       	sbc	r19, r1
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	02 c0       	rjmp	.+4      	; 0x18c <Descomponerint16aHex+0x2c>
     188:	f6 95       	lsr	r31
     18a:	e7 95       	ror	r30
     18c:	2a 95       	dec	r18
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     190:	e0 50       	subi	r30, 0x00	; 0
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     198:	52 95       	swap	r21
     19a:	42 95       	swap	r20
     19c:	4f 70       	andi	r20, 0x0F	; 15
     19e:	45 27       	eor	r20, r21
     1a0:	5f 70       	andi	r21, 0x0F	; 15
     1a2:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     1a4:	9f 5f       	subi	r25, 0xFF	; 255
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	18 f3       	brcs	.-58     	; 0x170 <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     1aa:	1c 92       	st	X, r1
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
     1c0:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1cc:	24 c0       	rjmp	.+72     	; 0x216 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ce:	db 01       	movw	r26, r22
     1d0:	ca 01       	movw	r24, r20
     1d2:	8c 21       	and	r24, r12
     1d4:	9d 21       	and	r25, r13
     1d6:	ae 21       	and	r26, r14
     1d8:	bf 21       	and	r27, r15
     1da:	27 e0       	ldi	r18, 0x07	; 7
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	2c 1b       	sub	r18, r28
     1e0:	31 09       	sbc	r19, r1
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <Descomponeruint32aHex+0x42>
     1ec:	b6 95       	lsr	r27
     1ee:	a7 95       	ror	r26
     1f0:	97 95       	ror	r25
     1f2:	87 95       	ror	r24
     1f4:	2a 95       	dec	r18
     1f6:	d2 f7       	brpl	.-12     	; 0x1ec <Descomponeruint32aHex+0x3a>
     1f8:	dc 01       	movw	r26, r24
     1fa:	a0 50       	subi	r26, 0x00	; 0
     1fc:	bf 4f       	sbci	r27, 0xFF	; 255
     1fe:	8c 91       	ld	r24, X
     200:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     202:	68 94       	set
     204:	13 f8       	bld	r1, 3
     206:	76 95       	lsr	r23
     208:	67 95       	ror	r22
     20a:	57 95       	ror	r21
     20c:	47 95       	ror	r20
     20e:	16 94       	lsr	r1
     210:	d1 f7       	brne	.-12     	; 0x206 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     212:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     214:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     216:	c8 30       	cpi	r28, 0x08	; 8
     218:	d0 f2       	brcs	.-76     	; 0x1ce <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     21a:	10 82       	st	Z, r1
}
     21c:	cf 91       	pop	r28
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	08 95       	ret

00000228 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6f 97       	sbiw	r28, 0x1f	; 31
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     23c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <getEspacioDisponibleBuffer>
     240:	8f 3d       	cpi	r24, 0xDF	; 223
     242:	20 f0       	brcs	.+8      	; 0x24c <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <FLAGmandarDatos>
     24a:	06 c0       	rjmp	.+12     	; 0x258 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     24c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <getEspacioDisponibleBuffer>
     250:	88 32       	cpi	r24, 0x28	; 40
     252:	10 f4       	brcc	.+4      	; 0x258 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     254:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <FLAGmandarDatos>
		}
	}
	//la lectura de las variables tiene que ser en un unico momento
	//if momento == 0
	// guardar todos los datos
	if(FLAGmandarDatos){
     258:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <FLAGmandarDatos>
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <Informar_Actulizar+0x3a>
     260:	5a c0       	rjmp	.+180    	; 0x316 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     262:	0e 94 4c 0c 	call	0x1898	; 0x1898 <getTiempoInforme>
     266:	ae 01       	movw	r20, r28
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	ce 01       	movw	r24, r28
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
		UART_TransmitChar(';');
     27a:	8b e3       	ldi	r24, 0x3B	; 59
     27c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     280:	0e 94 ac 05 	call	0xb58	; 0xb58 <getValor>
     284:	be 01       	movw	r22, r28
     286:	67 5e       	subi	r22, 0xE7	; 231
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	ce 01       	movw	r24, r28
     292:	49 96       	adiw	r24, 0x19	; 25
     294:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     298:	8b e3       	ldi	r24, 0x3B	; 59
     29a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     29e:	0e 94 a0 05 	call	0xb40	; 0xb40 <getIntegralPID>
     2a2:	be 01       	movw	r22, r28
     2a4:	6e 5e       	subi	r22, 0xEE	; 238
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     2ac:	67 e0       	ldi	r22, 0x07	; 7
     2ae:	ce 01       	movw	r24, r28
     2b0:	42 96       	adiw	r24, 0x12	; 18
     2b2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     2bc:	0e 94 94 05 	call	0xb28	; 0xb28 <getDerivadaPID>
     2c0:	be 01       	movw	r22, r28
     2c2:	65 5f       	subi	r22, 0xF5	; 245
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2ca:	67 e0       	ldi	r22, 0x07	; 7
     2cc:	ce 01       	movw	r24, r28
     2ce:	0b 96       	adiw	r24, 0x0b	; 11
     2d0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
		UART_TransmitChar(';');
     2d4:	8b e3       	ldi	r24, 0x3B	; 59
     2d6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2da:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <getSlideResistor>
     2de:	bc 01       	movw	r22, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	44 e5       	ldi	r20, 0x54	; 84
     2ee:	51 e4       	ldi	r21, 0x41	; 65
     2f0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     2f4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	be 01       	movw	r22, r28
     2fe:	67 5e       	subi	r22, 0xE7	; 231
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	ce 01       	movw	r24, r28
     30a:	49 96       	adiw	r24, 0x19	; 25
     30c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
		UART_TransmitChar('\n');
     310:	8a e0       	ldi	r24, 0x0A	; 10
     312:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
	}
}
     316:	6f 96       	adiw	r28, 0x1f	; 31
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     328:	3f 92       	push	r3
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	c2 54       	subi	r28, 0x42	; 66
     350:	d1 09       	sbc	r29, r1
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <SacarDatosBufferEnter>
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <actulizar_leerDatos+0x42>
     368:	1a c1       	rjmp	.+564    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     36a:	fe 01       	movw	r30, r28
     36c:	f3 96       	adiw	r30, 0x33	; 51
     36e:	80 e1       	ldi	r24, 0x10	; 16
     370:	df 01       	movw	r26, r30
     372:	1d 92       	st	X+, r1
     374:	8a 95       	dec	r24
     376:	e9 f7       	brne	.-6      	; 0x372 <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	8b ee       	ldi	r24, 0xEB	; 235
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     38c:	e1 2c       	mov	r14, r1
     38e:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     390:	c4 c0       	rjmp	.+392    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     392:	bd e2       	ldi	r27, 0x2D	; 45
     394:	3b 12       	cpse	r3, r27
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     398:	b7 fa       	bst	r11, 7
     39a:	b0 94       	com	r11
     39c:	b7 f8       	bld	r11, 7
     39e:	b0 94       	com	r11
     3a0:	2f c0       	rjmp	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     3a2:	c3 2c       	mov	r12, r3
     3a4:	d1 2c       	mov	r13, r1
     3a6:	e0 e3       	ldi	r30, 0x30	; 48
     3a8:	ce 1a       	sub	r12, r30
     3aa:	d1 08       	sbc	r13, r1
     3ac:	0e 2d       	mov	r16, r14
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	00 0f       	add	r16, r16
     3b2:	11 1f       	adc	r17, r17
     3b4:	00 0f       	add	r16, r16
     3b6:	11 1f       	adc	r17, r17
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8c 0f       	add	r24, r28
     3be:	9d 1f       	adc	r25, r29
     3c0:	08 0f       	add	r16, r24
     3c2:	19 1f       	adc	r17, r25
     3c4:	d8 01       	movw	r26, r16
     3c6:	d2 96       	adiw	r26, 0x32	; 50
     3c8:	6d 91       	ld	r22, X+
     3ca:	7d 91       	ld	r23, X+
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	d5 97       	sbiw	r26, 0x35	; 53
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e2       	ldi	r20, 0x20	; 32
     3d8:	51 e4       	ldi	r21, 0x41	; 65
     3da:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     3de:	2b 01       	movw	r4, r22
     3e0:	3c 01       	movw	r6, r24
     3e2:	b6 01       	movw	r22, r12
     3e4:	dd 0c       	add	r13, r13
     3e6:	88 0b       	sbc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     3ee:	a3 01       	movw	r20, r6
     3f0:	92 01       	movw	r18, r4
     3f2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
     3f6:	f8 01       	movw	r30, r16
     3f8:	62 ab       	std	Z+50, r22	; 0x32
     3fa:	73 ab       	std	Z+51, r23	; 0x33
     3fc:	84 ab       	std	Z+52, r24	; 0x34
     3fe:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     400:	83 2d       	mov	r24, r3
     402:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
					i++;
     406:	f3 94       	inc	r15
     408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     40a:	0f 2e       	mov	r0, r31
     40c:	81 2c       	mov	r8, r1
     40e:	91 2c       	mov	r9, r1
     410:	f0 e8       	ldi	r31, 0x80	; 128
     412:	af 2e       	mov	r10, r31
     414:	ff e3       	ldi	r31, 0x3F	; 63
     416:	bf 2e       	mov	r11, r31
     418:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	ef 0d       	add	r30, r15
     424:	f1 1d       	adc	r31, r1
     426:	30 80       	ld	r3, Z
     428:	fc e2       	ldi	r31, 0x2C	; 44
     42a:	3f 16       	cp	r3, r31
     42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42e:	47 c0       	rjmp	.+142    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	38 16       	cp	r3, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	43 c0       	rjmp	.+134    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	39 16       	cp	r3, r25
     43c:	09 f4       	brne	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	3f c0       	rjmp	.+126    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     440:	31 10       	cpse	r3, r1
     442:	a7 cf       	rjmp	.-178    	; 0x392 <actulizar_leerDatos+0x6a>
     444:	3c c0       	rjmp	.+120    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     446:	0e 32       	cpi	r16, 0x2E	; 46
     448:	c9 f1       	breq	.+114    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     44a:	0c 32       	cpi	r16, 0x2C	; 44
     44c:	b9 f1       	breq	.+110    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	00 53       	subi	r16, 0x30	; 48
     452:	11 09       	sbc	r17, r1
     454:	ce 2c       	mov	r12, r14
     456:	d1 2c       	mov	r13, r1
     458:	cc 0c       	add	r12, r12
     45a:	dd 1c       	adc	r13, r13
     45c:	cc 0c       	add	r12, r12
     45e:	dd 1c       	adc	r13, r13
     460:	a1 e0       	ldi	r26, 0x01	; 1
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	ac 0f       	add	r26, r28
     466:	bd 1f       	adc	r27, r29
     468:	ca 0e       	add	r12, r26
     46a:	db 1e       	adc	r13, r27
     46c:	f6 01       	movw	r30, r12
     46e:	62 a9       	ldd	r22, Z+50	; 0x32
     470:	73 a9       	ldd	r23, Z+51	; 0x33
     472:	84 a9       	ldd	r24, Z+52	; 0x34
     474:	95 a9       	ldd	r25, Z+53	; 0x35
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e2       	ldi	r20, 0x20	; 32
     47c:	51 e4       	ldi	r21, 0x41	; 65
     47e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     482:	2b 01       	movw	r4, r22
     484:	3c 01       	movw	r6, r24
     486:	b8 01       	movw	r22, r16
     488:	11 0f       	add	r17, r17
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     492:	a3 01       	movw	r20, r6
     494:	92 01       	movw	r18, r4
     496:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
     49a:	d6 01       	movw	r26, r12
     49c:	d2 96       	adiw	r26, 0x32	; 50
     49e:	6d 93       	st	X+, r22
     4a0:	7d 93       	st	X+, r23
     4a2:	8d 93       	st	X+, r24
     4a4:	9c 93       	st	X, r25
     4a6:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e2       	ldi	r20, 0x20	; 32
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	c5 01       	movw	r24, r10
     4b2:	b4 01       	movw	r22, r8
     4b4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
					
				}
				i++;
     4bc:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     4be:	e1 e0       	ldi	r30, 0x01	; 1
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	ef 0d       	add	r30, r15
     4c8:	f1 1d       	adc	r31, r1
     4ca:	00 81       	ld	r16, Z
     4cc:	00 32       	cpi	r16, 0x20	; 32
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d0:	01 11       	cpse	r16, r1
     4d2:	b9 cf       	rjmp	.-142    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4d4:	ce 2c       	mov	r12, r14
     4d6:	d1 2c       	mov	r13, r1
     4d8:	cc 0c       	add	r12, r12
     4da:	dd 1c       	adc	r13, r13
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	ce 0e       	add	r12, r30
     4ea:	df 1e       	adc	r13, r31
     4ec:	d6 01       	movw	r26, r12
     4ee:	d2 96       	adiw	r26, 0x32	; 50
     4f0:	6d 91       	ld	r22, X+
     4f2:	7d 91       	ld	r23, X+
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	d5 97       	sbiw	r26, 0x35	; 53
     4fa:	a5 01       	movw	r20, r10
     4fc:	94 01       	movw	r18, r8
     4fe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
     502:	f6 01       	movw	r30, r12
     504:	62 ab       	std	Z+50, r22	; 0x32
     506:	73 ab       	std	Z+51, r23	; 0x33
     508:	84 ab       	std	Z+52, r24	; 0x34
     50a:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     50c:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     50e:	00 32       	cpi	r16, 0x20	; 32
     510:	21 f4       	brne	.+8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     512:	80 2f       	mov	r24, r16
     514:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
     518:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	ef 0d       	add	r30, r15
     524:	f1 1d       	adc	r31, r1
     526:	80 81       	ld	r24, Z
     528:	81 11       	cpse	r24, r1
     52a:	6f cf       	rjmp	.-290    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     52c:	6b a9       	ldd	r22, Y+51	; 0x33
     52e:	7c a9       	ldd	r23, Y+52	; 0x34
     530:	8d a9       	ldd	r24, Y+53	; 0x35
     532:	9e a9       	ldd	r25, Y+54	; 0x36
     534:	23 e3       	ldi	r18, 0x33	; 51
     536:	33 e3       	ldi	r19, 0x33	; 51
     538:	43 e4       	ldi	r20, 0x43	; 67
     53a:	51 ec       	ldi	r21, 0xC1	; 193
     53c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__cmpsf2>
     540:	81 11       	cpse	r24, r1
     542:	04 c0       	rjmp	.+8      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
			ONLEDBLUE;
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8b b9       	out	0x0b, r24	; 11
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		}else{
			OFFLEDBLUE;
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 7b       	andi	r24, 0xBF	; 191
     550:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     552:	f4 e0       	ldi	r31, 0x04	; 4
     554:	ef 12       	cpse	r14, r31
     556:	23 c0       	rjmp	.+70     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			setKp(valores[0]);
     558:	6b a9       	ldd	r22, Y+51	; 0x33
     55a:	7c a9       	ldd	r23, Y+52	; 0x34
     55c:	8d a9       	ldd	r24, Y+53	; 0x35
     55e:	9e a9       	ldd	r25, Y+54	; 0x36
     560:	0e 94 51 06 	call	0xca2	; 0xca2 <setKp>
			setKi(valores[1]);
     564:	6f a9       	ldd	r22, Y+55	; 0x37
     566:	78 ad       	ldd	r23, Y+56	; 0x38
     568:	89 ad       	ldd	r24, Y+57	; 0x39
     56a:	9a ad       	ldd	r25, Y+58	; 0x3a
     56c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <setKi>
			setKd(valores[2]);
     570:	6b ad       	ldd	r22, Y+59	; 0x3b
     572:	7c ad       	ldd	r23, Y+60	; 0x3c
     574:	8d ad       	ldd	r24, Y+61	; 0x3d
     576:	9e ad       	ldd	r25, Y+62	; 0x3e
     578:	0e 94 48 06 	call	0xc90	; 0xc90 <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     57c:	23 96       	adiw	r28, 0x03	; 3
     57e:	6c ad       	ldd	r22, Y+60	; 0x3c
     580:	7d ad       	ldd	r23, Y+61	; 0x3d
     582:	8e ad       	ldd	r24, Y+62	; 0x3e
     584:	9f ad       	ldd	r25, Y+63	; 0x3f
     586:	23 97       	sbiw	r28, 0x03	; 3
     588:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
     58c:	16 2f       	mov	r17, r22
     58e:	86 2f       	mov	r24, r22
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	81 0f       	add	r24, r17
     59a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
		}
	}
     59e:	ce 5b       	subi	r28, 0xBE	; 190
     5a0:	df 4f       	sbci	r29, 0xFF	; 255
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	08 95       	ret

000005d0 <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5d0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <UART_Init>
	Inicializacion_Motor();
     5d4:	0e 94 98 03 	call	0x730	; 0x730 <Inicializacion_Motor>
	SensorEncoder_init();
     5d8:	0e 94 6d 0b 	call	0x16da	; 0x16da <SensorEncoder_init>
	Inicializacion_slideResistor();
     5dc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Inicializacion_slideResistor>
	button_init();
     5e0:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5ea:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5ec:	0e 94 aa 00 	call	0x154	; 0x154 <Informar_MensajeInicial>
	
	setVelocidad(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	buscarOrigen();
     5f8:	0e 94 36 04 	call	0x86c	; 0x86c <buscarOrigen>
	
	irPos(7000);
     5fc:	88 e5       	ldi	r24, 0x58	; 88
     5fe:	9b e1       	ldi	r25, 0x1B	; 27
     600:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	ONLEDGREEN;
     604:	8b b1       	in	r24, 0x0b	; 11
     606:	80 62       	ori	r24, 0x20	; 32
     608:	8b b9       	out	0x0b, r24	; 11
	
	getAnguloEncoder(&anguloAnt, 0);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	82 ee       	ldi	r24, 0xE2	; 226
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	0e 94 b1 0a 	call	0x1562	; 0x1562 <getAnguloEncoder>
#include "global.h"

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
     616:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     618:	21 c0       	rjmp	.+66     	; 0x65c <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	87 ea       	ldi	r24, 0xA7	; 167
     61e:	91 e6       	ldi	r25, 0x61	; 97
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <main+0x50>
     628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x5a>
     62a:	00 00       	nop
		_delay_ms(2000);
		getAnguloEncoder(&angulo, 0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 ee       	ldi	r24, 0xE0	; 224
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	0e 94 b1 0a 	call	0x1562	; 0x1562 <getAnguloEncoder>
		if (anguloAnt == angulo)
     638:	20 91 e2 04 	lds	r18, 0x04E2	; 0x8004e2 <anguloAnt>
     63c:	30 91 e3 04 	lds	r19, 0x04E3	; 0x8004e3 <anguloAnt+0x1>
     640:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <angulo>
     644:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <angulo+0x1>
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	11 f4       	brne	.+4      	; 0x652 <main+0x82>
		{
			i++;
     64e:	cf 5f       	subi	r28, 0xFF	; 255
     650:	05 c0       	rjmp	.+10     	; 0x65c <main+0x8c>
		}else{
			anguloAnt = angulo;
     652:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <anguloAnt+0x1>
     656:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <anguloAnt>
			i=0;
     65a:	c0 e0       	ldi	r28, 0x00	; 0
	ONLEDGREEN;
	
	getAnguloEncoder(&anguloAnt, 0);
	
	//Espera hasta que obtenga un lectura constante
	while(i<3){
     65c:	c3 30       	cpi	r28, 0x03	; 3
     65e:	e8 f2       	brcs	.-70     	; 0x61a <main+0x4a>
			i=0;
		}
	}

	//setea el centro de pendulo
	set_origen();
     660:	0e 94 11 0b 	call	0x1622	; 0x1622 <set_origen>
	OFFLEDGREEN;
     664:	8b b1       	in	r24, 0x0b	; 11
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	8b b9       	out	0x0b, r24	; 11
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
     66a:	88 ea       	ldi	r24, 0xA8	; 168
     66c:	9b e1       	ldi	r25, 0x1B	; 27
     66e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
	
	SEOS_Init();
     672:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SEOS_Init>
	uint32_t inicio;
	uint8_t flag = 0;
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     676:	0e 94 8f 0c 	call	0x191e	; 0x191e <SEOS_Dispatch_Tasks>
     67a:	fd cf       	rjmp	.-6      	; 0x676 <main+0xa6>

0000067c <setVelocidad>:
static volatile uint16_t pos=0;
static volatile int8_t lado=0,ladoAnt,salto=1;
// 1 es derecha -1 es izquierd


void setVelocidad(int16_t velocidad){
     67c:	bc 01       	movw	r22, r24
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	61 f4       	brne	.+24     	; 0x69a <setVelocidad+0x1e>
		espera = 64000;
		PASOS1;salto=1;
     682:	85 b1       	in	r24, 0x05	; 5
     684:	87 70       	andi	r24, 0x07	; 7
     686:	88 63       	ori	r24, 0x38	; 56
     688:	85 b9       	out	0x05, r24	; 5
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
		fueCero=1;
     690:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>

void setVelocidad(int16_t velocidad){
	uint16_t espera = velocidad;
	//velocidad negativa va a izq
	if(velocidad == 0){
		espera = 64000;
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	7a ef       	ldi	r23, 0xFA	; 250
     698:	2a c0       	rjmp	.+84     	; 0x6ee <setVelocidad+0x72>
		PASOS1;salto=1;
		fueCero=1;
	}else{
	if(velocidad<0) {
     69a:	99 23       	and	r25, r25
     69c:	84 f4       	brge	.+32     	; 0x6be <setVelocidad+0x42>
		lado=-1;//IRIZQ;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <lado>
		velocidad = (-1)*velocidad;
     6a4:	71 95       	neg	r23
     6a6:	61 95       	neg	r22
     6a8:	71 09       	sbc	r23, r1
		if(ladoAnt==1){
     6aa:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <ladoAnt>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <setVelocidad+0x3a>
			fueCero=1;
     6b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=-1;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <ladoAnt>
     6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <setVelocidad+0x5c>
	}
	else {
		lado = 1;//IRDER;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <lado>
		if(ladoAnt==-1){
     6c4:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <ladoAnt>
     6c8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <setVelocidad+0x56>
			fueCero=1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
		}
		ladoAnt=1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <ladoAnt>
		}
		
	espera = 31000/velocidad;	//era 1875
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	99 e7       	ldi	r25, 0x79	; 121
     6dc:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
	salto=1;PASOS1;// el paso no tendria que poner siempre en 1 los otros tienen que dejar en 1
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6e6:	85 b1       	in	r24, 0x05	; 5
     6e8:	87 70       	andi	r24, 0x07	; 7
     6ea:	88 63       	ori	r24, 0x38	; 56
     6ec:	85 b9       	out	0x05, r24	; 5
	}
	
	//el tiempo de espera minimo esta 33 pero se puede mas hacer pruebas
	//velocidad maxima de 1000
	//tiempo espera = 33000/velociadad
	if (fueCero)
     6ee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6f2:	88 23       	and	r24, r24
     6f4:	21 f0       	breq	.+8      	; 0x6fe <setVelocidad+0x82>
	{
		espera+=60;
     6f6:	64 5c       	subi	r22, 0xC4	; 196
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
		fueCero=0;
     6fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
	}
	if(espera-1 < TCNT1){
     6fe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     702:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     706:	cb 01       	movw	r24, r22
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	82 17       	cp	r24, r18
     70c:	93 07       	cpc	r25, r19
     70e:	58 f4       	brcc	.+22     	; 0x726 <setVelocidad+0xaa>
		OCR1A = espera;
     710:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     714:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCNT1 = espera-2;
     718:	62 50       	subi	r22, 0x02	; 2
     71a:	71 09       	sbc	r23, r1
     71c:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     720:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     724:	08 95       	ret
	}else{
		OCR1A = espera;
     726:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     72a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     72e:	08 95       	ret

00000730 <Inicializacion_Motor>:
	}
}

void Inicializacion_Motor(){
	//pongo como salida
	DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5);
     730:	84 b1       	in	r24, 0x04	; 4
     732:	8e 63       	ori	r24, 0x3E	; 62
     734:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD7);
     736:	8a b1       	in	r24, 0x0a	; 10
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	8a b9       	out	0x0a, r24	; 10
	
	//pongo como salida los pines que controlan el tamaio de paso
	//borrar viejo DDRC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2);
	
	TCCR1A =  0;
     73c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10); //modo CTC y preescaler de 1024
	
	TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10); //el que tengo que modificar modo CTC y preescaler de 64
     740:	8b e0       	ldi	r24, 0x0B	; 11
     742:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TIFR1 = (1<<OCF1B)|(1<<OCF1A);
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	86 bb       	out	0x16, r24	; 22
	
	//timer
	OCR1B = 1;			//tenia16+1
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     752:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 6000;			//32+1 velocidad maxima
     756:	20 e7       	ldi	r18, 0x70	; 112
     758:	37 e1       	ldi	r19, 0x17	; 23
     75a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     75e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	 // Habilitar interrupciones
	TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B);
     762:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     766:	08 95       	ret

00000768 <getPos>:
}

uint16_t getPos(){
	return pos;
     768:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     76c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
}
     770:	08 95       	ret

00000772 <darPaso>:
	setVelocidad(0);
}

//-1 izq z der
void darPaso(int8_t sentido){
	if (sentido < 0){
     772:	88 23       	and	r24, r24
     774:	3c f4       	brge	.+14     	; 0x784 <darPaso+0x12>
		IRIZQ;
     776:	85 b1       	in	r24, 0x05	; 5
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	85 b9       	out	0x05, r24	; 5
		lado = -1;
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <lado>
     782:	06 c0       	rjmp	.+12     	; 0x790 <darPaso+0x1e>
	}
	else{
		IRDER;
     784:	85 b1       	in	r24, 0x05	; 5
     786:	8d 7f       	andi	r24, 0xFD	; 253
     788:	85 b9       	out	0x05, r24	; 5
		lado = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <lado>
	}
	PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     790:	85 b1       	in	r24, 0x05	; 5
     792:	84 60       	ori	r24, 0x04	; 4
     794:	85 b9       	out	0x05, r24	; 5
     796:	8f e3       	ldi	r24, 0x3F	; 63
     798:	9f e1       	ldi	r25, 0x1F	; 31
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <darPaso+0x28>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <darPaso+0x2e>
     7a0:	00 00       	nop
	_delay_ms(2);
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     7a2:	85 b1       	in	r24, 0x05	; 5
     7a4:	8b 7f       	andi	r24, 0xFB	; 251
     7a6:	85 b9       	out	0x05, r24	; 5
     7a8:	8f e3       	ldi	r24, 0x3F	; 63
     7aa:	9f e1       	ldi	r25, 0x1F	; 31
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <darPaso+0x3a>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <darPaso+0x40>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <irPos>:

uint16_t getPos(){
	return pos;
}

void irPos(uint16_t destino){
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
	PASOS16;salto=16;
     7bc:	85 b1       	in	r24, 0x05	; 5
     7be:	87 70       	andi	r24, 0x07	; 7
     7c0:	85 b9       	out	0x05, r24	; 5
     7c2:	80 e1       	ldi	r24, 0x10	; 16
     7c4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	81 ee       	ldi	r24, 0xE1	; 225
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <irPos+0x18>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <irPos+0x22>
     7d8:	00 00       	nop
	_delay_ms(100);
	if(destino>0 && destino<FIN){
     7da:	ce 01       	movw	r24, r28
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	8f 32       	cpi	r24, 0x2F	; 47
     7e0:	95 43       	sbci	r25, 0x35	; 53
     7e2:	e8 f5       	brcc	.+122    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		if(pos<destino)
     7e4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     7e8:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     7ec:	8c 17       	cp	r24, r28
     7ee:	9d 07       	cpc	r25, r29
     7f0:	a0 f0       	brcs	.+40     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7f2:	2e c0       	rjmp	.+92     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			while(pos<destino){
				darPaso(1);pos += lado*salto;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     7fa:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <lado>
     7fe:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     802:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     806:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     80a:	32 02       	muls	r19, r18
     80c:	80 0d       	add	r24, r0
     80e:	91 1d       	adc	r25, r1
     810:	11 24       	eor	r1, r1
     812:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <pos+0x1>
     816:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <pos>
void irPos(uint16_t destino){
	PASOS16;salto=16;
	_delay_ms(100);
	if(destino>0 && destino<FIN){
		if(pos<destino)
			while(pos<destino){
     81a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     81e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     822:	8c 17       	cp	r24, r28
     824:	9d 07       	cpc	r25, r29
     826:	30 f3       	brcs	.-52     	; 0x7f4 <irPos+0x3e>
     828:	1a c0       	rjmp	.+52     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
				darPaso(-1);pos += lado*salto;
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
     830:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <lado>
     834:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     838:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     83c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     840:	32 02       	muls	r19, r18
     842:	80 0d       	add	r24, r0
     844:	91 1d       	adc	r25, r1
     846:	11 24       	eor	r1, r1
     848:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <pos+0x1>
     84c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <pos>
		if(pos<destino)
			while(pos<destino){
				darPaso(1);pos += lado*salto;
			}
		else
			while(pos>destino){
     850:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     854:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     858:	c8 17       	cp	r28, r24
     85a:	d9 07       	cpc	r29, r25
     85c:	30 f3       	brcs	.-52     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				darPaso(-1);pos += lado*salto;
			}
	}
	setVelocidad(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <buscarOrigen>:
}


void buscarOrigen(){
	//configurar el puerto de entrada pin6 D6
	DDRD &= ~(1<<PORTD4);
     86c:	8a b1       	in	r24, 0x0a	; 10
     86e:	8f 7e       	andi	r24, 0xEF	; 239
     870:	8a b9       	out	0x0a, r24	; 10
	//colocar el pin con pull up
	PORTD |= (1<<PORTD4);
     872:	8b b1       	in	r24, 0x0b	; 11
     874:	80 61       	ori	r24, 0x10	; 16
     876:	8b b9       	out	0x0b, r24	; 11
	
	setVelocidad(0);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
	
	//prendo el led
	ONLEDBLUE;
     880:	8b b1       	in	r24, 0x0b	; 11
     882:	80 64       	ori	r24, 0x40	; 64
     884:	8b b9       	out	0x0b, r24	; 11
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	89 e6       	ldi	r24, 0x69	; 105
     88a:	98 e1       	ldi	r25, 0x18	; 24
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <buscarOrigen+0x20>
     894:	00 c0       	rjmp	.+0      	; 0x896 <buscarOrigen+0x2a>
     896:	00 00       	nop
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS16;salto=16;
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	87 70       	andi	r24, 0x07	; 7
     89c:	85 b9       	out	0x05, r24	; 5
     89e:	80 e1       	ldi	r24, 0x10	; 16
     8a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <buscarOrigen+0x40>
		darPaso(-1);
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	//prendo el led
	ONLEDBLUE;
	
	_delay_ms(500);			//espero un poco porque el pinta salir corriendo a veces
	PASOS16;salto=16;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8ac:	4c 99       	sbic	0x09, 4	; 9
     8ae:	fb cf       	rjmp	.-10     	; 0x8a6 <buscarOrigen+0x3a>
		darPaso(-1);
	}
	//encuntra el inicio de a pasos muy grandes, lo vuelvo a buscar con pasos mas chiquitos
	
	OFFLEDBLUE;
     8b0:	8b b1       	in	r24, 0x0b	; 11
     8b2:	8f 7b       	andi	r24, 0xBF	; 191
     8b4:	8b b9       	out	0x0b, r24	; 11
	
	pos=0;
     8b6:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <pos+0x1>
     8ba:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <pos>
	irPos(50);
     8be:	82 e3       	ldi	r24, 0x32	; 50
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <irPos>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	89 e6       	ldi	r24, 0x69	; 105
     8ca:	98 e1       	ldi	r25, 0x18	; 24
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	80 40       	sbci	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <buscarOrigen+0x60>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <buscarOrigen+0x6a>
     8d6:	00 00       	nop
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
     8d8:	8b b1       	in	r24, 0x0b	; 11
     8da:	8f 7b       	andi	r24, 0xBF	; 191
     8dc:	8b b9       	out	0x0b, r24	; 11
	PASOS1;salto=1;
     8de:	85 b1       	in	r24, 0x05	; 5
     8e0:	87 70       	andi	r24, 0x07	; 7
     8e2:	88 63       	ori	r24, 0x38	; 56
     8e4:	85 b9       	out	0x05, r24	; 5
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <buscarOrigen+0x88>
		darPaso(-1);
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	0e 94 b9 03 	call	0x772	; 0x772 <darPaso>
	_delay_ms(500);//espero porque los pasos son tan rapidos que sigo precionando el boton
	
	
	OFFLEDBLUE;
	PASOS1;salto=1;
	while((PIND & (1<<PORTD4))){	//mientras no toque el boton
     8f4:	4c 99       	sbic	0x09, 4	; 9
     8f6:	fb cf       	rjmp	.-10     	; 0x8ee <buscarOrigen+0x82>
		darPaso(-1);
	}
	
	PASOS16;salto=16;
     8f8:	85 b1       	in	r24, 0x05	; 5
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	85 b9       	out	0x05, r24	; 5
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
	//apago el led
	OFFLEDBLUE;
     904:	8b b1       	in	r24, 0x0b	; 11
     906:	8f 7b       	andi	r24, 0xBF	; 191
     908:	8b b9       	out	0x0b, r24	; 11
	pos = 0;
     90a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <pos+0x1>
     90e:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <pos>
     912:	08 95       	ret

00000914 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     926:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <lado>
     92a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     92e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     932:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     936:	32 02       	muls	r19, r18
     938:	80 0d       	add	r24, r0
     93a:	91 1d       	adc	r25, r1
     93c:	11 24       	eor	r1, r1
     93e:	80 33       	cpi	r24, 0x30	; 48
     940:	95 43       	sbci	r25, 0x35	; 53
     942:	08 f5       	brcc	.+66     	; 0x986 <__vector_11+0x72>
     944:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <lado>
     948:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     94c:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     950:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     954:	32 02       	muls	r19, r18
     956:	80 0d       	add	r24, r0
     958:	91 1d       	adc	r25, r1
     95a:	11 24       	eor	r1, r1
     95c:	89 2b       	or	r24, r25
     95e:	99 f0       	breq	.+38     	; 0x986 <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     960:	85 b1       	in	r24, 0x05	; 5
     962:	84 60       	ori	r24, 0x04	; 4
     964:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     966:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <lado>
     96a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     96e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <pos>
     972:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <pos+0x1>
     976:	32 02       	muls	r19, r18
     978:	80 0d       	add	r24, r0
     97a:	91 1d       	adc	r25, r1
     97c:	11 24       	eor	r1, r1
     97e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <pos+0x1>
     982:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <pos>
	}		
}
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     9a4:	85 b1       	in	r24, 0x05	; 5
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     9aa:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <lado>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	19 f4       	brne	.+6      	; 0x9b8 <__vector_12+0x20>
		IRDER;
     9b2:	85 b1       	in	r24, 0x05	; 5
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     9b8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <lado>
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	19 f4       	brne	.+6      	; 0x9c6 <__vector_12+0x2e>
		IRIZQ;
     9c0:	85 b1       	in	r24, 0x05	; 5
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	85 b9       	out	0x05, r24	; 5
	}
}
     9c6:	8f 91       	pop	r24
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <ec_basico>:
	calcularDerivada_angulo(puntosAngulo);
	calcularIntegral(e);
	derivada = derivada_angulo;
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
}
     9d2:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <estado>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	e8 5e       	subi	r30, 0xE8	; 232
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	01 90       	ld	r0, Z+
     9e2:	f0 81       	ld	r31, Z
     9e4:	e0 2d       	mov	r30, r0
     9e6:	09 95       	icall
     9e8:	08 95       	ret

000009ea <ec_sin_sen>:
     9ea:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <e>
     9ee:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <e+0x1>
     9f2:	20 57       	subi	r18, 0x70	; 112
     9f4:	3e 4f       	sbci	r19, 0xFE	; 254
     9f6:	c9 01       	movw	r24, r18
     9f8:	99 23       	and	r25, r25
     9fa:	24 f4       	brge	.+8      	; 0xa04 <ec_sin_sen+0x1a>
     9fc:	88 27       	eor	r24, r24
     9fe:	99 27       	eor	r25, r25
     a00:	82 1b       	sub	r24, r18
     a02:	93 0b       	sbc	r25, r19
     a04:	60 e2       	ldi	r22, 0x20	; 32
     a06:	73 e0       	ldi	r23, 0x03	; 3
     a08:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     a0c:	80 59       	subi	r24, 0x90	; 144
     a0e:	91 40       	sbci	r25, 0x01	; 1
     a10:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
     a14:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	cb 01       	movw	r24, r22
     a1e:	08 95       	ret

00000a20 <Actulizar_PID>:
     a20:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <FLAG_button_A_change>
     a24:	88 23       	and	r24, r24
     a26:	61 f0       	breq	.+24     	; 0xa40 <Actulizar_PID+0x20>
     a28:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <FLAG_habilitar_PID>
     a2c:	88 23       	and	r24, r24
     a2e:	19 f0       	breq	.+6      	; 0xa36 <Actulizar_PID+0x16>
     a30:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <FLAG_habilitar_PID>
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <Actulizar_PID+0x1c>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <FLAG_habilitar_PID>
     a3c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <FLAG_button_A_change>
     a40:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
     a44:	88 23       	and	r24, r24
     a46:	31 f0       	breq	.+12     	; 0xa54 <Actulizar_PID+0x34>
     a48:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <estado>
     a4c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <fueMayor100>
     a50:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <__data_end>
     a54:	62 e0       	ldi	r22, 0x02	; 2
     a56:	73 e0       	ldi	r23, 0x03	; 3
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <getAnguloEncoder>
     a60:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <indice_ec_error>
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 5e       	subi	r30, 0xEE	; 238
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	01 90       	ld	r0, Z+
     a70:	f0 81       	ld	r31, Z
     a72:	e0 2d       	mov	r30, r0
     a74:	09 95       	icall
     a76:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <vel>
     a7a:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <vel+0x1>
     a7e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <vel+0x2>
     a82:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <vel+0x3>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e8       	ldi	r19, 0x80	; 128
     a8a:	44 ed       	ldi	r20, 0xD4	; 212
     a8c:	54 e4       	ldi	r21, 0x44	; 68
     a8e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__gesf2>
     a92:	18 16       	cp	r1, r24
     a94:	64 f4       	brge	.+24     	; 0xaae <Actulizar_PID+0x8e>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e8       	ldi	r25, 0x80	; 128
     a9a:	a4 ed       	ldi	r26, 0xD4	; 212
     a9c:	b4 e4       	ldi	r27, 0x44	; 68
     a9e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <vel>
     aa2:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <vel+0x1>
     aa6:	a0 93 22 03 	sts	0x0322, r26	; 0x800322 <vel+0x2>
     aaa:	b0 93 23 03 	sts	0x0323, r27	; 0x800323 <vel+0x3>
     aae:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <vel>
     ab2:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <vel+0x1>
     ab6:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <vel+0x2>
     aba:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <vel+0x3>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e8       	ldi	r19, 0x80	; 128
     ac2:	44 ed       	ldi	r20, 0xD4	; 212
     ac4:	54 ec       	ldi	r21, 0xC4	; 196
     ac6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__cmpsf2>
     aca:	88 23       	and	r24, r24
     acc:	64 f4       	brge	.+24     	; 0xae6 <Actulizar_PID+0xc6>
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e8       	ldi	r25, 0x80	; 128
     ad2:	a4 ed       	ldi	r26, 0xD4	; 212
     ad4:	b4 ec       	ldi	r27, 0xC4	; 196
     ad6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <vel>
     ada:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <vel+0x1>
     ade:	a0 93 22 03 	sts	0x0322, r26	; 0x800322 <vel+0x2>
     ae2:	b0 93 23 03 	sts	0x0323, r27	; 0x800323 <vel+0x3>
     ae6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <FLAG_habilitar_PID>
     aea:	88 23       	and	r24, r24
     aec:	21 f0       	breq	.+8      	; 0xaf6 <Actulizar_PID+0xd6>
     aee:	8b b1       	in	r24, 0x0b	; 11
     af0:	80 62       	ori	r24, 0x20	; 32
     af2:	8b b9       	out	0x0b, r24	; 11
     af4:	0b c0       	rjmp	.+22     	; 0xb0c <Actulizar_PID+0xec>
     af6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <vel>
     afa:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel+0x1>
     afe:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x2>
     b02:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x3>
     b06:	8b b1       	in	r24, 0x0b	; 11
     b08:	8f 7d       	andi	r24, 0xDF	; 223
     b0a:	8b b9       	out	0x0b, r24	; 11
     b0c:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <vel>
     b10:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <vel+0x1>
     b14:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <vel+0x2>
     b18:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <vel+0x3>
     b1c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     b20:	cb 01       	movw	r24, r22
     b22:	0e 94 3e 03 	call	0x67c	; 0x67c <setVelocidad>
     b26:	08 95       	ret

00000b28 <getDerivadaPID>:
     b28:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <derivada>
     b2c:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <derivada+0x1>
     b30:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <derivada+0x2>
     b34:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <derivada+0x3>
     b38:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     b3c:	cb 01       	movw	r24, r22
     b3e:	08 95       	ret

00000b40 <getIntegralPID>:
     b40:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <s>
     b44:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <s+0x1>
     b48:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <s+0x2>
     b4c:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <s+0x3>
     b50:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     b54:	cb 01       	movw	r24, r22
     b56:	08 95       	ret

00000b58 <getValor>:
     b58:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <valor>
     b5c:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <valor+0x1>
     b60:	08 95       	ret

00000b62 <calcularIntegral>:
     b62:	bc 01       	movw	r22, r24
     b64:	99 0f       	add	r25, r25
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     b6e:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <Ki>
     b72:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <Ki+0x1>
     b76:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <Ki+0x2>
     b7a:	50 91 2a 03 	lds	r21, 0x032A	; 0x80032a <Ki+0x3>
     b7e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     b82:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <s>
     b86:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <s+0x1>
     b8a:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <s+0x2>
     b8e:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <s+0x3>
     b92:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
     b96:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <s>
     b9a:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <s+0x1>
     b9e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <s+0x2>
     ba2:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <s+0x3>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e4       	ldi	r19, 0x40	; 64
     baa:	4c e9       	ldi	r20, 0x9C	; 156
     bac:	55 e4       	ldi	r21, 0x45	; 69
     bae:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	64 f4       	brge	.+24     	; 0xbce <calcularIntegral+0x6c>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e4       	ldi	r25, 0x40	; 64
     bba:	ac e9       	ldi	r26, 0x9C	; 156
     bbc:	b5 e4       	ldi	r27, 0x45	; 69
     bbe:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <s>
     bc2:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <s+0x1>
     bc6:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <s+0x2>
     bca:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <s+0x3>
     bce:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <s>
     bd2:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <s+0x1>
     bd6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <s+0x2>
     bda:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <s+0x3>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e4       	ldi	r19, 0x40	; 64
     be2:	4c e9       	ldi	r20, 0x9C	; 156
     be4:	55 ec       	ldi	r21, 0xC5	; 197
     be6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__cmpsf2>
     bea:	88 23       	and	r24, r24
     bec:	64 f4       	brge	.+24     	; 0xc06 <calcularIntegral+0xa4>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e4       	ldi	r25, 0x40	; 64
     bf2:	ac e9       	ldi	r26, 0x9C	; 156
     bf4:	b5 ec       	ldi	r27, 0xC5	; 197
     bf6:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <s>
     bfa:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <s+0x1>
     bfe:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <s+0x2>
     c02:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <s+0x3>
     c06:	08 95       	ret

00000c08 <calcularDerivada_encoder>:
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <tiempoMuestra>
     c14:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <tiempoMuestra+0x1>
     c18:	89 e0       	ldi	r24, 0x09	; 9
     c1a:	9d e3       	ldi	r25, 0x3D	; 61
     c1c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     c20:	07 2e       	mov	r0, r23
     c22:	00 0c       	add	r0, r0
     c24:	88 0b       	sbc	r24, r24
     c26:	99 0b       	sbc	r25, r25
     c28:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     c2c:	2a e0       	ldi	r18, 0x0A	; 10
     c2e:	37 ed       	ldi	r19, 0xD7	; 215
     c30:	43 ea       	ldi	r20, 0xA3	; 163
     c32:	5c e3       	ldi	r21, 0x3C	; 60
     c34:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     c38:	6b 01       	movw	r12, r22
     c3a:	7c 01       	movw	r14, r24
     c3c:	28 e4       	ldi	r18, 0x48	; 72
     c3e:	31 ee       	ldi	r19, 0xE1	; 225
     c40:	4a e7       	ldi	r20, 0x7A	; 122
     c42:	5f e3       	ldi	r21, 0x3F	; 63
     c44:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <derivada_encoder>
     c48:	70 91 11 03 	lds	r23, 0x0311	; 0x800311 <derivada_encoder+0x1>
     c4c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <derivada_encoder+0x2>
     c50:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <derivada_encoder+0x3>
     c54:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
     c64:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <derivada_encoder>
     c68:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <derivada_encoder+0x1>
     c6c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <derivada_encoder+0x2>
     c70:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <derivada_encoder+0x3>
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	08 95       	ret

00000c7e <setKi>:
     c7e:	60 93 27 03 	sts	0x0327, r22	; 0x800327 <Ki>
     c82:	70 93 28 03 	sts	0x0328, r23	; 0x800328 <Ki+0x1>
     c86:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <Ki+0x2>
     c8a:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <Ki+0x3>
     c8e:	08 95       	ret

00000c90 <setKd>:
     c90:	60 93 2b 03 	sts	0x032B, r22	; 0x80032b <Kd>
     c94:	70 93 2c 03 	sts	0x032C, r23	; 0x80032c <Kd+0x1>
     c98:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <Kd+0x2>
     c9c:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <Kd+0x3>
     ca0:	08 95       	ret

00000ca2 <setKp>:
     ca2:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <Kp>
     ca6:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <Kp+0x1>
     caa:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <Kp+0x2>
     cae:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <Kp+0x3>
     cb2:	08 95       	ret

00000cb4 <setIndice_ec_error>:
     cb4:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <indice_ec_error>
     cb8:	98 17       	cp	r25, r24
     cba:	51 f0       	breq	.+20     	; 0xcd0 <setIndice_ec_error+0x1c>
     cbc:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <indice_ec_error>
     cc0:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <s>
     cc4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <s+0x1>
     cc8:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <s+0x2>
     ccc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <s+0x3>
     cd0:	08 95       	ret

00000cd2 <calcularSen>:
     cd2:	60 e2       	ldi	r22, 0x20	; 32
     cd4:	73 e0       	ldi	r23, 0x03	; 3
     cd6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     cda:	99 23       	and	r25, r25
     cdc:	14 f4       	brge	.+4      	; 0xce2 <calcularSen+0x10>
     cde:	80 5e       	subi	r24, 0xE0	; 224
     ce0:	9c 4f       	sbci	r25, 0xFC	; 252
     ce2:	80 39       	cpi	r24, 0x90	; 144
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	92 07       	cpc	r25, r18
     ce8:	dc f0       	brlt	.+54     	; 0xd20 <calcularSen+0x4e>
     cea:	60 e9       	ldi	r22, 0x90	; 144
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     cf2:	89 3c       	cpi	r24, 0xC9	; 201
     cf4:	91 05       	cpc	r25, r1
     cf6:	4c f0       	brlt	.+18     	; 0xd0a <calcularSen+0x38>
     cf8:	28 ec       	ldi	r18, 0xC8	; 200
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	b9 01       	movw	r22, r18
     cfe:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     d02:	a9 01       	movw	r20, r18
     d04:	48 1b       	sub	r20, r24
     d06:	59 0b       	sbc	r21, r25
     d08:	ca 01       	movw	r24, r20
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	fc 01       	movw	r30, r24
     d10:	e2 5e       	subi	r30, 0xE2	; 226
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	91 95       	neg	r25
     d1a:	81 95       	neg	r24
     d1c:	91 09       	sbc	r25, r1
     d1e:	08 95       	ret
     d20:	60 e9       	ldi	r22, 0x90	; 144
     d22:	71 e0       	ldi	r23, 0x01	; 1
     d24:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     d28:	89 3c       	cpi	r24, 0xC9	; 201
     d2a:	91 05       	cpc	r25, r1
     d2c:	4c f0       	brlt	.+18     	; 0xd40 <calcularSen+0x6e>
     d2e:	28 ec       	ldi	r18, 0xC8	; 200
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	b9 01       	movw	r22, r18
     d34:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     d38:	a9 01       	movw	r20, r18
     d3a:	48 1b       	sub	r20, r24
     d3c:	59 0b       	sbc	r21, r25
     d3e:	ca 01       	movw	r24, r20
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	fc 01       	movw	r30, r24
     d46:	e2 5e       	subi	r30, 0xE2	; 226
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	08 95       	ret

00000d50 <frenoAbajo>:
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
     d60:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
     d64:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <puntosAngulo+0x1>
     d68:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <puntosAngulo>
     d6c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
     d70:	bc 01       	movw	r22, r24
     d72:	43 96       	adiw	r24, 0x13	; 19
     d74:	87 97       	sbiw	r24, 0x27	; 39
     d76:	70 f4       	brcc	.+28     	; 0xd94 <frenoAbajo+0x44>
     d78:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <countStop>
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <countStop>
     d82:	83 33       	cpi	r24, 0x33	; 51
     d84:	48 f0       	brcs	.+18     	; 0xd98 <frenoAbajo+0x48>
     d86:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <countStop>
     d8a:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <fueMayor100>
     d8e:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <estado>
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <frenoAbajo+0x48>
     d94:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <countStop>
     d98:	07 2e       	mov	r0, r23
     d9a:	00 0c       	add	r0, r0
     d9c:	88 0b       	sbc	r24, r24
     d9e:	99 0b       	sbc	r25, r25
     da0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 ed       	ldi	r20, 0xD0	; 208
     daa:	50 e4       	ldi	r21, 0x40	; 64
     dac:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     db0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     db4:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <e+0x1>
     db8:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <e>
     dbc:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     dc0:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <e>
     dc4:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <e+0x1>
     dc8:	82 0f       	add	r24, r18
     dca:	93 1f       	adc	r25, r19
     dcc:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <valor+0x1>
     dd0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <valor>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e6       	ldi	r25, 0x60	; 96
     dd8:	aa ee       	ldi	r26, 0xEA	; 234
     dda:	b5 e4       	ldi	r27, 0x45	; 69
     ddc:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <posRef>
     de0:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <posRef+0x1>
     de4:	a0 93 1a 03 	sts	0x031A, r26	; 0x80031a <posRef+0x2>
     de8:	b0 93 1b 03 	sts	0x031B, r27	; 0x80031b <posRef+0x3>
     dec:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
     df0:	bc 01       	movw	r22, r24
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__floatunsisf>
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e6       	ldi	r23, 0x60	; 96
     e02:	8a ee       	ldi	r24, 0xEA	; 234
     e04:	95 e4       	ldi	r25, 0x45	; 69
     e06:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__subsf3>
     e0a:	6b 01       	movw	r12, r22
     e0c:	7c 01       	movw	r14, r24
     e0e:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <e>
     e12:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <e+0x1>
     e16:	07 2e       	mov	r0, r23
     e18:	00 0c       	add	r0, r0
     e1a:	88 0b       	sbc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     e22:	a7 01       	movw	r20, r14
     e24:	96 01       	movw	r18, r12
     e26:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
     e2a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
     e2e:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <e+0x1>
     e32:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <e>
     e36:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <derivada_pos>
     e3a:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <derivada_pos+0x1>
     e3e:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <derivada_pos+0x2>
     e42:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <derivada_pos+0x3>
     e46:	00 93 14 03 	sts	0x0314, r16	; 0x800314 <derivada>
     e4a:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <derivada+0x1>
     e4e:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <derivada+0x2>
     e52:	30 93 17 03 	sts	0x0317, r19	; 0x800317 <derivada+0x3>
     e56:	cb 01       	movw	r24, r22
     e58:	0e 94 b1 05 	call	0xb62	; 0xb62 <calcularIntegral>
     e5c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <e>
     e60:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <e+0x1>
     e64:	07 2e       	mov	r0, r23
     e66:	00 0c       	add	r0, r0
     e68:	88 0b       	sbc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     e70:	23 e3       	ldi	r18, 0x33	; 51
     e72:	33 e3       	ldi	r19, 0x33	; 51
     e74:	43 e3       	ldi	r20, 0x33	; 51
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	08 95       	ret

00000e8a <calcularDerivada_angulo>:
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	0e 94 04 06 	call	0xc08	; 0xc08 <calcularDerivada_encoder>
     e9c:	ce 01       	movw	r24, r28
     e9e:	88 53       	subi	r24, 0x38	; 56
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
     ea6:	ec 01       	movw	r28, r24
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <derivada_encoder>
     eb4:	70 91 11 03 	lds	r23, 0x0311	; 0x800311 <derivada_encoder+0x1>
     eb8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <derivada_encoder+0x2>
     ebc:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <derivada_encoder+0x3>
     ec0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
     ec4:	6b 01       	movw	r12, r22
     ec6:	7c 01       	movw	r14, r24
     ec8:	be 01       	movw	r22, r28
     eca:	dd 0f       	add	r29, r29
     ecc:	88 0b       	sbc	r24, r24
     ece:	99 0b       	sbc	r25, r25
     ed0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     ed4:	a7 01       	movw	r20, r14
     ed6:	96 01       	movw	r18, r12
     ed8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     edc:	2a e1       	ldi	r18, 0x1A	; 26
     ede:	34 e3       	ldi	r19, 0x34	; 52
     ee0:	4c e4       	ldi	r20, 0x4C	; 76
     ee2:	52 e4       	ldi	r21, 0x42	; 66
     ee4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     ee8:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <derivada_angulo>
     eec:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <derivada_angulo+0x1>
     ef0:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <derivada_angulo+0x2>
     ef4:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <derivada_angulo+0x3>
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	08 95       	ret

00000f06 <levantar>:
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	c0 91 06 03 	lds	r28, 0x0306	; 0x800306 <e>
     f12:	d0 91 07 03 	lds	r29, 0x0307	; 0x800307 <e+0x1>
     f16:	d0 93 13 05 	sts	0x0513, r29	; 0x800513 <puntosAngulo+0x1>
     f1a:	c0 93 12 05 	sts	0x0512, r28	; 0x800512 <puntosAngulo>
     f1e:	ce 01       	movw	r24, r28
     f20:	60 e2       	ldi	r22, 0x20	; 32
     f22:	73 e0       	ldi	r23, 0x03	; 3
     f24:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     f28:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
     f2c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
     f30:	99 23       	and	r25, r25
     f32:	34 f4       	brge	.+12     	; 0xf40 <levantar+0x3a>
     f34:	80 5e       	subi	r24, 0xE0	; 224
     f36:	9c 4f       	sbci	r25, 0xFC	; 252
     f38:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
     f3c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
     f40:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <fueMayor100>
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	e1 f5       	brne	.+120    	; 0xfc0 <levantar+0xba>
     f48:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
     f4c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
     f50:	83 57       	subi	r24, 0x73	; 115
     f52:	91 40       	sbci	r25, 0x01	; 1
     f54:	cb 97       	sbiw	r24, 0x3b	; 59
     f56:	28 f4       	brcc	.+10     	; 0xf62 <levantar+0x5c>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
     f5e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <fueMayor100>
     f62:	ce 01       	movw	r24, r28
     f64:	0e 94 45 07 	call	0xe8a	; 0xe8a <calcularDerivada_angulo>
     f68:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <derivada_angulo>
     f6c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <derivada_angulo+0x1>
     f70:	a0 91 0e 03 	lds	r26, 0x030E	; 0x80030e <derivada_angulo+0x2>
     f74:	b0 91 0f 03 	lds	r27, 0x030F	; 0x80030f <derivada_angulo+0x3>
     f78:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <derivada>
     f7c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <derivada+0x1>
     f80:	a0 93 16 03 	sts	0x0316, r26	; 0x800316 <derivada+0x2>
     f84:	b0 93 17 03 	sts	0x0317, r27	; 0x800317 <derivada+0x3>
     f88:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
     f8c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
     f90:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
     f94:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
     f98:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
     f9c:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <valor+0x1>
     fa0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <valor>
     fa4:	bc 01       	movw	r22, r24
     fa6:	99 0f       	add	r25, r25
     fa8:	88 0b       	sbc	r24, r24
     faa:	99 0b       	sbc	r25, r25
     fac:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     fb0:	2d ec       	ldi	r18, 0xCD	; 205
     fb2:	3c ec       	ldi	r19, 0xCC	; 204
     fb4:	4c e4       	ldi	r20, 0x4C	; 76
     fb6:	5f eb       	ldi	r21, 0xBF	; 191
     fb8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
     fbc:	8b 01       	movw	r16, r22
     fbe:	9c 01       	movw	r18, r24
     fc0:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <fueMayor100>
     fc4:	81 11       	cpse	r24, r1
     fc6:	34 c0       	rjmp	.+104    	; 0x1030 <levantar+0x12a>
     fc8:	ce 01       	movw	r24, r28
     fca:	dd 23       	and	r29, r29
     fcc:	24 f4       	brge	.+8      	; 0xfd6 <levantar+0xd0>
     fce:	88 27       	eor	r24, r24
     fd0:	99 27       	eor	r25, r25
     fd2:	8c 1b       	sub	r24, r28
     fd4:	9d 0b       	sbc	r25, r29
     fd6:	80 57       	subi	r24, 0x70	; 112
     fd8:	9e 4f       	sbci	r25, 0xFE	; 254
     fda:	60 e2       	ldi	r22, 0x20	; 32
     fdc:	73 e0       	ldi	r23, 0x03	; 3
     fde:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
     fe2:	85 3f       	cpi	r24, 0xF5	; 245
     fe4:	91 40       	sbci	r25, 0x01	; 1
     fe6:	1c f0       	brlt	.+6      	; 0xfee <levantar+0xe8>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <fueMayor100>
     fee:	0e 94 55 0c 	call	0x18aa	; 0x18aa <getTiempoSEOS>
     ff2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__floatunsisf>
     ff6:	28 e4       	ldi	r18, 0x48	; 72
     ff8:	31 ee       	ldi	r19, 0xE1	; 225
     ffa:	4a e1       	ldi	r20, 0x1A	; 26
     ffc:	50 e4       	ldi	r21, 0x40	; 64
     ffe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
    1002:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
    1006:	cb 01       	movw	r24, r22
    1008:	60 e2       	ldi	r22, 0x20	; 32
    100a:	73 e0       	ldi	r23, 0x03	; 3
    100c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1010:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
    1014:	bc 01       	movw	r22, r24
    1016:	99 0f       	add	r25, r25
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 ec       	ldi	r20, 0xC0	; 192
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    102c:	8b 01       	movw	r16, r22
    102e:	9c 01       	movw	r18, r24
    1030:	c9 01       	movw	r24, r18
    1032:	b8 01       	movw	r22, r16
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <superArriba>:
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <e>
    1052:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <e+0x1>
    1056:	30 93 13 05 	sts	0x0513, r19	; 0x800513 <puntosAngulo+0x1>
    105a:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <puntosAngulo>
    105e:	c9 01       	movw	r24, r18
    1060:	60 e2       	ldi	r22, 0x20	; 32
    1062:	73 e0       	ldi	r23, 0x03	; 3
    1064:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1068:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
    106c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
    1070:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <valor+0x1>
    1074:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <valor>
    1078:	99 23       	and	r25, r25
    107a:	34 f4       	brge	.+12     	; 0x1088 <superArriba+0x4a>
    107c:	80 5e       	subi	r24, 0xE0	; 224
    107e:	9c 4f       	sbci	r25, 0xFC	; 252
    1080:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
    1084:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
    1088:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
    108c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
    1090:	8f 55       	subi	r24, 0x5F	; 95
    1092:	91 40       	sbci	r25, 0x01	; 1
    1094:	83 36       	cpi	r24, 0x63	; 99
    1096:	91 05       	cpc	r25, r1
    1098:	58 f0       	brcs	.+22     	; 0x10b0 <superArriba+0x72>
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
    10a0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <vel>
    10a4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <vel+0x1>
    10a8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <vel+0x2>
    10ac:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <vel+0x3>
    10b0:	c9 01       	movw	r24, r18
    10b2:	0e 94 45 07 	call	0xe8a	; 0xe8a <calcularDerivada_angulo>
    10b6:	c0 90 0c 03 	lds	r12, 0x030C	; 0x80030c <derivada_angulo>
    10ba:	d0 90 0d 03 	lds	r13, 0x030D	; 0x80030d <derivada_angulo+0x1>
    10be:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <derivada_angulo+0x2>
    10c2:	f0 90 0f 03 	lds	r15, 0x030F	; 0x80030f <derivada_angulo+0x3>
    10c6:	c0 92 14 03 	sts	0x0314, r12	; 0x800314 <derivada>
    10ca:	d0 92 15 03 	sts	0x0315, r13	; 0x800315 <derivada+0x1>
    10ce:	e0 92 16 03 	sts	0x0316, r14	; 0x800316 <derivada+0x2>
    10d2:	f0 92 17 03 	sts	0x0317, r15	; 0x800317 <derivada+0x3>
    10d6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
    10da:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
    10de:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
    10e2:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
    10e6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
    10ea:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <valor+0x1>
    10ee:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <valor>
    10f2:	bc 01       	movw	r22, r24
    10f4:	99 0f       	add	r25, r25
    10f6:	88 0b       	sbc	r24, r24
    10f8:	99 0b       	sbc	r25, r25
    10fa:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    10fe:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <Kp>
    1102:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <Kp+0x1>
    1106:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <Kp+0x2>
    110a:	50 91 b4 02 	lds	r21, 0x02B4	; 0x8002b4 <Kp+0x3>
    110e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    1112:	4b 01       	movw	r8, r22
    1114:	5c 01       	movw	r10, r24
    1116:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <Kd>
    111a:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <Kd+0x1>
    111e:	40 91 2d 03 	lds	r20, 0x032D	; 0x80032d <Kd+0x2>
    1122:	50 91 2e 03 	lds	r21, 0x032E	; 0x80032e <Kd+0x3>
    1126:	c7 01       	movw	r24, r14
    1128:	b6 01       	movw	r22, r12
    112a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	c5 01       	movw	r24, r10
    1134:	b4 01       	movw	r22, r8
    1136:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
    113a:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <vel>
    113e:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <vel+0x1>
    1142:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <vel+0x2>
    1146:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <vel+0x3>
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	08 95       	ret

0000115c <calcularDerivada_pos>:
	// 	}
	return 0;
	//return( Kp*e + Kd*derivada + Ki*s);
}

void calcularDerivada_pos(int16_t e){
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
    1174:	0e 94 45 07 	call	0xe8a	; 0xe8a <calcularDerivada_angulo>
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    1178:	00 91 20 03 	lds	r16, 0x0320	; 0x800320 <vel>
    117c:	10 91 21 03 	lds	r17, 0x0321	; 0x800321 <vel+0x1>
    1180:	d0 91 22 03 	lds	r29, 0x0322	; 0x800322 <vel+0x2>
    1184:	c0 91 23 03 	lds	r28, 0x0323	; 0x800323 <vel+0x3>
	if (vel>1700)
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e8       	ldi	r19, 0x80	; 128
    118c:	44 ed       	ldi	r20, 0xD4	; 212
    118e:	54 e4       	ldi	r21, 0x44	; 68
    1190:	60 2f       	mov	r22, r16
    1192:	71 2f       	mov	r23, r17
    1194:	8d 2f       	mov	r24, r29
    1196:	9c 2f       	mov	r25, r28
    1198:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__gesf2>
    119c:	18 16       	cp	r1, r24
    119e:	2c f0       	brlt	.+10     	; 0x11aa <calcularDerivada_pos+0x4e>
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
	//vel + derivada_angulo*6.5;
	float velAxi=vel;
    11a0:	c0 2e       	mov	r12, r16
    11a2:	d1 2e       	mov	r13, r17
    11a4:	ed 2e       	mov	r14, r29
    11a6:	fc 2e       	mov	r15, r28
    11a8:	0c c0       	rjmp	.+24     	; 0x11c2 <calcularDerivada_pos+0x66>
	if (vel>1700)
	{
		velAxi=1700;
    11aa:	c1 2c       	mov	r12, r1
    11ac:	68 94       	set
    11ae:	dd 24       	eor	r13, r13
    11b0:	d7 f8       	bld	r13, 7
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f4 ed       	ldi	r31, 0xD4	; 212
    11b6:	ef 2e       	mov	r14, r31
    11b8:	f0 2d       	mov	r31, r0
    11ba:	0f 2e       	mov	r0, r31
    11bc:	f4 e4       	ldi	r31, 0x44	; 68
    11be:	ff 2e       	mov	r15, r31
    11c0:	f0 2d       	mov	r31, r0
	}
	if (vel<-1700)
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e8       	ldi	r19, 0x80	; 128
    11c6:	44 ed       	ldi	r20, 0xD4	; 212
    11c8:	54 ec       	ldi	r21, 0xC4	; 196
    11ca:	60 2f       	mov	r22, r16
    11cc:	71 2f       	mov	r23, r17
    11ce:	8d 2f       	mov	r24, r29
    11d0:	9c 2f       	mov	r25, r28
    11d2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__cmpsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	64 f4       	brge	.+24     	; 0x11f2 <calcularDerivada_pos+0x96>
	{
		velAxi=-1700;
    11da:	c1 2c       	mov	r12, r1
    11dc:	68 94       	set
    11de:	dd 24       	eor	r13, r13
    11e0:	d7 f8       	bld	r13, 7
    11e2:	0f 2e       	mov	r0, r31
    11e4:	f4 ed       	ldi	r31, 0xD4	; 212
    11e6:	ef 2e       	mov	r14, r31
    11e8:	f0 2d       	mov	r31, r0
    11ea:	0f 2e       	mov	r0, r31
    11ec:	f4 ec       	ldi	r31, 0xC4	; 196
    11ee:	ff 2e       	mov	r15, r31
    11f0:	f0 2d       	mov	r31, r0
	}
	derivada_pos = derivada_angulo - velAxi*(8.0645);
    11f2:	80 90 0c 03 	lds	r8, 0x030C	; 0x80030c <derivada_angulo>
    11f6:	90 90 0d 03 	lds	r9, 0x030D	; 0x80030d <derivada_angulo+0x1>
    11fa:	a0 90 0e 03 	lds	r10, 0x030E	; 0x80030e <derivada_angulo+0x2>
    11fe:	b0 90 0f 03 	lds	r11, 0x030F	; 0x80030f <derivada_angulo+0x3>
    1202:	21 e3       	ldi	r18, 0x31	; 49
    1204:	38 e0       	ldi	r19, 0x08	; 8
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	6c 2d       	mov	r22, r12
    120c:	7d 2d       	mov	r23, r13
    120e:	8e 2d       	mov	r24, r14
    1210:	9f 2d       	mov	r25, r15
    1212:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	c5 01       	movw	r24, r10
    121c:	b4 01       	movw	r22, r8
    121e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__subsf3>
    1222:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <derivada_pos>
    1226:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <derivada_pos+0x1>
    122a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <derivada_pos+0x2>
    122e:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <derivada_pos+0x3>
	//int16_t calculoAxi = e - eant;
	//eant = e;
	//derivada = (float)(0.02)*(float)calculoAxi+(float)(0.98)*derivada;
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	08 95       	ret

0000124c <ec_pos>:


float ec_pos(){
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
	puntosAngulo = e;
    1254:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <e>
    1258:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <e+0x1>
    125c:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <puntosAngulo+0x1>
    1260:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <puntosAngulo>
	e=calcularSen(e);
    1264:	0e 94 69 06 	call	0xcd2	; 0xcd2 <calcularSen>
    1268:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <e+0x1>
    126c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
    1270:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <getSlideResistor>
    1274:	bc 01       	movw	r22, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__floatunsisf>
    127e:	2d ec       	ldi	r18, 0xCD	; 205
    1280:	3c ec       	ldi	r19, 0xCC	; 204
    1282:	44 e5       	ldi	r20, 0x54	; 84
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    128a:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <posRef>
    128e:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <posRef+0x1>
    1292:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <posRef+0x2>
    1296:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;	//el lagro es: 20
    129a:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <e>
    129e:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <e+0x1>
    12a2:	07 2e       	mov	r0, r23
    12a4:	00 0c       	add	r0, r0
    12a6:	88 0b       	sbc	r24, r24
    12a8:	99 0b       	sbc	r25, r25
    12aa:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 ed       	ldi	r20, 0xD0	; 208
    12b4:	50 e4       	ldi	r21, 0x40	; 64
    12b6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    12ba:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
    12be:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <e+0x1>
    12c2:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <e>
	valor = getPos()+e;
    12c6:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    12ca:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <e>
    12ce:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <e+0x1>
    12d2:	82 0f       	add	r24, r18
    12d4:	93 1f       	adc	r25, r19
    12d6:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <valor+0x1>
    12da:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	
	calcularDerivada_pos(puntosAngulo);		//por ahora dejo fuera la pos
    12de:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <puntosAngulo>
    12e2:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <puntosAngulo+0x1>
    12e6:	0e 94 ae 08 	call	0x115c	; 0x115c <calcularDerivada_pos>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
    12ea:	c0 90 18 03 	lds	r12, 0x0318	; 0x800318 <posRef>
    12ee:	d0 90 19 03 	lds	r13, 0x0319	; 0x800319 <posRef+0x1>
    12f2:	e0 90 1a 03 	lds	r14, 0x031A	; 0x80031a <posRef+0x2>
    12f6:	f0 90 1b 03 	lds	r15, 0x031B	; 0x80031b <posRef+0x3>
    12fa:	0e 94 b4 03 	call	0x768	; 0x768 <getPos>
    12fe:	bc 01       	movw	r22, r24
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__floatunsisf>
    1308:	9b 01       	movw	r18, r22
    130a:	ac 01       	movw	r20, r24
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__subsf3>
    1314:	6b 01       	movw	r12, r22
    1316:	7c 01       	movw	r14, r24
    1318:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <e>
    131c:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <e+0x1>
    1320:	07 2e       	mov	r0, r23
    1322:	00 0c       	add	r0, r0
    1324:	88 0b       	sbc	r24, r24
    1326:	99 0b       	sbc	r25, r25
    1328:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    132c:	a7 01       	movw	r20, r14
    132e:	96 01       	movw	r18, r12
    1330:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
    1334:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
    1338:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <e+0x1>
    133c:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	derivada = derivada_pos;
    1340:	c0 90 08 03 	lds	r12, 0x0308	; 0x800308 <derivada_pos>
    1344:	d0 90 09 03 	lds	r13, 0x0309	; 0x800309 <derivada_pos+0x1>
    1348:	e0 90 0a 03 	lds	r14, 0x030A	; 0x80030a <derivada_pos+0x2>
    134c:	f0 90 0b 03 	lds	r15, 0x030B	; 0x80030b <derivada_pos+0x3>
    1350:	c0 92 14 03 	sts	0x0314, r12	; 0x800314 <derivada>
    1354:	d0 92 15 03 	sts	0x0315, r13	; 0x800315 <derivada+0x1>
    1358:	e0 92 16 03 	sts	0x0316, r14	; 0x800316 <derivada+0x2>
    135c:	f0 92 17 03 	sts	0x0317, r15	; 0x800317 <derivada+0x3>
	
	calcularIntegral(e);
    1360:	cb 01       	movw	r24, r22
    1362:	0e 94 b1 05 	call	0xb62	; 0xb62 <calcularIntegral>
	return( Kp*e + Kd*derivada + Ki*s );
    1366:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <e>
    136a:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <e+0x1>
    136e:	07 2e       	mov	r0, r23
    1370:	00 0c       	add	r0, r0
    1372:	88 0b       	sbc	r24, r24
    1374:	99 0b       	sbc	r25, r25
    1376:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    137a:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <Kp>
    137e:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <Kp+0x1>
    1382:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <Kp+0x2>
    1386:	50 91 b4 02 	lds	r21, 0x02B4	; 0x8002b4 <Kp+0x3>
    138a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    138e:	6b 01       	movw	r12, r22
    1390:	7c 01       	movw	r14, r24
    1392:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <derivada>
    1396:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <derivada+0x1>
    139a:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <derivada+0x2>
    139e:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <derivada+0x3>
    13a2:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <Kd>
    13a6:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <Kd+0x1>
    13aa:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <Kd+0x2>
    13ae:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <Kd+0x3>
    13b2:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
    13c2:	6b 01       	movw	r12, r22
    13c4:	7c 01       	movw	r14, r24
    13c6:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <s>
    13ca:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <s+0x1>
    13ce:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <s+0x2>
    13d2:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <s+0x3>
    13d6:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <Ki>
    13da:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <Ki+0x1>
    13de:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Ki+0x2>
    13e2:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <Ki+0x3>
    13e6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	c7 01       	movw	r24, r14
    13f0:	b6 01       	movw	r22, r12
    13f2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
    1400:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <DER>
    1404:	88 23       	and	r24, r24
    1406:	91 f0       	breq	.+36     	; 0x142c <f00+0x2c>
		angulo--;
    1408:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    140c:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    1416:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=-1;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	9f ef       	ldi	r25, 0xFF	; 255
    141e:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    1422:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = CeroUno;
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	}
	if (IZQ){
    142c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <IZQ>
    1430:	88 23       	and	r24, r24
    1432:	89 f0       	breq	.+34     	; 0x1456 <f00+0x56>
		angulo++;
    1434:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    1438:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    1442:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    144e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = UnoCero;
    1452:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
    1456:	08 95       	ret

00001458 <f10>:
	}
}
void f10(void){
	if(DER){
    1458:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <DER>
    145c:	88 23       	and	r24, r24
    145e:	91 f0       	breq	.+36     	; 0x1484 <f10+0x2c>
		angulo++;
    1460:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    1464:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    146e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    147a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = UnoUno;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	}
	if(!IZQ){
    1484:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <IZQ>
    1488:	81 11       	cpse	r24, r1
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <f10+0x56>
		angulo--;
    148c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    1490:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    149a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=-1;
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    14a6:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = CeroCero;
    14aa:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <estado>
    14ae:	08 95       	ret

000014b0 <f01>:
	}
}
void f01(void){
	if(!DER){
    14b0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <DER>
    14b4:	81 11       	cpse	r24, r1
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <f01+0x2a>
		angulo++;
    14b8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    14bc:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    14c6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    14d2:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = CeroCero;
    14d6:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <estado>
	}
	if(IZQ){
    14da:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <IZQ>
    14de:	88 23       	and	r24, r24
    14e0:	91 f0       	breq	.+36     	; 0x1506 <f01+0x56>
		angulo--;
    14e2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    14e6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    14f0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=-1;
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    14fc:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = UnoUno;
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
    1506:	08 95       	ret

00001508 <f11>:
	}
}
void f11(void){
	if(!DER){
    1508:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <DER>
    150c:	81 11       	cpse	r24, r1
    150e:	12 c0       	rjmp	.+36     	; 0x1534 <f11+0x2c>
		angulo--;
    1510:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    1514:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    151e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=-1;
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    152a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = UnoCero;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	}
	if(!IZQ){
    1534:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <IZQ>
    1538:	81 11       	cpse	r24, r1
    153a:	12 c0       	rjmp	.+36     	; 0x1560 <f11+0x58>
		angulo++;
    153c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <angulo>
    1540:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <angulo+0x1>
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <angulo+0x1>
    154a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <angulo>
		anguloANt=1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <anguloANt+0x1>
    1556:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <anguloANt>
		estado = CeroUno;
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
    1560:	08 95       	ret

00001562 <getAnguloEncoder>:

//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
    1562:	fb 01       	movw	r30, r22
	*anguloOUT = angulo;
    1564:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <angulo>
    1568:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <angulo+0x1>
    156c:	dc 01       	movw	r26, r24
    156e:	2d 93       	st	X+, r18
    1570:	3c 93       	st	X, r19
	if(tiempoMuestraOUT!=0){
    1572:	30 97       	sbiw	r30, 0x00	; 0
    1574:	09 f4       	brne	.+2      	; 0x1578 <getAnguloEncoder+0x16>
    1576:	54 c0       	rjmp	.+168    	; 0x1620 <getAnguloEncoder+0xbe>
		*tiempoMuestraOUT =anguloANt*(derivate_D + derivate_I)/2;
    1578:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <derivate_D>
    157c:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <derivate_D+0x1>
    1580:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <derivate_I>
    1584:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <derivate_I+0x1>
    1588:	28 0f       	add	r18, r24
    158a:	39 1f       	adc	r19, r25
    158c:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <anguloANt>
    1590:	50 91 be 02 	lds	r21, 0x02BE	; 0x8002be <anguloANt+0x1>
    1594:	24 9f       	mul	r18, r20
    1596:	c0 01       	movw	r24, r0
    1598:	25 9f       	mul	r18, r21
    159a:	90 0d       	add	r25, r0
    159c:	34 9f       	mul	r19, r20
    159e:	90 0d       	add	r25, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	99 23       	and	r25, r25
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <getAnguloEncoder+0x46>
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
		
		if(*tiempoMuestraOUT == axiAnt){
    15b0:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <axiAnt>
    15b4:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <axiAnt+0x1>
    15b8:	82 17       	cp	r24, r18
    15ba:	93 07       	cpc	r25, r19
    15bc:	59 f5       	brne	.+86     	; 0x1614 <getAnguloEncoder+0xb2>
			*tiempoMuestraOUT = anguloANt*(derivate_D + derivate_I)/2+ anguloANt*derivate_counter_D/2;
    15be:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <derivate_D>
    15c2:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <derivate_D+0x1>
    15c6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <derivate_I>
    15ca:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <derivate_I+0x1>
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	42 9f       	mul	r20, r18
    15d4:	c0 01       	movw	r24, r0
    15d6:	43 9f       	mul	r20, r19
    15d8:	90 0d       	add	r25, r0
    15da:	52 9f       	mul	r21, r18
    15dc:	90 0d       	add	r25, r0
    15de:	11 24       	eor	r1, r1
    15e0:	99 23       	and	r25, r25
    15e2:	0c f4       	brge	.+2      	; 0x15e6 <getAnguloEncoder+0x84>
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	9c 01       	movw	r18, r24
    15e8:	35 95       	asr	r19
    15ea:	27 95       	ror	r18
    15ec:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <derivate_counter_D>
    15f0:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <derivate_counter_D+0x1>
    15f4:	46 9f       	mul	r20, r22
    15f6:	c0 01       	movw	r24, r0
    15f8:	47 9f       	mul	r20, r23
    15fa:	90 0d       	add	r25, r0
    15fc:	56 9f       	mul	r21, r22
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	99 23       	and	r25, r25
    1604:	0c f4       	brge	.+2      	; 0x1608 <getAnguloEncoder+0xa6>
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	95 95       	asr	r25
    160a:	87 95       	ror	r24
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
		}
		signoAnt= anguloANt;
		axiAnt= *tiempoMuestraOUT;
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <axiAnt+0x1>
    161c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <axiAnt>
    1620:	08 95       	ret

00001622 <set_origen>:
	}
}

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    1622:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <DER>
    1626:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <IZQ>
    162a:	89 23       	and	r24, r25
    162c:	19 f0       	breq	.+6      	; 0x1634 <set_origen+0x12>
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    1634:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <DER>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	22 23       	and	r18, r18
    163e:	11 f0       	breq	.+4      	; 0x1644 <set_origen+0x22>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <IZQ>
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	82 23       	and	r24, r18
    164c:	93 23       	and	r25, r19
    164e:	89 2b       	or	r24, r25
    1650:	19 f0       	breq	.+6      	; 0x1658 <set_origen+0x36>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    1658:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <DER>
    165c:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <IZQ>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	33 23       	and	r19, r19
    1666:	11 f0       	breq	.+4      	; 0x166c <set_origen+0x4a>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	82 23       	and	r24, r18
    1670:	93 23       	and	r25, r19
    1672:	89 2b       	or	r24, r25
    1674:	19 f0       	breq	.+6      	; 0x167c <set_origen+0x5a>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    167c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <DER>
    1680:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <IZQ>
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	81 11       	cpse	r24, r1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	21 11       	cpse	r18, r1
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	89 23       	and	r24, r25
    1692:	11 f0       	breq	.+4      	; 0x1698 <set_origen+0x76>
    1694:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <estado>
    1698:	2f ef       	ldi	r18, 0xFF	; 255
    169a:	80 e7       	ldi	r24, 0x70	; 112
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	80 40       	sbci	r24, 0x00	; 0
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <set_origen+0x7c>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <set_origen+0x86>
    16a8:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    16aa:	89 b1       	in	r24, 0x09	; 9
    16ac:	88 70       	andi	r24, 0x08	; 8
    16ae:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <IZQ>
	DER = LEERDER;
    16b2:	89 b1       	in	r24, 0x09	; 9
    16b4:	84 70       	andi	r24, 0x04	; 4
    16b6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    16ba:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <estado>
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	eb 54       	subi	r30, 0x4B	; 75
    16c6:	fd 4f       	sbci	r31, 0xFD	; 253
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	09 95       	icall
	
	angulo = 0;	
    16d0:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <angulo+0x1>
    16d4:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <angulo>
    16d8:	08 95       	ret

000016da <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    16da:	8a b1       	in	r24, 0x0a	; 10
    16dc:	8b 7f       	andi	r24, 0xFB	; 251
    16de:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    16e0:	8b b1       	in	r24, 0x0b	; 11
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    16e6:	8a b1       	in	r24, 0x0a	; 10
    16e8:	87 7f       	andi	r24, 0xF7	; 247
    16ea:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    16ec:	8b b1       	in	r24, 0x0b	; 11
    16ee:	88 60       	ori	r24, 0x08	; 8
    16f0:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    16f2:	8d b3       	in	r24, 0x1d	; 29
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    16f8:	e9 e6       	ldi	r30, 0x69	; 105
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    1702:	80 81       	ld	r24, Z
    1704:	8d 7f       	andi	r24, 0xFD	; 253
    1706:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    1708:	8d b3       	in	r24, 0x1d	; 29
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    170e:	80 81       	ld	r24, Z
    1710:	84 60       	ori	r24, 0x04	; 4
    1712:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    1714:	80 81       	ld	r24, Z
    1716:	87 7f       	andi	r24, 0xF7	; 247
    1718:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    1720:	94 e0       	ldi	r25, 0x04	; 4
    1722:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    1726:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    172a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    172e:	0e 94 11 0b 	call	0x1622	; 0x1622 <set_origen>
    1732:	08 95       	ret

00001734 <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    1756:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <derivate_counter_I>
    175a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <derivate_counter_I+0x1>
    175e:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <derivate_I+0x1>
    1762:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <derivate_I>
	derivate_counter_I = 0;
    1766:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <derivate_counter_I+0x1>
    176a:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <derivate_counter_I>
	IZQ = LEERIZQ;
    176e:	89 b1       	in	r24, 0x09	; 9
    1770:	88 70       	andi	r24, 0x08	; 8
    1772:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <IZQ>
	DER = LEERDER;
    1776:	89 b1       	in	r24, 0x09	; 9
    1778:	84 70       	andi	r24, 0x04	; 4
    177a:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    177e:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <estado>
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	ee 0f       	add	r30, r30
    1786:	ff 1f       	adc	r31, r31
    1788:	eb 54       	subi	r30, 0x4B	; 75
    178a:	fd 4f       	sbci	r31, 0xFD	; 253
    178c:	01 90       	ld	r0, Z+
    178e:	f0 81       	ld	r31, Z
    1790:	e0 2d       	mov	r30, r0
    1792:	09 95       	icall
}
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	bf 91       	pop	r27
    179a:	af 91       	pop	r26
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	7f 91       	pop	r23
    17a2:	6f 91       	pop	r22
    17a4:	5f 91       	pop	r21
    17a6:	4f 91       	pop	r20
    17a8:	3f 91       	pop	r19
    17aa:	2f 91       	pop	r18
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	0f 90       	pop	r0
    17b2:	1f 90       	pop	r1
    17b4:	18 95       	reti

000017b6 <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    17b6:	1f 92       	push	r1
    17b8:	0f 92       	push	r0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	2f 93       	push	r18
    17c2:	3f 93       	push	r19
    17c4:	4f 93       	push	r20
    17c6:	5f 93       	push	r21
    17c8:	6f 93       	push	r22
    17ca:	7f 93       	push	r23
    17cc:	8f 93       	push	r24
    17ce:	9f 93       	push	r25
    17d0:	af 93       	push	r26
    17d2:	bf 93       	push	r27
    17d4:	ef 93       	push	r30
    17d6:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    17d8:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_counter_D>
    17dc:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_counter_D+0x1>
    17e0:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <derivate_D+0x1>
    17e4:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <derivate_D>
	derivate_counter_D = 0;
    17e8:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <derivate_counter_D+0x1>
    17ec:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <derivate_counter_D>
	IZQ = LEERIZQ;
    17f0:	89 b1       	in	r24, 0x09	; 9
    17f2:	88 70       	andi	r24, 0x08	; 8
    17f4:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <IZQ>
	DER = LEERDER;
    17f8:	89 b1       	in	r24, 0x09	; 9
    17fa:	84 70       	andi	r24, 0x04	; 4
    17fc:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    1800:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <estado>
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	eb 54       	subi	r30, 0x4B	; 75
    180c:	fd 4f       	sbci	r31, 0xFD	; 253
    180e:	01 90       	ld	r0, Z+
    1810:	f0 81       	ld	r31, Z
    1812:	e0 2d       	mov	r30, r0
    1814:	09 95       	icall
}
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	2f 93       	push	r18
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D!=32000)derivate_counter_D++;
    1848:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_counter_D>
    184c:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_counter_D+0x1>
    1850:	81 15       	cp	r24, r1
    1852:	9d 47       	sbci	r25, 0x7D	; 125
    1854:	49 f0       	breq	.+18     	; 0x1868 <__vector_7+0x30>
    1856:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <derivate_counter_D>
    185a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <derivate_counter_D+0x1>
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <derivate_counter_D+0x1>
    1864:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <derivate_counter_D>
	if(derivate_counter_I!=32000)derivate_counter_I++;
    1868:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <derivate_counter_I>
    186c:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <derivate_counter_I+0x1>
    1870:	81 15       	cp	r24, r1
    1872:	9d 47       	sbci	r25, 0x7D	; 125
    1874:	49 f0       	breq	.+18     	; 0x1888 <__vector_7+0x50>
    1876:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <derivate_counter_I>
    187a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <derivate_counter_I+0x1>
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <derivate_counter_I+0x1>
    1884:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <derivate_counter_I>
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <getTiempoInforme>:

volatile unsigned char Flag_Informo=0,Flag_PID=0,Flag_Button=0,Flag_leerDatos=0;
volatile uint32_t tiempoSEOS=0,tiempoInforme=0;

uint32_t getTiempoInforme(){
	return tiempoInforme;
    1898:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <tiempoInforme>
    189c:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <tiempoInforme+0x1>
    18a0:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <tiempoInforme+0x2>
    18a4:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <tiempoInforme+0x3>
}
    18a8:	08 95       	ret

000018aa <getTiempoSEOS>:

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
    18aa:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <tiempoSEOS>
    18ae:	70 91 43 03 	lds	r23, 0x0343	; 0x800343 <tiempoSEOS+0x1>
    18b2:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <tiempoSEOS+0x2>
    18b6:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <tiempoSEOS+0x3>
}
    18ba:	08 95       	ret

000018bc <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    18bc:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <contPID>
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <contPID>
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <Flag_PID>
		contPID=0;
    18d0:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    18d4:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <contInformo>
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <contInformo>
    18de:	84 31       	cpi	r24, 0x14	; 20
    18e0:	29 f4       	brne	.+10     	; 0x18ec <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Flag_Informo>
		contInformo=0;
    18e8:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    18ec:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <contButtton>
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <contButtton>
    18f6:	8a 30       	cpi	r24, 0x0A	; 10
    18f8:	29 f4       	brne	.+10     	; 0x1904 <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <Flag_Button>
		contButtton=0;
    1900:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    1904:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <contLeerDatos>
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <contLeerDatos>
    190e:	88 32       	cpi	r24, 0x28	; 40
    1910:	29 f4       	brne	.+10     	; 0x191c <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <Flag_leerDatos>
		contLeerDatos=0;
    1918:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <contLeerDatos>
    191c:	08 95       	ret

0000191e <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    191e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <Flag_PID>
    1922:	88 23       	and	r24, r24
    1924:	21 f0       	breq	.+8      	; 0x192e <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    1926:	0e 94 10 05 	call	0xa20	; 0xa20 <Actulizar_PID>
		Flag_PID = 0;
    192a:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <Flag_PID>
	}
	if(Flag_Informo){
    192e:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <Flag_Informo>
    1932:	88 23       	and	r24, r24
    1934:	21 f0       	breq	.+8      	; 0x193e <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    1936:	0e 94 14 01 	call	0x228	; 0x228 <Informar_Actulizar>
		Flag_Informo = 0;
    193a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <Flag_Informo>
	}
	if(Flag_Button){
    193e:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <Flag_Button>
    1942:	88 23       	and	r24, r24
    1944:	21 f0       	breq	.+8      	; 0x194e <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    1946:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    194a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <Flag_Button>
	}
	if(Flag_leerDatos){
    194e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Flag_leerDatos>
    1952:	88 23       	and	r24, r24
    1954:	21 f0       	breq	.+8      	; 0x195e <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    1956:	0e 94 94 01 	call	0x328	; 0x328 <actulizar_leerDatos>
		Flag_leerDatos=0;
    195a:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <Flag_leerDatos>
    195e:	08 95       	ret

00001960 <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    1968:	9c e7       	ldi	r25, 0x7C	; 124
    196a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    196c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1970:	08 95       	ret

00001972 <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    1994:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SEOS_SCH_Tasks>
	tiempoSEOS++;
    1998:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <tiempoSEOS>
    199c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <tiempoSEOS+0x1>
    19a0:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <tiempoSEOS+0x2>
    19a4:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <tiempoSEOS+0x3>
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	b1 1d       	adc	r27, r1
    19ae:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <tiempoSEOS>
    19b2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <tiempoSEOS+0x1>
    19b6:	a0 93 44 03 	sts	0x0344, r26	; 0x800344 <tiempoSEOS+0x2>
    19ba:	b0 93 45 03 	sts	0x0345, r27	; 0x800345 <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    19be:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <contTiempo>
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	98 0f       	add	r25, r24
    19c6:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <contTiempo>
    19ca:	83 30       	cpi	r24, 0x03	; 3
    19cc:	a8 f0       	brcs	.+42     	; 0x19f8 <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    19ce:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <tiempoInforme>
    19d2:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <tiempoInforme+0x1>
    19d6:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <tiempoInforme+0x2>
    19da:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <tiempoInforme+0x3>
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	a1 1d       	adc	r26, r1
    19e2:	b1 1d       	adc	r27, r1
    19e4:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <tiempoInforme>
    19e8:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <tiempoInforme+0x1>
    19ec:	a0 93 40 03 	sts	0x0340, r26	; 0x800340 <tiempoInforme+0x2>
    19f0:	b0 93 41 03 	sts	0x0341, r27	; 0x800341 <tiempoInforme+0x3>
		contTiempo=0;
    19f4:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <contTiempo>
	}
}
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	bf 91       	pop	r27
    19fe:	af 91       	pop	r26
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	7f 91       	pop	r23
    1a06:	6f 91       	pop	r22
    1a08:	5f 91       	pop	r21
    1a0a:	4f 91       	pop	r20
    1a0c:	3f 91       	pop	r19
    1a0e:	2f 91       	pop	r18
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1a2c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1a30:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <valor+0x1>
    1a34:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <valor>
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <Inicializacion_slideResistor>:
    1a46:	87 b1       	in	r24, 0x07	; 7
    1a48:	8e 7f       	andi	r24, 0xFE	; 254
    1a4a:	87 b9       	out	0x07, r24	; 7
    1a4c:	88 b1       	in	r24, 0x08	; 8
    1a4e:	8e 7f       	andi	r24, 0xFE	; 254
    1a50:	88 b9       	out	0x08, r24	; 8
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    1a58:	ea e7       	ldi	r30, 0x7A	; 122
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8f ea       	ldi	r24, 0xAF	; 175
    1a5e:	80 83       	st	Z, r24
    1a60:	ac e7       	ldi	r26, 0x7C	; 124
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	8c 91       	ld	r24, X
    1a66:	80 64       	ori	r24, 0x40	; 64
    1a68:	8c 93       	st	X, r24
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 64       	ori	r24, 0x40	; 64
    1a6e:	80 83       	st	Z, r24
    1a70:	08 95       	ret

00001a72 <getSlideResistor>:

uint16_t getSlideResistor(){
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    1a76:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <i>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	96 39       	cpi	r25, 0x96	; 150
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <getSlideResistor+0x10>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	2a e6       	ldi	r18, 0x6A	; 106
    1a84:	82 9f       	mul	r24, r18
    1a86:	90 0d       	add	r25, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <i>
	i = (i+1)%CANT;
    1a8e:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <i>
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	6f e0       	ldi	r22, 0x0F	; 15
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1a9e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <i>
	valores[i]=valor;
    1aa2:	c0 91 4c 03 	lds	r28, 0x034C	; 0x80034c <i>
    1aa6:	d0 e0       	ldi	r29, 0x00	; 0
    1aa8:	cc 0f       	add	r28, r28
    1aaa:	dd 1f       	adc	r29, r29
    1aac:	cc 0f       	add	r28, r28
    1aae:	dd 1f       	adc	r29, r29
    1ab0:	cf 5a       	subi	r28, 0xAF	; 175
    1ab2:	dc 4f       	sbci	r29, 0xFC	; 252
    1ab4:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <valor>
    1ab8:	70 91 8e 03 	lds	r23, 0x038E	; 0x80038e <valor+0x1>
    1abc:	07 2e       	mov	r0, r23
    1abe:	00 0c       	add	r0, r0
    1ac0:	88 0b       	sbc	r24, r24
    1ac2:	99 0b       	sbc	r25, r25
    1ac4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
    1ac8:	68 83       	st	Y, r22
    1aca:	79 83       	std	Y+1, r23	; 0x01
    1acc:	8a 83       	std	Y+2, r24	; 0x02
    1ace:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    1ad0:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <total>
    1ad4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <total+0x1>
    1ad8:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <total+0x2>
    1adc:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <total+0x3>
	for(k=0;k<CANT;k++){
    1ae0:	c0 e0       	ldi	r28, 0x00	; 0
    1ae2:	28 c0       	rjmp	.+80     	; 0x1b34 <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    1ae4:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <i>
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0f 96       	adiw	r24, 0x0f	; 15
    1aec:	8c 1b       	sub	r24, r28
    1aee:	91 09       	sbc	r25, r1
    1af0:	6f e0       	ldi	r22, 0x0F	; 15
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1af8:	fc 01       	movw	r30, r24
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	ef 5a       	subi	r30, 0xAF	; 175
    1b04:	fc 4f       	sbci	r31, 0xFC	; 252
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <total>
    1b12:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <total+0x1>
    1b16:	40 91 4f 03 	lds	r20, 0x034F	; 0x80034f <total+0x2>
    1b1a:	50 91 50 03 	lds	r21, 0x0350	; 0x800350 <total+0x3>
    1b1e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__addsf3>
    1b22:	60 93 4d 03 	sts	0x034D, r22	; 0x80034d <total>
    1b26:	70 93 4e 03 	sts	0x034E, r23	; 0x80034e <total+0x1>
    1b2a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <total+0x2>
    1b2e:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    1b32:	cf 5f       	subi	r28, 0xFF	; 255
    1b34:	cf 30       	cpi	r28, 0x0F	; 15
    1b36:	b0 f2       	brcs	.-84     	; 0x1ae4 <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e7       	ldi	r20, 0x70	; 112
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	60 91 4d 03 	lds	r22, 0x034D	; 0x80034d <total>
    1b44:	70 91 4e 03 	lds	r23, 0x034E	; 0x80034e <total+0x1>
    1b48:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <total+0x2>
    1b4c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <total+0x3>
    1b50:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
    1b54:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
    1b58:	cb 01       	movw	r24, r22
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    1b60:	86 e0       	ldi	r24, 0x06	; 6
    1b62:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1b6c:	e1 ec       	ldi	r30, 0xC1	; 193
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 61       	ori	r24, 0x10	; 16
    1b74:	80 83       	st	Z, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	80 83       	st	Z, r24
    1b7c:	80 81       	ld	r24, Z
    1b7e:	88 60       	ori	r24, 0x08	; 8
    1b80:	80 83       	st	Z, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	80 62       	ori	r24, 0x20	; 32
    1b86:	80 83       	st	Z, r24
    1b88:	e0 ec       	ldi	r30, 0xC0	; 192
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 62       	ori	r24, 0x20	; 32
    1b90:	80 83       	st	Z, r24
    1b92:	08 95       	ret

00001b94 <getEspacioDisponibleBuffer>:
    1b94:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <tx_buffer_write>
    1b98:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <tx_buffer_read>
    1b9c:	98 17       	cp	r25, r24
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <getEspacioDisponibleBuffer+0x12>
    1ba0:	89 1b       	sub	r24, r25
    1ba2:	8a 51       	subi	r24, 0x1A	; 26
    1ba4:	08 95       	ret
    1ba6:	89 1b       	sub	r24, r25
    1ba8:	08 95       	ret

00001baa <UART_TransmitChar>:
    1baa:	48 2f       	mov	r20, r24
    1bac:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <tx_buffer_write>
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	c9 01       	movw	r24, r18
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	66 ee       	ldi	r22, 0xE6	; 230
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1bbe:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <tx_buffer_read>
    1bc2:	98 17       	cp	r25, r24
    1bc4:	59 f0       	breq	.+22     	; 0x1bdc <UART_TransmitChar+0x32>
    1bc6:	f9 01       	movw	r30, r18
    1bc8:	e8 50       	subi	r30, 0x08	; 8
    1bca:	fc 4f       	sbci	r31, 0xFC	; 252
    1bcc:	40 83       	st	Z, r20
    1bce:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <tx_buffer_write>
    1bd2:	e1 ec       	ldi	r30, 0xC1	; 193
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 62       	ori	r24, 0x20	; 32
    1bda:	80 83       	st	Z, r24
    1bdc:	08 95       	ret

00001bde <UART_TransmitString>:
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
    1be6:	16 2f       	mov	r17, r22
    1be8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <getEspacioDisponibleBuffer>
    1bec:	18 17       	cp	r17, r24
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <UART_TransmitString+0x1a>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <UART_TransmitString+0x20>
    1bf2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <UART_TransmitChar>
    1bf6:	21 96       	adiw	r28, 0x01	; 1
    1bf8:	88 81       	ld	r24, Y
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	fa cf       	rjmp	.-12     	; 0x1bf2 <UART_TransmitString+0x14>
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	08 95       	ret

00001c06 <__vector_19>:
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	5f 93       	push	r21
    1c12:	6f 93       	push	r22
    1c14:	7f 93       	push	r23
    1c16:	8f 93       	push	r24
    1c18:	9f 93       	push	r25
    1c1a:	af 93       	push	r26
    1c1c:	bf 93       	push	r27
    1c1e:	ef 93       	push	r30
    1c20:	ff 93       	push	r31
    1c22:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <tx_buffer_read>
    1c26:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <tx_buffer_write>
    1c2a:	e8 17       	cp	r30, r24
    1c2c:	89 f0       	breq	.+34     	; 0x1c50 <__vector_19+0x4a>
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	e8 50       	subi	r30, 0x08	; 8
    1c32:	fc 4f       	sbci	r31, 0xFC	; 252
    1c34:	80 81       	ld	r24, Z
    1c36:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1c3a:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <tx_buffer_read>
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	66 ee       	ldi	r22, 0xE6	; 230
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1c4a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <tx_buffer_read>
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <__vector_19+0x54>
    1c50:	e1 ec       	ldi	r30, 0xC1	; 193
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 7d       	andi	r24, 0xDF	; 223
    1c58:	80 83       	st	Z, r24
    1c5a:	ff 91       	pop	r31
    1c5c:	ef 91       	pop	r30
    1c5e:	bf 91       	pop	r27
    1c60:	af 91       	pop	r26
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	7f 91       	pop	r23
    1c68:	6f 91       	pop	r22
    1c6a:	5f 91       	pop	r21
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <SacarDatosBufferEnter>:
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	ec 01       	movw	r28, r24
    1c7c:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <recibioEnter>
    1c80:	88 23       	and	r24, r24
    1c82:	21 f1       	breq	.+72     	; 0x1ccc <SacarDatosBufferEnter+0x56>
    1c84:	f8 94       	cli
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	11 c0       	rjmp	.+34     	; 0x1cac <SacarDatosBufferEnter+0x36>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f1 1d       	adc	r31, r1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	dc 01       	movw	r26, r24
    1c94:	ae 56       	subi	r26, 0x6E	; 110
    1c96:	bc 4f       	sbci	r27, 0xFC	; 252
    1c98:	3c 91       	ld	r19, X
    1c9a:	30 83       	st	Z, r19
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	64 e6       	ldi	r22, 0x64	; 100
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
    1ca6:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <rx_buffer_read>
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <rx_buffer_write>
    1cb0:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <rx_buffer_read>
    1cb4:	98 17       	cp	r25, r24
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <SacarDatosBufferEnter+0x46>
    1cb8:	23 36       	cpi	r18, 0x63	; 99
    1cba:	38 f3       	brcs	.-50     	; 0x1c8a <SacarDatosBufferEnter+0x14>
    1cbc:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <recibioEnter>
    1cc0:	78 94       	sei
    1cc2:	c2 0f       	add	r28, r18
    1cc4:	d1 1d       	adc	r29, r1
    1cc6:	18 82       	st	Y, r1
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <SacarDatosBufferEnter+0x58>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <__vector_18>:

ISR(USART_RX_vect){
    1cd4:	1f 92       	push	r1
    1cd6:	0f 92       	push	r0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	0f 92       	push	r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	2f 93       	push	r18
    1ce0:	3f 93       	push	r19
    1ce2:	5f 93       	push	r21
    1ce4:	6f 93       	push	r22
    1ce6:	7f 93       	push	r23
    1ce8:	8f 93       	push	r24
    1cea:	9f 93       	push	r25
    1cec:	af 93       	push	r26
    1cee:	bf 93       	push	r27
    1cf0:	ef 93       	push	r30
    1cf2:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    1cf4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <rx_buffer_write>
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	64 e6       	ldi	r22, 0x64	; 100
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divmodhi4>
	uint8_t receivedChar = UDR0;
    1d04:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    1d08:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <rx_buffer_read>
    1d0c:	28 17       	cp	r18, r24
    1d0e:	a9 f0       	breq	.+42     	; 0x1d3a <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    1d10:	9a 30       	cpi	r25, 0x0A	; 10
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <__vector_18+0x44>
    1d14:	9d 30       	cpi	r25, 0x0D	; 13
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <__vector_18+0x4c>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <recibioEnter>
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    1d20:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <recibioEnter>
    1d24:	31 11       	cpse	r19, r1
    1d26:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    1d2a:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <rx_buffer_write>
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	ee 56       	subi	r30, 0x6E	; 110
    1d32:	fc 4f       	sbci	r31, 0xFC	; 252
    1d34:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    1d36:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <rx_buffer_write>
		}
	}
}
    1d3a:	ff 91       	pop	r31
    1d3c:	ef 91       	pop	r30
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__subsf3>:
    1d5a:	50 58       	subi	r21, 0x80	; 128

00001d5c <__addsf3>:
    1d5c:	bb 27       	eor	r27, r27
    1d5e:	aa 27       	eor	r26, r26
    1d60:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__addsf3x>
    1d64:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__fp_round>
    1d68:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_pscA>
    1d6c:	38 f0       	brcs	.+14     	; 0x1d7c <__addsf3+0x20>
    1d6e:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscB>
    1d72:	20 f0       	brcs	.+8      	; 0x1d7c <__addsf3+0x20>
    1d74:	39 f4       	brne	.+14     	; 0x1d84 <__addsf3+0x28>
    1d76:	9f 3f       	cpi	r25, 0xFF	; 255
    1d78:	19 f4       	brne	.+6      	; 0x1d80 <__addsf3+0x24>
    1d7a:	26 f4       	brtc	.+8      	; 0x1d84 <__addsf3+0x28>
    1d7c:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_nan>
    1d80:	0e f4       	brtc	.+2      	; 0x1d84 <__addsf3+0x28>
    1d82:	e0 95       	com	r30
    1d84:	e7 fb       	bst	r30, 7
    1d86:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_inf>

00001d8a <__addsf3x>:
    1d8a:	e9 2f       	mov	r30, r25
    1d8c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_split3>
    1d90:	58 f3       	brcs	.-42     	; 0x1d68 <__addsf3+0xc>
    1d92:	ba 17       	cp	r27, r26
    1d94:	62 07       	cpc	r22, r18
    1d96:	73 07       	cpc	r23, r19
    1d98:	84 07       	cpc	r24, r20
    1d9a:	95 07       	cpc	r25, r21
    1d9c:	20 f0       	brcs	.+8      	; 0x1da6 <__addsf3x+0x1c>
    1d9e:	79 f4       	brne	.+30     	; 0x1dbe <__addsf3x+0x34>
    1da0:	a6 f5       	brtc	.+104    	; 0x1e0a <__addsf3x+0x80>
    1da2:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_zero>
    1da6:	0e f4       	brtc	.+2      	; 0x1daa <__addsf3x+0x20>
    1da8:	e0 95       	com	r30
    1daa:	0b 2e       	mov	r0, r27
    1dac:	ba 2f       	mov	r27, r26
    1dae:	a0 2d       	mov	r26, r0
    1db0:	0b 01       	movw	r0, r22
    1db2:	b9 01       	movw	r22, r18
    1db4:	90 01       	movw	r18, r0
    1db6:	0c 01       	movw	r0, r24
    1db8:	ca 01       	movw	r24, r20
    1dba:	a0 01       	movw	r20, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	ff 27       	eor	r31, r31
    1dc0:	59 1b       	sub	r21, r25
    1dc2:	99 f0       	breq	.+38     	; 0x1dea <__addsf3x+0x60>
    1dc4:	59 3f       	cpi	r21, 0xF9	; 249
    1dc6:	50 f4       	brcc	.+20     	; 0x1ddc <__addsf3x+0x52>
    1dc8:	50 3e       	cpi	r21, 0xE0	; 224
    1dca:	68 f1       	brcs	.+90     	; 0x1e26 <__addsf3x+0x9c>
    1dcc:	1a 16       	cp	r1, r26
    1dce:	f0 40       	sbci	r31, 0x00	; 0
    1dd0:	a2 2f       	mov	r26, r18
    1dd2:	23 2f       	mov	r18, r19
    1dd4:	34 2f       	mov	r19, r20
    1dd6:	44 27       	eor	r20, r20
    1dd8:	58 5f       	subi	r21, 0xF8	; 248
    1dda:	f3 cf       	rjmp	.-26     	; 0x1dc2 <__addsf3x+0x38>
    1ddc:	46 95       	lsr	r20
    1dde:	37 95       	ror	r19
    1de0:	27 95       	ror	r18
    1de2:	a7 95       	ror	r26
    1de4:	f0 40       	sbci	r31, 0x00	; 0
    1de6:	53 95       	inc	r21
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__addsf3x+0x52>
    1dea:	7e f4       	brtc	.+30     	; 0x1e0a <__addsf3x+0x80>
    1dec:	1f 16       	cp	r1, r31
    1dee:	ba 0b       	sbc	r27, r26
    1df0:	62 0b       	sbc	r22, r18
    1df2:	73 0b       	sbc	r23, r19
    1df4:	84 0b       	sbc	r24, r20
    1df6:	ba f0       	brmi	.+46     	; 0x1e26 <__addsf3x+0x9c>
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	a1 f0       	breq	.+40     	; 0x1e24 <__addsf3x+0x9a>
    1dfc:	ff 0f       	add	r31, r31
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	66 1f       	adc	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	c2 f7       	brpl	.-16     	; 0x1df8 <__addsf3x+0x6e>
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <__addsf3x+0x9c>
    1e0a:	ba 0f       	add	r27, r26
    1e0c:	62 1f       	adc	r22, r18
    1e0e:	73 1f       	adc	r23, r19
    1e10:	84 1f       	adc	r24, r20
    1e12:	48 f4       	brcc	.+18     	; 0x1e26 <__addsf3x+0x9c>
    1e14:	87 95       	ror	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	b7 95       	ror	r27
    1e1c:	f7 95       	ror	r31
    1e1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e20:	08 f0       	brcs	.+2      	; 0x1e24 <__addsf3x+0x9a>
    1e22:	b0 cf       	rjmp	.-160    	; 0x1d84 <__addsf3+0x28>
    1e24:	93 95       	inc	r25
    1e26:	88 0f       	add	r24, r24
    1e28:	08 f0       	brcs	.+2      	; 0x1e2c <__addsf3x+0xa2>
    1e2a:	99 27       	eor	r25, r25
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	97 95       	ror	r25
    1e30:	87 95       	ror	r24
    1e32:	08 95       	ret

00001e34 <__cmpsf2>:
    1e34:	0e 94 04 10 	call	0x2008	; 0x2008 <__fp_cmp>
    1e38:	08 f4       	brcc	.+2      	; 0x1e3c <__cmpsf2+0x8>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	08 95       	ret

00001e3e <__divsf3>:
    1e3e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__divsf3x>
    1e42:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__fp_round>
    1e46:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscB>
    1e4a:	58 f0       	brcs	.+22     	; 0x1e62 <__divsf3+0x24>
    1e4c:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_pscA>
    1e50:	40 f0       	brcs	.+16     	; 0x1e62 <__divsf3+0x24>
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <__divsf3+0x20>
    1e54:	5f 3f       	cpi	r21, 0xFF	; 255
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <__divsf3+0x24>
    1e58:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_inf>
    1e5c:	51 11       	cpse	r21, r1
    1e5e:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_szero>
    1e62:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_nan>

00001e66 <__divsf3x>:
    1e66:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_split3>
    1e6a:	68 f3       	brcs	.-38     	; 0x1e46 <__divsf3+0x8>

00001e6c <__divsf3_pse>:
    1e6c:	99 23       	and	r25, r25
    1e6e:	b1 f3       	breq	.-20     	; 0x1e5c <__divsf3+0x1e>
    1e70:	55 23       	and	r21, r21
    1e72:	91 f3       	breq	.-28     	; 0x1e58 <__divsf3+0x1a>
    1e74:	95 1b       	sub	r25, r21
    1e76:	55 0b       	sbc	r21, r21
    1e78:	bb 27       	eor	r27, r27
    1e7a:	aa 27       	eor	r26, r26
    1e7c:	62 17       	cp	r22, r18
    1e7e:	73 07       	cpc	r23, r19
    1e80:	84 07       	cpc	r24, r20
    1e82:	38 f0       	brcs	.+14     	; 0x1e92 <__divsf3_pse+0x26>
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	44 1f       	adc	r20, r20
    1e8e:	aa 1f       	adc	r26, r26
    1e90:	a9 f3       	breq	.-22     	; 0x1e7c <__divsf3_pse+0x10>
    1e92:	35 d0       	rcall	.+106    	; 0x1efe <__divsf3_pse+0x92>
    1e94:	0e 2e       	mov	r0, r30
    1e96:	3a f0       	brmi	.+14     	; 0x1ea6 <__divsf3_pse+0x3a>
    1e98:	e0 e8       	ldi	r30, 0x80	; 128
    1e9a:	32 d0       	rcall	.+100    	; 0x1f00 <__divsf3_pse+0x94>
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	e6 95       	lsr	r30
    1ea2:	00 1c       	adc	r0, r0
    1ea4:	ca f7       	brpl	.-14     	; 0x1e98 <__divsf3_pse+0x2c>
    1ea6:	2b d0       	rcall	.+86     	; 0x1efe <__divsf3_pse+0x92>
    1ea8:	fe 2f       	mov	r31, r30
    1eaa:	29 d0       	rcall	.+82     	; 0x1efe <__divsf3_pse+0x92>
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	26 17       	cp	r18, r22
    1eb6:	37 07       	cpc	r19, r23
    1eb8:	48 07       	cpc	r20, r24
    1eba:	ab 07       	cpc	r26, r27
    1ebc:	b0 e8       	ldi	r27, 0x80	; 128
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <__divsf3_pse+0x56>
    1ec0:	bb 0b       	sbc	r27, r27
    1ec2:	80 2d       	mov	r24, r0
    1ec4:	bf 01       	movw	r22, r30
    1ec6:	ff 27       	eor	r31, r31
    1ec8:	93 58       	subi	r25, 0x83	; 131
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	3a f0       	brmi	.+14     	; 0x1edc <__divsf3_pse+0x70>
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	78 f0       	brcs	.+30     	; 0x1ef2 <__divsf3_pse+0x86>
    1ed4:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_inf>
    1ed8:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_szero>
    1edc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ede:	e4 f3       	brlt	.-8      	; 0x1ed8 <__divsf3_pse+0x6c>
    1ee0:	98 3e       	cpi	r25, 0xE8	; 232
    1ee2:	d4 f3       	brlt	.-12     	; 0x1ed8 <__divsf3_pse+0x6c>
    1ee4:	86 95       	lsr	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f7 95       	ror	r31
    1eee:	9f 5f       	subi	r25, 0xFF	; 255
    1ef0:	c9 f7       	brne	.-14     	; 0x1ee4 <__divsf3_pse+0x78>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	96 95       	lsr	r25
    1ef8:	87 95       	ror	r24
    1efa:	97 f9       	bld	r25, 7
    1efc:	08 95       	ret
    1efe:	e1 e0       	ldi	r30, 0x01	; 1
    1f00:	66 0f       	add	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	bb 1f       	adc	r27, r27
    1f08:	62 17       	cp	r22, r18
    1f0a:	73 07       	cpc	r23, r19
    1f0c:	84 07       	cpc	r24, r20
    1f0e:	ba 07       	cpc	r27, r26
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__divsf3_pse+0xae>
    1f12:	62 1b       	sub	r22, r18
    1f14:	73 0b       	sbc	r23, r19
    1f16:	84 0b       	sbc	r24, r20
    1f18:	ba 0b       	sbc	r27, r26
    1f1a:	ee 1f       	adc	r30, r30
    1f1c:	88 f7       	brcc	.-30     	; 0x1f00 <__divsf3_pse+0x94>
    1f1e:	e0 95       	com	r30
    1f20:	08 95       	ret

00001f22 <__fixsfsi>:
    1f22:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
    1f26:	68 94       	set
    1f28:	b1 11       	cpse	r27, r1
    1f2a:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_szero>
    1f2e:	08 95       	ret

00001f30 <__fixunssfsi>:
    1f30:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__fp_splitA>
    1f34:	88 f0       	brcs	.+34     	; 0x1f58 <__fixunssfsi+0x28>
    1f36:	9f 57       	subi	r25, 0x7F	; 127
    1f38:	98 f0       	brcs	.+38     	; 0x1f60 <__fixunssfsi+0x30>
    1f3a:	b9 2f       	mov	r27, r25
    1f3c:	99 27       	eor	r25, r25
    1f3e:	b7 51       	subi	r27, 0x17	; 23
    1f40:	b0 f0       	brcs	.+44     	; 0x1f6e <__fixunssfsi+0x3e>
    1f42:	e1 f0       	breq	.+56     	; 0x1f7c <__fixunssfsi+0x4c>
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	1a f0       	brmi	.+6      	; 0x1f54 <__fixunssfsi+0x24>
    1f4e:	ba 95       	dec	r27
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <__fixunssfsi+0x14>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <__fixunssfsi+0x4c>
    1f54:	b1 30       	cpi	r27, 0x01	; 1
    1f56:	91 f0       	breq	.+36     	; 0x1f7c <__fixunssfsi+0x4c>
    1f58:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__fp_zero>
    1f5c:	b1 e0       	ldi	r27, 0x01	; 1
    1f5e:	08 95       	ret
    1f60:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_zero>
    1f64:	67 2f       	mov	r22, r23
    1f66:	78 2f       	mov	r23, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	b8 5f       	subi	r27, 0xF8	; 248
    1f6c:	39 f0       	breq	.+14     	; 0x1f7c <__fixunssfsi+0x4c>
    1f6e:	b9 3f       	cpi	r27, 0xF9	; 249
    1f70:	cc f3       	brlt	.-14     	; 0x1f64 <__fixunssfsi+0x34>
    1f72:	86 95       	lsr	r24
    1f74:	77 95       	ror	r23
    1f76:	67 95       	ror	r22
    1f78:	b3 95       	inc	r27
    1f7a:	d9 f7       	brne	.-10     	; 0x1f72 <__fixunssfsi+0x42>
    1f7c:	3e f4       	brtc	.+14     	; 0x1f8c <__fixunssfsi+0x5c>
    1f7e:	90 95       	com	r25
    1f80:	80 95       	com	r24
    1f82:	70 95       	com	r23
    1f84:	61 95       	neg	r22
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <__floatunsisf>:
    1f8e:	e8 94       	clt
    1f90:	09 c0       	rjmp	.+18     	; 0x1fa4 <__floatsisf+0x12>

00001f92 <__floatsisf>:
    1f92:	97 fb       	bst	r25, 7
    1f94:	3e f4       	brtc	.+14     	; 0x1fa4 <__floatsisf+0x12>
    1f96:	90 95       	com	r25
    1f98:	80 95       	com	r24
    1f9a:	70 95       	com	r23
    1f9c:	61 95       	neg	r22
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	99 23       	and	r25, r25
    1fa6:	a9 f0       	breq	.+42     	; 0x1fd2 <__floatsisf+0x40>
    1fa8:	f9 2f       	mov	r31, r25
    1faa:	96 e9       	ldi	r25, 0x96	; 150
    1fac:	bb 27       	eor	r27, r27
    1fae:	93 95       	inc	r25
    1fb0:	f6 95       	lsr	r31
    1fb2:	87 95       	ror	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	f1 11       	cpse	r31, r1
    1fbc:	f8 cf       	rjmp	.-16     	; 0x1fae <__floatsisf+0x1c>
    1fbe:	fa f4       	brpl	.+62     	; 0x1ffe <__floatsisf+0x6c>
    1fc0:	bb 0f       	add	r27, r27
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <__floatsisf+0x36>
    1fc4:	60 ff       	sbrs	r22, 0
    1fc6:	1b c0       	rjmp	.+54     	; 0x1ffe <__floatsisf+0x6c>
    1fc8:	6f 5f       	subi	r22, 0xFF	; 255
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <__floatsisf+0x6c>
    1fd2:	88 23       	and	r24, r24
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <__floatsisf+0x48>
    1fd6:	96 e9       	ldi	r25, 0x96	; 150
    1fd8:	11 c0       	rjmp	.+34     	; 0x1ffc <__floatsisf+0x6a>
    1fda:	77 23       	and	r23, r23
    1fdc:	21 f0       	breq	.+8      	; 0x1fe6 <__floatsisf+0x54>
    1fde:	9e e8       	ldi	r25, 0x8E	; 142
    1fe0:	87 2f       	mov	r24, r23
    1fe2:	76 2f       	mov	r23, r22
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <__floatsisf+0x5e>
    1fe6:	66 23       	and	r22, r22
    1fe8:	71 f0       	breq	.+28     	; 0x2006 <__floatsisf+0x74>
    1fea:	96 e8       	ldi	r25, 0x86	; 134
    1fec:	86 2f       	mov	r24, r22
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	2a f0       	brmi	.+10     	; 0x1ffe <__floatsisf+0x6c>
    1ff4:	9a 95       	dec	r25
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	da f7       	brpl	.-10     	; 0x1ff4 <__floatsisf+0x62>
    1ffe:	88 0f       	add	r24, r24
    2000:	96 95       	lsr	r25
    2002:	87 95       	ror	r24
    2004:	97 f9       	bld	r25, 7
    2006:	08 95       	ret

00002008 <__fp_cmp>:
    2008:	99 0f       	add	r25, r25
    200a:	00 08       	sbc	r0, r0
    200c:	55 0f       	add	r21, r21
    200e:	aa 0b       	sbc	r26, r26
    2010:	e0 e8       	ldi	r30, 0x80	; 128
    2012:	fe ef       	ldi	r31, 0xFE	; 254
    2014:	16 16       	cp	r1, r22
    2016:	17 06       	cpc	r1, r23
    2018:	e8 07       	cpc	r30, r24
    201a:	f9 07       	cpc	r31, r25
    201c:	c0 f0       	brcs	.+48     	; 0x204e <__fp_cmp+0x46>
    201e:	12 16       	cp	r1, r18
    2020:	13 06       	cpc	r1, r19
    2022:	e4 07       	cpc	r30, r20
    2024:	f5 07       	cpc	r31, r21
    2026:	98 f0       	brcs	.+38     	; 0x204e <__fp_cmp+0x46>
    2028:	62 1b       	sub	r22, r18
    202a:	73 0b       	sbc	r23, r19
    202c:	84 0b       	sbc	r24, r20
    202e:	95 0b       	sbc	r25, r21
    2030:	39 f4       	brne	.+14     	; 0x2040 <__fp_cmp+0x38>
    2032:	0a 26       	eor	r0, r26
    2034:	61 f0       	breq	.+24     	; 0x204e <__fp_cmp+0x46>
    2036:	23 2b       	or	r18, r19
    2038:	24 2b       	or	r18, r20
    203a:	25 2b       	or	r18, r21
    203c:	21 f4       	brne	.+8      	; 0x2046 <__fp_cmp+0x3e>
    203e:	08 95       	ret
    2040:	0a 26       	eor	r0, r26
    2042:	09 f4       	brne	.+2      	; 0x2046 <__fp_cmp+0x3e>
    2044:	a1 40       	sbci	r26, 0x01	; 1
    2046:	a6 95       	lsr	r26
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	81 1d       	adc	r24, r1
    204c:	81 1d       	adc	r24, r1
    204e:	08 95       	ret

00002050 <__fp_inf>:
    2050:	97 f9       	bld	r25, 7
    2052:	9f 67       	ori	r25, 0x7F	; 127
    2054:	80 e8       	ldi	r24, 0x80	; 128
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	08 95       	ret

0000205c <__fp_nan>:
    205c:	9f ef       	ldi	r25, 0xFF	; 255
    205e:	80 ec       	ldi	r24, 0xC0	; 192
    2060:	08 95       	ret

00002062 <__fp_pscA>:
    2062:	00 24       	eor	r0, r0
    2064:	0a 94       	dec	r0
    2066:	16 16       	cp	r1, r22
    2068:	17 06       	cpc	r1, r23
    206a:	18 06       	cpc	r1, r24
    206c:	09 06       	cpc	r0, r25
    206e:	08 95       	ret

00002070 <__fp_pscB>:
    2070:	00 24       	eor	r0, r0
    2072:	0a 94       	dec	r0
    2074:	12 16       	cp	r1, r18
    2076:	13 06       	cpc	r1, r19
    2078:	14 06       	cpc	r1, r20
    207a:	05 06       	cpc	r0, r21
    207c:	08 95       	ret

0000207e <__fp_round>:
    207e:	09 2e       	mov	r0, r25
    2080:	03 94       	inc	r0
    2082:	00 0c       	add	r0, r0
    2084:	11 f4       	brne	.+4      	; 0x208a <__fp_round+0xc>
    2086:	88 23       	and	r24, r24
    2088:	52 f0       	brmi	.+20     	; 0x209e <__fp_round+0x20>
    208a:	bb 0f       	add	r27, r27
    208c:	40 f4       	brcc	.+16     	; 0x209e <__fp_round+0x20>
    208e:	bf 2b       	or	r27, r31
    2090:	11 f4       	brne	.+4      	; 0x2096 <__fp_round+0x18>
    2092:	60 ff       	sbrs	r22, 0
    2094:	04 c0       	rjmp	.+8      	; 0x209e <__fp_round+0x20>
    2096:	6f 5f       	subi	r22, 0xFF	; 255
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	8f 4f       	sbci	r24, 0xFF	; 255
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	08 95       	ret

000020a0 <__fp_split3>:
    20a0:	57 fd       	sbrc	r21, 7
    20a2:	90 58       	subi	r25, 0x80	; 128
    20a4:	44 0f       	add	r20, r20
    20a6:	55 1f       	adc	r21, r21
    20a8:	59 f0       	breq	.+22     	; 0x20c0 <__fp_splitA+0x10>
    20aa:	5f 3f       	cpi	r21, 0xFF	; 255
    20ac:	71 f0       	breq	.+28     	; 0x20ca <__fp_splitA+0x1a>
    20ae:	47 95       	ror	r20

000020b0 <__fp_splitA>:
    20b0:	88 0f       	add	r24, r24
    20b2:	97 fb       	bst	r25, 7
    20b4:	99 1f       	adc	r25, r25
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <__fp_splitA+0x20>
    20b8:	9f 3f       	cpi	r25, 0xFF	; 255
    20ba:	79 f0       	breq	.+30     	; 0x20da <__fp_splitA+0x2a>
    20bc:	87 95       	ror	r24
    20be:	08 95       	ret
    20c0:	12 16       	cp	r1, r18
    20c2:	13 06       	cpc	r1, r19
    20c4:	14 06       	cpc	r1, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	f2 cf       	rjmp	.-28     	; 0x20ae <__fp_split3+0xe>
    20ca:	46 95       	lsr	r20
    20cc:	f1 df       	rcall	.-30     	; 0x20b0 <__fp_splitA>
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <__fp_splitA+0x30>
    20d0:	16 16       	cp	r1, r22
    20d2:	17 06       	cpc	r1, r23
    20d4:	18 06       	cpc	r1, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	f1 cf       	rjmp	.-30     	; 0x20bc <__fp_splitA+0xc>
    20da:	86 95       	lsr	r24
    20dc:	71 05       	cpc	r23, r1
    20de:	61 05       	cpc	r22, r1
    20e0:	08 94       	sec
    20e2:	08 95       	ret

000020e4 <__fp_zero>:
    20e4:	e8 94       	clt

000020e6 <__fp_szero>:
    20e6:	bb 27       	eor	r27, r27
    20e8:	66 27       	eor	r22, r22
    20ea:	77 27       	eor	r23, r23
    20ec:	cb 01       	movw	r24, r22
    20ee:	97 f9       	bld	r25, 7
    20f0:	08 95       	ret

000020f2 <__gesf2>:
    20f2:	0e 94 04 10 	call	0x2008	; 0x2008 <__fp_cmp>
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <__gesf2+0x8>
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	08 95       	ret

000020fc <__mulsf3>:
    20fc:	0e 94 91 10 	call	0x2122	; 0x2122 <__mulsf3x>
    2100:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__fp_round>
    2104:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_pscA>
    2108:	38 f0       	brcs	.+14     	; 0x2118 <__mulsf3+0x1c>
    210a:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscB>
    210e:	20 f0       	brcs	.+8      	; 0x2118 <__mulsf3+0x1c>
    2110:	95 23       	and	r25, r21
    2112:	11 f0       	breq	.+4      	; 0x2118 <__mulsf3+0x1c>
    2114:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_inf>
    2118:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_nan>
    211c:	11 24       	eor	r1, r1
    211e:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_szero>

00002122 <__mulsf3x>:
    2122:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_split3>
    2126:	70 f3       	brcs	.-36     	; 0x2104 <__mulsf3+0x8>

00002128 <__mulsf3_pse>:
    2128:	95 9f       	mul	r25, r21
    212a:	c1 f3       	breq	.-16     	; 0x211c <__mulsf3+0x20>
    212c:	95 0f       	add	r25, r21
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	55 1f       	adc	r21, r21
    2132:	62 9f       	mul	r22, r18
    2134:	f0 01       	movw	r30, r0
    2136:	72 9f       	mul	r23, r18
    2138:	bb 27       	eor	r27, r27
    213a:	f0 0d       	add	r31, r0
    213c:	b1 1d       	adc	r27, r1
    213e:	63 9f       	mul	r22, r19
    2140:	aa 27       	eor	r26, r26
    2142:	f0 0d       	add	r31, r0
    2144:	b1 1d       	adc	r27, r1
    2146:	aa 1f       	adc	r26, r26
    2148:	64 9f       	mul	r22, r20
    214a:	66 27       	eor	r22, r22
    214c:	b0 0d       	add	r27, r0
    214e:	a1 1d       	adc	r26, r1
    2150:	66 1f       	adc	r22, r22
    2152:	82 9f       	mul	r24, r18
    2154:	22 27       	eor	r18, r18
    2156:	b0 0d       	add	r27, r0
    2158:	a1 1d       	adc	r26, r1
    215a:	62 1f       	adc	r22, r18
    215c:	73 9f       	mul	r23, r19
    215e:	b0 0d       	add	r27, r0
    2160:	a1 1d       	adc	r26, r1
    2162:	62 1f       	adc	r22, r18
    2164:	83 9f       	mul	r24, r19
    2166:	a0 0d       	add	r26, r0
    2168:	61 1d       	adc	r22, r1
    216a:	22 1f       	adc	r18, r18
    216c:	74 9f       	mul	r23, r20
    216e:	33 27       	eor	r19, r19
    2170:	a0 0d       	add	r26, r0
    2172:	61 1d       	adc	r22, r1
    2174:	23 1f       	adc	r18, r19
    2176:	84 9f       	mul	r24, r20
    2178:	60 0d       	add	r22, r0
    217a:	21 1d       	adc	r18, r1
    217c:	82 2f       	mov	r24, r18
    217e:	76 2f       	mov	r23, r22
    2180:	6a 2f       	mov	r22, r26
    2182:	11 24       	eor	r1, r1
    2184:	9f 57       	subi	r25, 0x7F	; 127
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	9a f0       	brmi	.+38     	; 0x21b0 <__mulsf3_pse+0x88>
    218a:	f1 f0       	breq	.+60     	; 0x21c8 <__mulsf3_pse+0xa0>
    218c:	88 23       	and	r24, r24
    218e:	4a f0       	brmi	.+18     	; 0x21a2 <__mulsf3_pse+0x7a>
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	bb 1f       	adc	r27, r27
    2196:	66 1f       	adc	r22, r22
    2198:	77 1f       	adc	r23, r23
    219a:	88 1f       	adc	r24, r24
    219c:	91 50       	subi	r25, 0x01	; 1
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	a9 f7       	brne	.-22     	; 0x218c <__mulsf3_pse+0x64>
    21a2:	9e 3f       	cpi	r25, 0xFE	; 254
    21a4:	51 05       	cpc	r21, r1
    21a6:	80 f0       	brcs	.+32     	; 0x21c8 <__mulsf3_pse+0xa0>
    21a8:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_inf>
    21ac:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_szero>
    21b0:	5f 3f       	cpi	r21, 0xFF	; 255
    21b2:	e4 f3       	brlt	.-8      	; 0x21ac <__mulsf3_pse+0x84>
    21b4:	98 3e       	cpi	r25, 0xE8	; 232
    21b6:	d4 f3       	brlt	.-12     	; 0x21ac <__mulsf3_pse+0x84>
    21b8:	86 95       	lsr	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b7 95       	ror	r27
    21c0:	f7 95       	ror	r31
    21c2:	e7 95       	ror	r30
    21c4:	9f 5f       	subi	r25, 0xFF	; 255
    21c6:	c1 f7       	brne	.-16     	; 0x21b8 <__mulsf3_pse+0x90>
    21c8:	fe 2b       	or	r31, r30
    21ca:	88 0f       	add	r24, r24
    21cc:	91 1d       	adc	r25, r1
    21ce:	96 95       	lsr	r25
    21d0:	87 95       	ror	r24
    21d2:	97 f9       	bld	r25, 7
    21d4:	08 95       	ret

000021d6 <__udivmodhi4>:
    21d6:	aa 1b       	sub	r26, r26
    21d8:	bb 1b       	sub	r27, r27
    21da:	51 e1       	ldi	r21, 0x11	; 17
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <__udivmodhi4_ep>

000021de <__udivmodhi4_loop>:
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	a6 17       	cp	r26, r22
    21e4:	b7 07       	cpc	r27, r23
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <__udivmodhi4_ep>
    21e8:	a6 1b       	sub	r26, r22
    21ea:	b7 0b       	sbc	r27, r23

000021ec <__udivmodhi4_ep>:
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	5a 95       	dec	r21
    21f2:	a9 f7       	brne	.-22     	; 0x21de <__udivmodhi4_loop>
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	08 95       	ret

000021fe <__divmodhi4>:
    21fe:	97 fb       	bst	r25, 7
    2200:	07 2e       	mov	r0, r23
    2202:	16 f4       	brtc	.+4      	; 0x2208 <__divmodhi4+0xa>
    2204:	00 94       	com	r0
    2206:	07 d0       	rcall	.+14     	; 0x2216 <__divmodhi4_neg1>
    2208:	77 fd       	sbrc	r23, 7
    220a:	09 d0       	rcall	.+18     	; 0x221e <__divmodhi4_neg2>
    220c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__udivmodhi4>
    2210:	07 fc       	sbrc	r0, 7
    2212:	05 d0       	rcall	.+10     	; 0x221e <__divmodhi4_neg2>
    2214:	3e f4       	brtc	.+14     	; 0x2224 <__divmodhi4_exit>

00002216 <__divmodhi4_neg1>:
    2216:	90 95       	com	r25
    2218:	81 95       	neg	r24
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	08 95       	ret

0000221e <__divmodhi4_neg2>:
    221e:	70 95       	com	r23
    2220:	61 95       	neg	r22
    2222:	7f 4f       	sbci	r23, 0xFF	; 255

00002224 <__divmodhi4_exit>:
    2224:	08 95       	ret

00002226 <_exit>:
    2226:	f8 94       	cli

00002228 <__stop_program>:
    2228:	ff cf       	rjmp	.-2      	; 0x2228 <__stop_program>
