
GruaMejor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  00001ec8  00001f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  008002ee  008002ee  0000214a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002636  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001284  00000000  00000000  00004b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b97  00000000  00000000  00005d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  00007928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c46  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a09  00000000  00000000  00008e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000a85f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_1>
       8:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_11>
      30:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_18>
      4c:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3e       	cpi	r26, 0xEE	; 238
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	ae ee       	ldi	r26, 0xEE	; 238
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 30       	cpi	r26, 0x03	; 3
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      9e:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:
uint8_t FLAG_button_A = 0;
uint8_t FLAG_button_B = 0;
uint8_t FLAG_button_A_change=0,FLAG_button_B_change=0;

void button_init(){
	DDRD &= ~(1<<PORTD7); //pongo D7 como entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); //pongo D7 como pull up
      ac:	8b b1       	in	r24, 0x0b	; 11
      ae:	80 68       	ori	r24, 0x80	; 128
      b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<PORTB0); //pongo B0 como entrada
      b2:	84 b1       	in	r24, 0x04	; 4
      b4:	8e 7f       	andi	r24, 0xFE	; 254
      b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //pongo B0 como pull up
      b8:	85 b1       	in	r24, 0x05	; 5
      ba:	81 60       	ori	r24, 0x01	; 1
      bc:	85 b9       	out	0x05, r24	; 5
      be:	08 95       	ret

000000c0 <button_Actulizar>:
}


void button_Actulizar(){
	if(PIND & (1<<PORTD7)){
      c0:	4f 9b       	sbis	0x09, 7	; 9
      c2:	10 c0       	rjmp	.+32     	; 0xe4 <button_Actulizar+0x24>
		//apretado
		contAOFF=0;
      c4:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <contAOFF>
		if(++contAON>15){
      c8:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <contAON>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <contAON>
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	e0 f0       	brcs	.+56     	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A=1;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <FLAG_button_A>
			contAON=100;
      dc:	84 e6       	ldi	r24, 0x64	; 100
      de:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <contAON>
      e2:	15 c0       	rjmp	.+42     	; 0x10e <button_Actulizar+0x4e>
		}
	}else{
		//lo solto
		contAON=0;
      e4:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <contAON>
		if(++contAOFF>15){
      e8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <contAOFF>
      ec:	8f 5f       	subi	r24, 0xFF	; 255
      ee:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <contAOFF>
      f2:	80 31       	cpi	r24, 0x10	; 16
      f4:	28 f0       	brcs	.+10     	; 0x100 <button_Actulizar+0x40>
			FLAG_button_A=0;
      f6:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <FLAG_button_A>
			contAOFF=100;
      fa:	84 e6       	ldi	r24, 0x64	; 100
      fc:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <contAOFF>
		}
		if(contAOFF==13){
     100:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <contAOFF>
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	19 f4       	brne	.+6      	; 0x10e <button_Actulizar+0x4e>
			FLAG_button_A_change=1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <FLAG_button_A_change>
		}
	}
	if(! (PINB & (1<<PORTB0))){
     10e:	18 99       	sbic	0x03, 0	; 3
     110:	0d c0       	rjmp	.+26     	; 0x12c <button_Actulizar+0x6c>
		//apretado
		contBOFF=0;
     112:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <contBOFF>
		if(++contB>15){
     116:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <contB>
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <contB>
     120:	80 31       	cpi	r24, 0x10	; 16
     122:	b8 f0       	brcs	.+46     	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B=1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <FLAG_button_B>
     12a:	08 95       	ret
			contBON=100;
		}
	}else{
		//lo solto
		contBON=0;
		if(++contBOFF>15){
     12c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <contBOFF>
     130:	8f 5f       	subi	r24, 0xFF	; 255
     132:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <contBOFF>
     136:	80 31       	cpi	r24, 0x10	; 16
     138:	28 f0       	brcs	.+10     	; 0x144 <button_Actulizar+0x84>
			FLAG_button_B=0;
     13a:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <FLAG_button_B>
			contBOFF=100;
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <contBOFF>
		}
		if(contBOFF==13){
     144:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <contBOFF>
     148:	8d 30       	cpi	r24, 0x0D	; 13
     14a:	19 f4       	brne	.+6      	; 0x152 <button_Actulizar+0x92>
			FLAG_button_B_change=1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <__data_end>
     152:	08 95       	ret

00000154 <Informar_MensajeInicial>:
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
}
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	8d eb       	ldi	r24, 0xBD	; 189
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
     15e:	08 95       	ret

00000160 <Descomponerint16aHex>:

void Descomponerint16aHex(int16_t numero, char *str)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	db 01       	movw	r26, r22
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     168:	90 e0       	ldi	r25, 0x00	; 0
    *(str) = '\0';
}

void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 ef       	ldi	r21, 0xF0	; 240
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     16e:	1b c0       	rjmp	.+54     	; 0x1a6 <Descomponerint16aHex+0x46>
	    axi = (numero & mascara);
     170:	fe 01       	movw	r30, r28
     172:	e4 23       	and	r30, r20
     174:	f5 23       	and	r31, r21
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	29 1b       	sub	r18, r25
     17c:	31 09       	sbc	r19, r1
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	02 c0       	rjmp	.+4      	; 0x18c <Descomponerint16aHex+0x2c>
     188:	f6 95       	lsr	r31
     18a:	e7 95       	ror	r30
     18c:	2a 95       	dec	r18
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Descomponerint16aHex+0x28>
	    *(str) = num_16[axi];
     190:	e0 50       	subi	r30, 0x00	; 0
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	8d 93       	st	X+, r24
	    mascara = mascara >> 4; // Cambiar la máscara
     198:	52 95       	swap	r21
     19a:	42 95       	swap	r20
     19c:	4f 70       	andi	r20, 0x0F	; 15
     19e:	45 27       	eor	r20, r21
     1a0:	5f 70       	andi	r21, 0x0F	; 15
     1a2:	45 27       	eor	r20, r21
void Descomponerint16aHex(int16_t numero, char *str)
{
    uint16_t mascara = 0xF000; // Máscara para el bit más significativo
    int16_t axi=0;
    uint8_t i;
    for(i = 0; i < 4; i++) {
     1a4:	9f 5f       	subi	r25, 0xFF	; 255
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	18 f3       	brcs	.-58     	; 0x170 <Descomponerint16aHex+0x10>
	    axi = (uint16_t)((uint16_t)axi >> (12 - i*4));; // Cambiar el desplazamiento
	    *(str) = num_16[axi];
	    mascara = mascara >> 4; // Cambiar la máscara
	    str++;
    }
    *(str) = '\0';
     1aa:	1c 92       	st	X, r1
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Descomponeruint32aHex>:

void Descomponeruint32aHex(uint32_t numero, char *str){
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
     1c0:	fa 01       	movw	r30, r20
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    *(str) = '\0';
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 ef       	ldi	r23, 0xF0	; 240
    uint8_t i;
    for (i = 0; i < 8; i++) {
     1cc:	24 c0       	rjmp	.+72     	; 0x216 <Descomponeruint32aHex+0x64>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     1ce:	db 01       	movw	r26, r22
     1d0:	ca 01       	movw	r24, r20
     1d2:	8c 21       	and	r24, r12
     1d4:	9d 21       	and	r25, r13
     1d6:	ae 21       	and	r26, r14
     1d8:	bf 21       	and	r27, r15
     1da:	27 e0       	ldi	r18, 0x07	; 7
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	2c 1b       	sub	r18, r28
     1e0:	31 09       	sbc	r19, r1
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <Descomponeruint32aHex+0x42>
     1ec:	b6 95       	lsr	r27
     1ee:	a7 95       	ror	r26
     1f0:	97 95       	ror	r25
     1f2:	87 95       	ror	r24
     1f4:	2a 95       	dec	r18
     1f6:	d2 f7       	brpl	.-12     	; 0x1ec <Descomponeruint32aHex+0x3a>
     1f8:	dc 01       	movw	r26, r24
     1fa:	a0 50       	subi	r26, 0x00	; 0
     1fc:	bf 4f       	sbci	r27, 0xFF	; 255
     1fe:	8c 91       	ld	r24, X
     200:	80 83       	st	Z, r24
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
     202:	68 94       	set
     204:	13 f8       	bld	r1, 3
     206:	76 95       	lsr	r23
     208:	67 95       	ror	r22
     20a:	57 95       	ror	r21
     20c:	47 95       	ror	r20
     20e:	16 94       	lsr	r1
     210:	d1 f7       	brne	.-12     	; 0x206 <Descomponeruint32aHex+0x54>
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     212:	cf 5f       	subi	r28, 0xFF	; 255
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
     214:	31 96       	adiw	r30, 0x01	; 1
}

void Descomponeruint32aHex(uint32_t numero, char *str){
    uint32_t mascara = 0xF0000000; // Máscara para el bit más alto
    uint8_t i;
    for (i = 0; i < 8; i++) {
     216:	c8 30       	cpi	r28, 0x08	; 8
     218:	d0 f2       	brcs	.-76     	; 0x1ce <Descomponeruint32aHex+0x1c>
	    *(str++) = num_16[(numero & mascara) >> (28 - i * 4)]; // Se ajusta la posición del bit
	    mascara >>= 4; // Se desplaza la máscara hacia la derecha
    }
    *str = '\0'; // Se agrega el terminador de cadena
     21a:	10 82       	st	Z, r1
}
     21c:	cf 91       	pop	r28
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	08 95       	ret

00000228 <Informar_Actulizar>:
	UART_TransmitString("tiempo;error;integral;derivada;setPoint\n",1);//tiempo;angulo;velocidad;derivada
}


//aca pongo los mensajes que quiero mandar
void Informar_Actulizar(){
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6f 97       	sbiw	r28, 0x1f	; 31
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	char tiempo[10],velocidad[7];
	char derivada[7],angulo[7];
	char integral[7];
	char error[7];
	int16_t valorAngulo;
	if(getEspacioDisponibleBuffer()>222){
     23c:	0e 94 19 0c 	call	0x1832	; 0x1832 <getEspacioDisponibleBuffer>
     240:	8f 3d       	cpi	r24, 0xDF	; 223
     242:	20 f0       	brcs	.+8      	; 0x24c <Informar_Actulizar+0x24>
		FLAGmandarDatos=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <FLAGmandarDatos>
     24a:	06 c0       	rjmp	.+12     	; 0x258 <Informar_Actulizar+0x30>
	}else{
		if(getEspacioDisponibleBuffer()<40){
     24c:	0e 94 19 0c 	call	0x1832	; 0x1832 <getEspacioDisponibleBuffer>
     250:	88 32       	cpi	r24, 0x28	; 40
     252:	10 f4       	brcc	.+4      	; 0x258 <Informar_Actulizar+0x30>
			FLAGmandarDatos=0;
     254:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <FLAGmandarDatos>
		}
	}
	if(FLAGmandarDatos){
     258:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <FLAGmandarDatos>
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <Informar_Actulizar+0x3a>
     260:	5a c0       	rjmp	.+180    	; 0x316 <Informar_Actulizar+0xee>
		Descomponeruint32aHex(getTiempoInforme(),tiempo);
     262:	0e 94 a4 0a 	call	0x1548	; 0x1548 <getTiempoInforme>
     266:	ae 01       	movw	r20, r28
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Descomponeruint32aHex>
		UART_TransmitString(tiempo,10);
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	ce 01       	movw	r24, r28
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
		UART_TransmitChar(';');
     27a:	8b e3       	ldi	r24, 0x3B	; 59
     27c:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
		Descomponerint16aHex(getValor(),error);
     280:	0e 94 f5 04 	call	0x9ea	; 0x9ea <getValor>
     284:	be 01       	movw	r22, r28
     286:	67 5e       	subi	r22, 0xE7	; 231
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	ce 01       	movw	r24, r28
     292:	49 96       	adiw	r24, 0x19	; 25
     294:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
// 		getAnguloEncoder(&valorAngulo,0);
// 		Descomponerint16(valorAngulo,angulo);
// 		UART_TransmitString(angulo,7);
		UART_TransmitChar(';');
     298:	8b e3       	ldi	r24, 0x3B	; 59
     29a:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
		Descomponerint16aHex(getIntegralPID(),integral); // Convierte a base decimal (10)
     29e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <getIntegralPID>
     2a2:	be 01       	movw	r22, r28
     2a4:	6e 5e       	subi	r22, 0xEE	; 238
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(integral,7);
     2ac:	67 e0       	ldi	r22, 0x07	; 7
     2ae:	ce 01       	movw	r24, r28
     2b0:	42 96       	adiw	r24, 0x12	; 18
     2b2:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
// 		Descomponerint16(getVelocidadPID(),velocidad); // Convierte a base decimal (10)
// 		UART_TransmitString(velocidad,7);
		UART_TransmitChar(';');
     2b6:	8b e3       	ldi	r24, 0x3B	; 59
     2b8:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
		Descomponerint16aHex((int16_t)getDerivadaPID(),derivada); // Convierte a base decimal (10)
     2bc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <getDerivadaPID>
     2c0:	be 01       	movw	r22, r28
     2c2:	65 5f       	subi	r22, 0xF5	; 245
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(derivada,7);
     2ca:	67 e0       	ldi	r22, 0x07	; 7
     2cc:	ce 01       	movw	r24, r28
     2ce:	0b 96       	adiw	r24, 0x0b	; 11
     2d0:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
		UART_TransmitChar(';');
     2d4:	8b e3       	ldi	r24, 0x3B	; 59
     2d6:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
		Descomponerint16aHex(getSlideResistor()*13.3,error);
     2da:	0e 94 88 0b 	call	0x1710	; 0x1710 <getSlideResistor>
     2de:	bc 01       	movw	r22, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	44 e5       	ldi	r20, 0x54	; 84
     2ee:	51 e4       	ldi	r21, 0x41	; 65
     2f0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     2f4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	be 01       	movw	r22, r28
     2fe:	67 5e       	subi	r22, 0xE7	; 231
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	0e 94 b0 00 	call	0x160	; 0x160 <Descomponerint16aHex>
		UART_TransmitString(error,7);
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	ce 01       	movw	r24, r28
     30a:	49 96       	adiw	r24, 0x19	; 25
     30c:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
		UART_TransmitChar('\n');
     310:	8a e0       	ldi	r24, 0x0A	; 10
     312:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
	}
}
     316:	6f 96       	adiw	r28, 0x1f	; 31
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <actulizar_leerDatos>:
#include "UART.h"
#include "avr/io.h"
#include "global.h"
#include "PID.h"

void actulizar_leerDatos(){
     328:	3f 92       	push	r3
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	c2 54       	subi	r28, 0x42	; 66
     350:	d1 09       	sbc	r29, r1
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SacarDatosBufferEnter>
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <actulizar_leerDatos+0x42>
     368:	1a c1       	rjmp	.+564    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
     36a:	fe 01       	movw	r30, r28
     36c:	f3 96       	adiw	r30, 0x33	; 51
     36e:	80 e1       	ldi	r24, 0x10	; 16
     370:	df 01       	movw	r26, r30
     372:	1d 92       	st	X+, r1
     374:	8a 95       	dec	r24
     376:	e9 f7       	brne	.-6      	; 0x372 <actulizar_leerDatos+0x4a>
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	86 ee       	ldi	r24, 0xE6	; 230
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
		UART_TransmitString(datosEntrada,10);
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 3e 0c 	call	0x187c	; 0x187c <UART_TransmitString>
#include "PID.h"

void actulizar_leerDatos(){
	char datosEntrada[50];
	if(SacarDatosBufferEnter(datosEntrada)){
		uint8_t i=0,k=0;
     38c:	e1 2c       	mov	r14, r1
     38e:	f1 2c       	mov	r15, r1
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     390:	c4 c0       	rjmp	.+392    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
					if(datosEntrada[i]=='-'){
     392:	bd e2       	ldi	r27, 0x2D	; 45
     394:	3b 12       	cpse	r3, r27
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <actulizar_leerDatos+0x7a>
						cantDigitos = cantDigitos*-1;
     398:	b7 fa       	bst	r11, 7
     39a:	b0 94       	com	r11
     39c:	b7 f8       	bld	r11, 7
     39e:	b0 94       	com	r11
     3a0:	2f c0       	rjmp	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
						}else{
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     3a2:	c3 2c       	mov	r12, r3
     3a4:	d1 2c       	mov	r13, r1
     3a6:	e0 e3       	ldi	r30, 0x30	; 48
     3a8:	ce 1a       	sub	r12, r30
     3aa:	d1 08       	sbc	r13, r1
     3ac:	0e 2d       	mov	r16, r14
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	00 0f       	add	r16, r16
     3b2:	11 1f       	adc	r17, r17
     3b4:	00 0f       	add	r16, r16
     3b6:	11 1f       	adc	r17, r17
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8c 0f       	add	r24, r28
     3be:	9d 1f       	adc	r25, r29
     3c0:	08 0f       	add	r16, r24
     3c2:	19 1f       	adc	r17, r25
     3c4:	d8 01       	movw	r26, r16
     3c6:	d2 96       	adiw	r26, 0x32	; 50
     3c8:	6d 91       	ld	r22, X+
     3ca:	7d 91       	ld	r23, X+
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	d5 97       	sbiw	r26, 0x35	; 53
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e2       	ldi	r20, 0x20	; 32
     3d8:	51 e4       	ldi	r21, 0x41	; 65
     3da:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     3de:	2b 01       	movw	r4, r22
     3e0:	3c 01       	movw	r6, r24
     3e2:	b6 01       	movw	r22, r12
     3e4:	dd 0c       	add	r13, r13
     3e6:	88 0b       	sbc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     3ee:	a3 01       	movw	r20, r6
     3f0:	92 01       	movw	r18, r4
     3f2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     3f6:	f8 01       	movw	r30, r16
     3f8:	62 ab       	std	Z+50, r22	; 0x32
     3fa:	73 ab       	std	Z+51, r23	; 0x33
     3fc:	84 ab       	std	Z+52, r24	; 0x34
     3fe:	95 ab       	std	Z+53, r25	; 0x35
					}
					UART_TransmitChar(datosEntrada[i]);
     400:	83 2d       	mov	r24, r3
     402:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
					i++;
     406:	f3 94       	inc	r15
     408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     40a:	0f 2e       	mov	r0, r31
     40c:	81 2c       	mov	r8, r1
     40e:	91 2c       	mov	r9, r1
     410:	f0 e8       	ldi	r31, 0x80	; 128
     412:	af 2e       	mov	r10, r31
     414:	ff e3       	ldi	r31, 0x3F	; 63
     416:	bf 2e       	mov	r11, r31
     418:	f0 2d       	mov	r31, r0
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
			cantDigitos=1;
			while(datosEntrada[i]!=',' && datosEntrada[i]!='.' && datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	ef 0d       	add	r30, r15
     424:	f1 1d       	adc	r31, r1
     426:	30 80       	ld	r3, Z
     428:	fc e2       	ldi	r31, 0x2C	; 44
     42a:	3f 16       	cp	r3, r31
     42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42e:	47 c0       	rjmp	.+142    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	38 16       	cp	r3, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	43 c0       	rjmp	.+134    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	39 16       	cp	r3, r25
     43c:	09 f4       	brne	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	3f c0       	rjmp	.+126    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     440:	31 10       	cpse	r3, r1
     442:	a7 cf       	rjmp	.-178    	; 0x392 <actulizar_leerDatos+0x6a>
     444:	3c c0       	rjmp	.+120    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
				if(datosEntrada[i]!='.' && datosEntrada[i]!=','){
     446:	0e 32       	cpi	r16, 0x2E	; 46
     448:	c9 f1       	breq	.+114    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     44a:	0c 32       	cpi	r16, 0x2C	; 44
     44c:	b9 f1       	breq	.+110    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					valores[k] = (datosEntrada[i]-48)+valores[k]*10;
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	00 53       	subi	r16, 0x30	; 48
     452:	11 09       	sbc	r17, r1
     454:	ce 2c       	mov	r12, r14
     456:	d1 2c       	mov	r13, r1
     458:	cc 0c       	add	r12, r12
     45a:	dd 1c       	adc	r13, r13
     45c:	cc 0c       	add	r12, r12
     45e:	dd 1c       	adc	r13, r13
     460:	a1 e0       	ldi	r26, 0x01	; 1
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	ac 0f       	add	r26, r28
     466:	bd 1f       	adc	r27, r29
     468:	ca 0e       	add	r12, r26
     46a:	db 1e       	adc	r13, r27
     46c:	f6 01       	movw	r30, r12
     46e:	62 a9       	ldd	r22, Z+50	; 0x32
     470:	73 a9       	ldd	r23, Z+51	; 0x33
     472:	84 a9       	ldd	r24, Z+52	; 0x34
     474:	95 a9       	ldd	r25, Z+53	; 0x35
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e2       	ldi	r20, 0x20	; 32
     47c:	51 e4       	ldi	r21, 0x41	; 65
     47e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     482:	2b 01       	movw	r4, r22
     484:	3c 01       	movw	r6, r24
     486:	b8 01       	movw	r22, r16
     488:	11 0f       	add	r17, r17
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     492:	a3 01       	movw	r20, r6
     494:	92 01       	movw	r18, r4
     496:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     49a:	d6 01       	movw	r26, r12
     49c:	d2 96       	adiw	r26, 0x32	; 50
     49e:	6d 93       	st	X+, r22
     4a0:	7d 93       	st	X+, r23
     4a2:	8d 93       	st	X+, r24
     4a4:	9c 93       	st	X, r25
     4a6:	d5 97       	sbiw	r26, 0x35	; 53
					cantDigitos=cantDigitos*10;
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e2       	ldi	r20, 0x20	; 32
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	c5 01       	movw	r24, r10
     4b2:	b4 01       	movw	r22, r8
     4b4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
					
				}
				i++;
     4bc:	f3 94       	inc	r15
						valores[k] = (datosEntrada[i]-48)+valores[k]*10;
					}
					UART_TransmitChar(datosEntrada[i]);
					i++;
			}
			while(datosEntrada[i]!=' ' && datosEntrada[i]!='\0'){
     4be:	e1 e0       	ldi	r30, 0x01	; 1
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	ef 0d       	add	r30, r15
     4c8:	f1 1d       	adc	r31, r1
     4ca:	00 81       	ld	r16, Z
     4cc:	00 32       	cpi	r16, 0x20	; 32
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d0:	01 11       	cpse	r16, r1
     4d2:	b9 cf       	rjmp	.-142    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					cantDigitos=cantDigitos*10;
					
				}
				i++;
			}
			valores[k]=(valores[k]/cantDigitos);
     4d4:	ce 2c       	mov	r12, r14
     4d6:	d1 2c       	mov	r13, r1
     4d8:	cc 0c       	add	r12, r12
     4da:	dd 1c       	adc	r13, r13
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	e1 e0       	ldi	r30, 0x01	; 1
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	ce 0e       	add	r12, r30
     4ea:	df 1e       	adc	r13, r31
     4ec:	d6 01       	movw	r26, r12
     4ee:	d2 96       	adiw	r26, 0x32	; 50
     4f0:	6d 91       	ld	r22, X+
     4f2:	7d 91       	ld	r23, X+
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	d5 97       	sbiw	r26, 0x35	; 53
     4fa:	a5 01       	movw	r20, r10
     4fc:	94 01       	movw	r18, r8
     4fe:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divsf3>
     502:	f6 01       	movw	r30, r12
     504:	62 ab       	std	Z+50, r22	; 0x32
     506:	73 ab       	std	Z+51, r23	; 0x33
     508:	84 ab       	std	Z+52, r24	; 0x34
     50a:	95 ab       	std	Z+53, r25	; 0x35
			k++;
     50c:	e3 94       	inc	r14
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
     50e:	00 32       	cpi	r16, 0x20	; 32
     510:	21 f4       	brne	.+8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     512:	80 2f       	mov	r24, r16
     514:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
     518:	f3 94       	inc	r15
		uint8_t i=0,k=0;
		float valores[]={0,0,0,0};
		float cantDigitos=1;
		UART_TransmitString("datos: ",10);
		UART_TransmitString(datosEntrada,10);
		while(datosEntrada[i]!='\0'){
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	ef 0d       	add	r30, r15
     524:	f1 1d       	adc	r31, r1
     526:	80 81       	ld	r24, Z
     528:	81 11       	cpse	r24, r1
     52a:	6f cf       	rjmp	.-290    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			valores[k]=(valores[k]/cantDigitos);
			k++;
			if(datosEntrada[i]==' '){UART_TransmitChar(datosEntrada[i]); i++;}
		}
		if(valores[0]==-12.2){
     52c:	6b a9       	ldd	r22, Y+51	; 0x33
     52e:	7c a9       	ldd	r23, Y+52	; 0x34
     530:	8d a9       	ldd	r24, Y+53	; 0x35
     532:	9e a9       	ldd	r25, Y+54	; 0x36
     534:	23 e3       	ldi	r18, 0x33	; 51
     536:	33 e3       	ldi	r19, 0x33	; 51
     538:	43 e4       	ldi	r20, 0x43	; 67
     53a:	51 ec       	ldi	r21, 0xC1	; 193
     53c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__cmpsf2>
     540:	81 11       	cpse	r24, r1
     542:	04 c0       	rjmp	.+8      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
			ONLEDBLUE;
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8b b9       	out	0x0b, r24	; 11
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		}else{
			OFFLEDBLUE;
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 7b       	andi	r24, 0xBF	; 191
     550:	8b b9       	out	0x0b, r24	; 11
		}
		if(k==4){
     552:	f4 e0       	ldi	r31, 0x04	; 4
     554:	ef 12       	cpse	r14, r31
     556:	23 c0       	rjmp	.+70     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			setKp(valores[0]);
     558:	6b a9       	ldd	r22, Y+51	; 0x33
     55a:	7c a9       	ldd	r23, Y+52	; 0x34
     55c:	8d a9       	ldd	r24, Y+53	; 0x35
     55e:	9e a9       	ldd	r25, Y+54	; 0x36
     560:	0e 94 2f 06 	call	0xc5e	; 0xc5e <setKp>
			setKi(valores[1]);
     564:	6f a9       	ldd	r22, Y+55	; 0x37
     566:	78 ad       	ldd	r23, Y+56	; 0x38
     568:	89 ad       	ldd	r24, Y+57	; 0x39
     56a:	9a ad       	ldd	r25, Y+58	; 0x3a
     56c:	0e 94 03 06 	call	0xc06	; 0xc06 <setKi>
			setKd(valores[2]);
     570:	6b ad       	ldd	r22, Y+59	; 0x3b
     572:	7c ad       	ldd	r23, Y+60	; 0x3c
     574:	8d ad       	ldd	r24, Y+61	; 0x3d
     576:	9e ad       	ldd	r25, Y+62	; 0x3e
     578:	0e 94 26 06 	call	0xc4c	; 0xc4c <setKd>
			setIndice_ec_error((uint8_t)valores[3]);
     57c:	23 96       	adiw	r28, 0x03	; 3
     57e:	6c ad       	ldd	r22, Y+60	; 0x3c
     580:	7d ad       	ldd	r23, Y+61	; 0x3d
     582:	8e ad       	ldd	r24, Y+62	; 0x3e
     584:	9f ad       	ldd	r25, Y+63	; 0x3f
     586:	23 97       	sbiw	r28, 0x03	; 3
     588:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fixunssfsi>
     58c:	16 2f       	mov	r17, r22
     58e:	86 2f       	mov	r24, r22
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 38 06 	call	0xc70	; 0xc70 <setIndice_ec_error>
			UART_TransmitChar((uint8_t)valores[3]+48);
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	81 0f       	add	r24, r17
     59a:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
		}
	}
     59e:	ce 5b       	subi	r28, 0xBE	; 190
     5a0:	df 4f       	sbci	r29, 0xFF	; 255
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	08 95       	ret

000005d0 <main>:

int16_t angulo,anguloAnt,pos;
int main(void)
{	
	uint8_t i=0;
	UART_Init();
     5d0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <UART_Init>
	Inicializacion_Motor();
     5d4:	0e 94 97 03 	call	0x72e	; 0x72e <Inicializacion_Motor>
	SensorEncoder_init();
     5d8:	0e 94 c5 09 	call	0x138a	; 0x138a <SensorEncoder_init>
	Inicializacion_slideResistor();
     5dc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <Inicializacion_slideResistor>
	button_init();
     5e0:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
	
	DDRD |= (1 << PORTD5);  // Configura el pin D7 como salida para el led
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	8a b9       	out	0x0a, r24	; 10
	
	sei(); //habilito las interrupciones
     5ea:	78 94       	sei
	
	//_delay_ms(50);
	Informar_MensajeInicial();
     5ec:	0e 94 aa 00 	call	0x154	; 0x154 <Informar_MensajeInicial>
	
	setVelocidad(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 01 03 	call	0x602	; 0x602 <setVelocidad>
	OFFLEDGREEN;
	
	//se mueve hacia un lado para inciar la oscilacion
	irPos(7000+16*5);
	*/
	SEOS_Init();
     5f8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <SEOS_Init>
	while (1) 
    {
		//llama a la maquina de estados para inciar el control
		SEOS_Dispatch_Tasks();
     5fc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <SEOS_Dispatch_Tasks>
     600:	fd cf       	rjmp	.-6      	; 0x5fc <main+0x2c>

00000602 <setVelocidad>:
	}
	
	PASOS16;salto=16;
	//apago el led
	OFFLEDBLUE;
	pos = 0;
     602:	bc 01       	movw	r22, r24
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	61 f4       	brne	.+24     	; 0x620 <setVelocidad+0x1e>
     608:	85 b1       	in	r24, 0x05	; 5
     60a:	87 70       	andi	r24, 0x07	; 7
     60c:	88 63       	ori	r24, 0x38	; 56
     60e:	85 b9       	out	0x05, r24	; 5
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     616:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	7a ef       	ldi	r23, 0xFA	; 250
     61e:	66 c0       	rjmp	.+204    	; 0x6ec <setVelocidad+0xea>
     620:	99 23       	and	r25, r25
     622:	84 f4       	brge	.+32     	; 0x644 <setVelocidad+0x42>
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <lado>
     62a:	71 95       	neg	r23
     62c:	61 95       	neg	r22
     62e:	71 09       	sbc	r23, r1
     630:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <ladoAnt>
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	11 f4       	brne	.+4      	; 0x63c <setVelocidad+0x3a>
     638:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ladoAnt>
     642:	0d c0       	rjmp	.+26     	; 0x65e <setVelocidad+0x5c>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <lado>
     64a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <ladoAnt>
     64e:	8f 3f       	cpi	r24, 0xFF	; 255
     650:	19 f4       	brne	.+6      	; 0x658 <setVelocidad+0x56>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fueCero>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ladoAnt>
     65e:	65 3f       	cpi	r22, 0xF5	; 245
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	78 07       	cpc	r23, r24
     664:	5c f0       	brlt	.+22     	; 0x67c <setVelocidad+0x7a>
     666:	88 e1       	ldi	r24, 0x18	; 24
     668:	99 e7       	ldi	r25, 0x79	; 121
     66a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     66e:	80 e1       	ldi	r24, 0x10	; 16
     670:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     674:	85 b1       	in	r24, 0x05	; 5
     676:	87 70       	andi	r24, 0x07	; 7
     678:	85 b9       	out	0x05, r24	; 5
     67a:	38 c0       	rjmp	.+112    	; 0x6ec <setVelocidad+0xea>
     67c:	6b 3f       	cpi	r22, 0xFB	; 251
     67e:	71 05       	cpc	r23, r1
     680:	64 f0       	brlt	.+24     	; 0x69a <setVelocidad+0x98>
     682:	88 e9       	ldi	r24, 0x98	; 152
     684:	9a e3       	ldi	r25, 0x3A	; 58
     686:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     68a:	88 e0       	ldi	r24, 0x08	; 8
     68c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     690:	85 b1       	in	r24, 0x05	; 5
     692:	87 70       	andi	r24, 0x07	; 7
     694:	80 62       	ori	r24, 0x20	; 32
     696:	85 b9       	out	0x05, r24	; 5
     698:	29 c0       	rjmp	.+82     	; 0x6ec <setVelocidad+0xea>
     69a:	6e 37       	cpi	r22, 0x7E	; 126
     69c:	71 05       	cpc	r23, r1
     69e:	64 f0       	brlt	.+24     	; 0x6b8 <setVelocidad+0xb6>
     6a0:	8c e4       	ldi	r24, 0x4C	; 76
     6a2:	9d e1       	ldi	r25, 0x1D	; 29
     6a4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6ae:	85 b1       	in	r24, 0x05	; 5
     6b0:	87 70       	andi	r24, 0x07	; 7
     6b2:	80 61       	ori	r24, 0x10	; 16
     6b4:	85 b9       	out	0x05, r24	; 5
     6b6:	1a c0       	rjmp	.+52     	; 0x6ec <setVelocidad+0xea>
     6b8:	60 34       	cpi	r22, 0x40	; 64
     6ba:	71 05       	cpc	r23, r1
     6bc:	64 f0       	brlt	.+24     	; 0x6d6 <setVelocidad+0xd4>
     6be:	86 ea       	ldi	r24, 0xA6	; 166
     6c0:	9e e0       	ldi	r25, 0x0E	; 14
     6c2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6cc:	85 b1       	in	r24, 0x05	; 5
     6ce:	87 70       	andi	r24, 0x07	; 7
     6d0:	80 63       	ori	r24, 0x30	; 48
     6d2:	85 b9       	out	0x05, r24	; 5
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <setVelocidad+0xea>
     6d6:	83 e5       	ldi	r24, 0x53	; 83
     6d8:	97 e0       	ldi	r25, 0x07	; 7
     6da:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <salto>
     6e4:	85 b1       	in	r24, 0x05	; 5
     6e6:	87 70       	andi	r24, 0x07	; 7
     6e8:	88 63       	ori	r24, 0x38	; 56
     6ea:	85 b9       	out	0x05, r24	; 5
     6ec:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fueCero>
     6f0:	88 23       	and	r24, r24
     6f2:	21 f0       	breq	.+8      	; 0x6fc <setVelocidad+0xfa>
     6f4:	64 5c       	subi	r22, 0xC4	; 196
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fueCero>
     6fc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     700:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     704:	cb 01       	movw	r24, r22
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	82 17       	cp	r24, r18
     70a:	93 07       	cpc	r25, r19
     70c:	58 f4       	brcc	.+22     	; 0x724 <setVelocidad+0x122>
     70e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     712:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     716:	62 50       	subi	r22, 0x02	; 2
     718:	71 09       	sbc	r23, r1
     71a:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     71e:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     722:	08 95       	ret
     724:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     728:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     72c:	08 95       	ret

0000072e <Inicializacion_Motor>:
     72e:	84 b1       	in	r24, 0x04	; 4
     730:	8e 63       	ori	r24, 0x3E	; 62
     732:	84 b9       	out	0x04, r24	; 4
     734:	8a b1       	in	r24, 0x0a	; 10
     736:	80 68       	ori	r24, 0x80	; 128
     738:	8a b9       	out	0x0a, r24	; 10
     73a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     73e:	8d e0       	ldi	r24, 0x0D	; 13
     740:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	86 bb       	out	0x16, r24	; 22
     748:	20 e1       	ldi	r18, 0x10	; 16
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     750:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     754:	20 e7       	ldi	r18, 0x70	; 112
     756:	37 e1       	ldi	r19, 0x17	; 23
     758:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     75c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     760:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     764:	08 95       	ret

00000766 <getPos>:
     766:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pos>
     76a:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pos+0x1>
     76e:	08 95       	ret

00000770 <__vector_11>:
}


ISR(TIMER1_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
	if ( (pos+lado*salto)<FIN && (pos+lado*salto)>0)
     782:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <lado>
     786:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     78a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pos>
     78e:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pos+0x1>
     792:	32 02       	muls	r19, r18
     794:	80 0d       	add	r24, r0
     796:	91 1d       	adc	r25, r1
     798:	11 24       	eor	r1, r1
     79a:	80 33       	cpi	r24, 0x30	; 48
     79c:	95 43       	sbci	r25, 0x35	; 53
     79e:	08 f5       	brcc	.+66     	; 0x7e2 <__vector_11+0x72>
     7a0:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <lado>
     7a4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     7a8:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pos>
     7ac:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pos+0x1>
     7b0:	32 02       	muls	r19, r18
     7b2:	80 0d       	add	r24, r0
     7b4:	91 1d       	adc	r25, r1
     7b6:	11 24       	eor	r1, r1
     7b8:	89 2b       	or	r24, r25
     7ba:	99 f0       	breq	.+38     	; 0x7e2 <__vector_11+0x72>
	{
		PORTB |=  (1<<PORTB2); //pongo en 1 el esclon de step
     7bc:	85 b1       	in	r24, 0x05	; 5
     7be:	84 60       	ori	r24, 0x04	; 4
     7c0:	85 b9       	out	0x05, r24	; 5
		pos += lado*salto;
     7c2:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <lado>
     7c6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <salto>
     7ca:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pos>
     7ce:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pos+0x1>
     7d2:	32 02       	muls	r19, r18
     7d4:	80 0d       	add	r24, r0
     7d6:	91 1d       	adc	r25, r1
     7d8:	11 24       	eor	r1, r1
     7da:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <pos+0x1>
     7de:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <pos>
	}		
}
     7e2:	9f 91       	pop	r25
     7e4:	8f 91       	pop	r24
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <__vector_12>:

ISR(TIMER1_COMPB_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	8f 93       	push	r24
	//si se cambia la direccin cerca de cuando se produce un paso el coso puede perder pasos
	//si hay un cambio de sentido o en los MS lo correcto es esperar 200ms pero bueno no se puede hacer todo
	PORTB &=  ~(1<<PORTB2); //pongo en 0 el escalon de step
     800:	85 b1       	in	r24, 0x05	; 5
     802:	8b 7f       	andi	r24, 0xFB	; 251
     804:	85 b9       	out	0x05, r24	; 5
	if(lado==1){
     806:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <lado>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	19 f4       	brne	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		IRDER;
     80e:	85 b1       	in	r24, 0x05	; 5
     810:	8d 7f       	andi	r24, 0xFD	; 253
     812:	85 b9       	out	0x05, r24	; 5
	}
	if(lado==-1){
     814:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <lado>
     818:	8f 3f       	cpi	r24, 0xFF	; 255
     81a:	19 f4       	brne	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		IRIZQ;
     81c:	85 b1       	in	r24, 0x05	; 5
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	85 b9       	out	0x05, r24	; 5
// 		break;
// 		default:
// 		// Manejar el caso por defecto, si es necesario
// 		break;
// 	}
}
     822:	8f 91       	pop	r24
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <Actulizar_PID>:
	return s;
}

int16_t getError(){
	return e;
}
     82e:	8f 92       	push	r8
     830:	9f 92       	push	r9
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	6c ef       	ldi	r22, 0xFC	; 252
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 09 09 	call	0x1212	; 0x1212 <getAnguloEncoder>
     84a:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <indice_ec_error>
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	ee 5e       	subi	r30, 0xEE	; 238
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	01 90       	ld	r0, Z+
     85a:	f0 81       	ld	r31, Z
     85c:	e0 2d       	mov	r30, r0
     85e:	09 95       	icall
     860:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <vel>
     864:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <vel+0x1>
     868:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <vel+0x2>
     86c:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <vel+0x3>
     870:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <FLAG_button_A_change>
     874:	88 23       	and	r24, r24
     876:	61 f0       	breq	.+24     	; 0x890 <Actulizar_PID+0x62>
     878:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <FLAG_habilitar_PID>
     87c:	88 23       	and	r24, r24
     87e:	19 f0       	breq	.+6      	; 0x886 <Actulizar_PID+0x58>
     880:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <FLAG_habilitar_PID>
     884:	03 c0       	rjmp	.+6      	; 0x88c <Actulizar_PID+0x5e>
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <FLAG_habilitar_PID>
     88c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <FLAG_button_A_change>
     890:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__data_end>
     894:	88 23       	and	r24, r24
     896:	61 f0       	breq	.+24     	; 0x8b0 <Actulizar_PID+0x82>
     898:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <FLAG_habilitar_manual>
     89c:	88 23       	and	r24, r24
     89e:	19 f0       	breq	.+6      	; 0x8a6 <Actulizar_PID+0x78>
     8a0:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <FLAG_habilitar_manual>
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <Actulizar_PID+0x7e>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <FLAG_habilitar_manual>
     8ac:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <__data_end>
     8b0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <FLAG_habilitar_PID>
     8b4:	88 23       	and	r24, r24
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <Actulizar_PID+0x92>
     8b8:	8b b1       	in	r24, 0x0b	; 11
     8ba:	80 62       	ori	r24, 0x20	; 32
     8bc:	8b b9       	out	0x0b, r24	; 11
     8be:	0b c0       	rjmp	.+22     	; 0x8d6 <Actulizar_PID+0xa8>
     8c0:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <vel>
     8c4:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <vel+0x1>
     8c8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <vel+0x2>
     8cc:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <vel+0x3>
     8d0:	8b b1       	in	r24, 0x0b	; 11
     8d2:	8f 7d       	andi	r24, 0xDF	; 223
     8d4:	8b b9       	out	0x0b, r24	; 11
     8d6:	80 90 1a 03 	lds	r8, 0x031A	; 0x80031a <vel>
     8da:	90 90 1b 03 	lds	r9, 0x031B	; 0x80031b <vel+0x1>
     8de:	a0 90 1c 03 	lds	r10, 0x031C	; 0x80031c <vel+0x2>
     8e2:	b0 90 1d 03 	lds	r11, 0x031D	; 0x80031d <vel+0x3>
     8e6:	2a e9       	ldi	r18, 0x9A	; 154
     8e8:	39 e9       	ldi	r19, 0x99	; 153
     8ea:	49 e9       	ldi	r20, 0x99	; 153
     8ec:	5e e3       	ldi	r21, 0x3E	; 62
     8ee:	c5 01       	movw	r24, r10
     8f0:	b4 01       	movw	r22, r8
     8f2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e8       	ldi	r19, 0x80	; 128
     8fe:	44 ed       	ldi	r20, 0xD4	; 212
     900:	54 e4       	ldi	r21, 0x44	; 68
     902:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__gesf2>
     906:	18 16       	cp	r1, r24
     908:	4c f4       	brge	.+18     	; 0x91c <__stack+0x1d>
     90a:	0f 2e       	mov	r0, r31
     90c:	c1 2c       	mov	r12, r1
     90e:	f0 e8       	ldi	r31, 0x80	; 128
     910:	df 2e       	mov	r13, r31
     912:	f4 ed       	ldi	r31, 0xD4	; 212
     914:	ef 2e       	mov	r14, r31
     916:	f4 e4       	ldi	r31, 0x44	; 68
     918:	ff 2e       	mov	r15, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e8       	ldi	r19, 0x80	; 128
     920:	44 ed       	ldi	r20, 0xD4	; 212
     922:	54 ec       	ldi	r21, 0xC4	; 196
     924:	c7 01       	movw	r24, r14
     926:	b6 01       	movw	r22, r12
     928:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	4c f4       	brge	.+18     	; 0x942 <__stack+0x43>
     930:	0f 2e       	mov	r0, r31
     932:	c1 2c       	mov	r12, r1
     934:	f0 e8       	ldi	r31, 0x80	; 128
     936:	df 2e       	mov	r13, r31
     938:	f4 ed       	ldi	r31, 0xD4	; 212
     93a:	ef 2e       	mov	r14, r31
     93c:	f4 ec       	ldi	r31, 0xC4	; 196
     93e:	ff 2e       	mov	r15, r31
     940:	f0 2d       	mov	r31, r0
     942:	a5 01       	movw	r20, r10
     944:	94 01       	movw	r18, r8
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__cmpsf2>
     94e:	88 23       	and	r24, r24
     950:	44 f4       	brge	.+16     	; 0x962 <__stack+0x63>
     952:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <vel>
     956:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <vel+0x1>
     95a:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <vel+0x2>
     95e:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <vel+0x3>
     962:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <vel>
     966:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <vel+0x1>
     96a:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <vel+0x2>
     96e:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <vel+0x3>
     972:	c7 01       	movw	r24, r14
     974:	b6 01       	movw	r22, r12
     976:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__gesf2>
     97a:	18 16       	cp	r1, r24
     97c:	44 f4       	brge	.+16     	; 0x98e <__stack+0x8f>
     97e:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <vel>
     982:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <vel+0x1>
     986:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <vel+0x2>
     98a:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <vel+0x3>
     98e:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <vel>
     992:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <vel+0x1>
     996:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <vel+0x2>
     99a:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <vel+0x3>
     99e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     9a2:	cb 01       	movw	r24, r22
     9a4:	0e 94 01 03 	call	0x602	; 0x602 <setVelocidad>
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	08 95       	ret

000009ba <getDerivadaPID>:
     9ba:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <derivada>
     9be:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <derivada+0x1>
     9c2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <derivada+0x2>
     9c6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <derivada+0x3>
     9ca:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     9ce:	cb 01       	movw	r24, r22
     9d0:	08 95       	ret

000009d2 <getIntegralPID>:
     9d2:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <s>
     9d6:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <s+0x1>
     9da:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <s+0x2>
     9de:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <s+0x3>
     9e2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     9e6:	cb 01       	movw	r24, r22
     9e8:	08 95       	ret

000009ea <getValor>:

int16_t getValor(){
	return valor;
}
     9ea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <valor>
     9ee:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <valor+0x1>
     9f2:	08 95       	ret

000009f4 <calcularIntegral>:

void calcularIntegral(int16_t e){
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
	s += Ki*e;
     9fc:	bc 01       	movw	r22, r24
     9fe:	99 0f       	add	r25, r25
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     a08:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <Ki>
     a0c:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <Ki+0x1>
     a10:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <Ki+0x2>
     a14:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <Ki+0x3>
     a18:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     a1c:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <s>
     a20:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <s+0x1>
     a24:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <s+0x2>
     a28:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <s+0x3>
     a2c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     a30:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <s>
     a34:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <s+0x1>
     a38:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <s+0x2>
     a3c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <s+0x3>
	if(s > LIMITESUPI) s = LIMITESUPI;
     a40:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <LIMITESUPI>
     a44:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <LIMITESUPI+0x1>
     a48:	e0 90 04 03 	lds	r14, 0x0304	; 0x800304 <LIMITESUPI+0x2>
     a4c:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <LIMITESUPI+0x3>
     a50:	a7 01       	movw	r20, r14
     a52:	96 01       	movw	r18, r12
     a54:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	44 f4       	brge	.+16     	; 0xa6c <calcularIntegral+0x78>
     a5c:	c0 92 16 03 	sts	0x0316, r12	; 0x800316 <s>
     a60:	d0 92 17 03 	sts	0x0317, r13	; 0x800317 <s+0x1>
     a64:	e0 92 18 03 	sts	0x0318, r14	; 0x800318 <s+0x2>
     a68:	f0 92 19 03 	sts	0x0319, r15	; 0x800319 <s+0x3>
	if(s < -LIMITESUPI) s = -LIMITESUPI;
     a6c:	f7 fa       	bst	r15, 7
     a6e:	f0 94       	com	r15
     a70:	f7 f8       	bld	r15, 7
     a72:	f0 94       	com	r15
     a74:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <s>
     a78:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <s+0x1>
     a7c:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <s+0x2>
     a80:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <s+0x3>
     a84:	c7 01       	movw	r24, r14
     a86:	b6 01       	movw	r22, r12
     a88:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	44 f4       	brge	.+16     	; 0xaa0 <calcularIntegral+0xac>
     a90:	c0 92 16 03 	sts	0x0316, r12	; 0x800316 <s>
     a94:	d0 92 17 03 	sts	0x0317, r13	; 0x800317 <s+0x1>
     a98:	e0 92 18 03 	sts	0x0318, r14	; 0x800318 <s+0x2>
     a9c:	f0 92 19 03 	sts	0x0319, r15	; 0x800319 <s+0x3>
}
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	08 95       	ret

00000aaa <calcularDerivada_encoder>:


void calcularDerivada_encoder(){
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
	posAnt[0]=e;*/
	
	//tiempoMuestraSoft = (float)(0.02)*tiempoMuestra+(float)(0.98)*tiempoMuestraSoft;
	
	//axiAngulo = e-calcularSen(puntosAngulo+direccion)*100;
	derivada_encoder = (20000/tiempoMuestra)*0.02+derivada_encoder*0.98;
     ab2:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <tiempoMuestra>
     ab6:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <tiempoMuestra+0x1>
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	9e e4       	ldi	r25, 0x4E	; 78
     abe:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	37 ed       	ldi	r19, 0xD7	; 215
     ad2:	43 ea       	ldi	r20, 0xA3	; 163
     ad4:	5c e3       	ldi	r21, 0x3C	; 60
     ad6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     ada:	6b 01       	movw	r12, r22
     adc:	7c 01       	movw	r14, r24
     ade:	28 e4       	ldi	r18, 0x48	; 72
     ae0:	31 ee       	ldi	r19, 0xE1	; 225
     ae2:	4a e7       	ldi	r20, 0x7A	; 122
     ae4:	5f e3       	ldi	r21, 0x3F	; 63
     ae6:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <derivada_encoder>
     aea:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <derivada_encoder+0x1>
     aee:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <derivada_encoder+0x2>
     af2:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <derivada_encoder+0x3>
     af6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     b06:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <derivada_encoder>
     b0a:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <derivada_encoder+0x1>
     b0e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <derivada_encoder+0x2>
     b12:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <derivada_encoder+0x3>
// 		posAnt[1]=posAnt[0];
// 		derivada=(e-posAnt[0])/(tiempo-tiempoAnt[0]);
// 		posAnt[0]=e;
// 		tiempoAnt[0]=tiempo;
// 	}
}
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	08 95       	ret

00000b20 <ec_sin_sen>:
	derivada = derivada_angulo;
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
}

float ec_sin_sen(){	
     b20:	8f 92       	push	r8
     b22:	9f 92       	push	r9
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
	
	//hago que vuelva
	e= e;//%800;
     b30:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <e>
     b34:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <e+0x1>
	valor = e;
     b38:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <valor+0x1>
     b3c:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <valor>
	
	calcularDerivada_encoder(e);
     b40:	0e 94 55 05 	call	0xaaa	; 0xaaa <calcularDerivada_encoder>
	calcularIntegral(e);
     b44:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <e>
     b48:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <e+0x1>
     b4c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <calcularIntegral>
	derivada = derivada_encoder;
     b50:	c0 90 0a 03 	lds	r12, 0x030A	; 0x80030a <derivada_encoder>
     b54:	d0 90 0b 03 	lds	r13, 0x030B	; 0x80030b <derivada_encoder+0x1>
     b58:	e0 90 0c 03 	lds	r14, 0x030C	; 0x80030c <derivada_encoder+0x2>
     b5c:	f0 90 0d 03 	lds	r15, 0x030D	; 0x80030d <derivada_encoder+0x3>
     b60:	c0 92 0e 03 	sts	0x030E, r12	; 0x80030e <derivada>
     b64:	d0 92 0f 03 	sts	0x030F, r13	; 0x80030f <derivada+0x1>
     b68:	e0 92 10 03 	sts	0x0310, r14	; 0x800310 <derivada+0x2>
     b6c:	f0 92 11 03 	sts	0x0311, r15	; 0x800311 <derivada+0x3>
	
	return( Kp*e + Kd*derivada + Ki*s);
     b70:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <e>
     b74:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <e+0x1>
     b78:	07 2e       	mov	r0, r23
     b7a:	00 0c       	add	r0, r0
     b7c:	88 0b       	sbc	r24, r24
     b7e:	99 0b       	sbc	r25, r25
     b80:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     b84:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Kp>
     b88:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <Kp+0x1>
     b8c:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <Kp+0x2>
     b90:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <Kp+0x3>
     b94:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     b98:	4b 01       	movw	r8, r22
     b9a:	5c 01       	movw	r10, r24
     b9c:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <Kd>
     ba0:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <Kd+0x1>
     ba4:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <Kd+0x2>
     ba8:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <Kd+0x3>
     bac:	c7 01       	movw	r24, r14
     bae:	b6 01       	movw	r22, r12
     bb0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     bb4:	9b 01       	movw	r18, r22
     bb6:	ac 01       	movw	r20, r24
     bb8:	c5 01       	movw	r24, r10
     bba:	b4 01       	movw	r22, r8
     bbc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
     bc4:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <s>
     bc8:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <s+0x1>
     bcc:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <s+0x2>
     bd0:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <s+0x3>
     bd4:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <Ki>
     bd8:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <Ki+0x1>
     bdc:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Ki+0x2>
     be0:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <Ki+0x3>
     be4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	c7 01       	movw	r24, r14
     bee:	b6 01       	movw	r22, r12
     bf0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
}
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	08 95       	ret

00000c06 <setKi>:
// 		posAnt[0]=e;
// 		tiempoAnt[0]=tiempo;
// 	}
}

void setKi(float val){
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
	LIMITESUPI = 1700/val;
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e8       	ldi	r23, 0x80	; 128
     c1a:	84 ed       	ldi	r24, 0xD4	; 212
     c1c:	94 e4       	ldi	r25, 0x44	; 68
     c1e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divsf3>
     c22:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <LIMITESUPI>
     c26:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <LIMITESUPI+0x1>
     c2a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <LIMITESUPI+0x2>
     c2e:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <LIMITESUPI+0x3>
	Ki=val;
     c32:	c0 92 1e 03 	sts	0x031E, r12	; 0x80031e <Ki>
     c36:	d0 92 1f 03 	sts	0x031F, r13	; 0x80031f <Ki+0x1>
     c3a:	e0 92 20 03 	sts	0x0320, r14	; 0x800320 <Ki+0x2>
     c3e:	f0 92 21 03 	sts	0x0321, r15	; 0x800321 <Ki+0x3>
}
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <setKd>:
void setKd(float val){
	Kd=val;
     c4c:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <Kd>
     c50:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <Kd+0x1>
     c54:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <Kd+0x2>
     c58:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <Kd+0x3>
     c5c:	08 95       	ret

00000c5e <setKp>:
}
void setKp(float val){
	Kp=val;
     c5e:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <Kp>
     c62:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <Kp+0x1>
     c66:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <Kp+0x2>
     c6a:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <Kp+0x3>
     c6e:	08 95       	ret

00000c70 <setIndice_ec_error>:
}

void setIndice_ec_error(uint8_t indice){
	if (indice != indice_ec_error)
     c70:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <indice_ec_error>
     c74:	98 17       	cp	r25, r24
     c76:	51 f0       	breq	.+20     	; 0xc8c <setIndice_ec_error+0x1c>
	{
		indice_ec_error = indice;
     c78:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <indice_ec_error>
		s = 0; //reseteo el valor de la suma de la integral se resetea
     c7c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <s>
     c80:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <s+0x1>
     c84:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <s+0x2>
     c88:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <s+0x3>
     c8c:	08 95       	ret

00000c8e <calcularSen>:
	}
}

int16_t calcularSen(int16_t sen){
	sen= sen%800;
     c8e:	60 e2       	ldi	r22, 0x20	; 32
     c90:	73 e0       	ldi	r23, 0x03	; 3
     c92:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
	if(sen<0){
     c96:	99 23       	and	r25, r25
     c98:	14 f4       	brge	.+4      	; 0xc9e <calcularSen+0x10>
		sen = 800+sen;
     c9a:	80 5e       	subi	r24, 0xE0	; 224
     c9c:	9c 4f       	sbci	r25, 0xFC	; 252
	}
	if(sen>399){
     c9e:	80 39       	cpi	r24, 0x90	; 144
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	92 07       	cpc	r25, r18
     ca4:	dc f0       	brlt	.+54     	; 0xcdc <calcularSen+0x4e>
		sen = sen%400;
     ca6:	60 e9       	ldi	r22, 0x90	; 144
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     cae:	89 3c       	cpi	r24, 0xC9	; 201
     cb0:	91 05       	cpc	r25, r1
     cb2:	4c f0       	brlt	.+18     	; 0xcc6 <calcularSen+0x38>
     cb4:	28 ec       	ldi	r18, 0xC8	; 200
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	b9 01       	movw	r22, r18
     cba:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     cbe:	a9 01       	movw	r20, r18
     cc0:	48 1b       	sub	r20, r24
     cc2:	59 0b       	sbc	r21, r25
     cc4:	ca 01       	movw	r24, r20
		sen = - sen2[sen];
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	fc 01       	movw	r30, r24
     ccc:	e8 5e       	subi	r30, 0xE8	; 232
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	91 95       	neg	r25
     cd6:	81 95       	neg	r24
     cd8:	91 09       	sbc	r25, r1
     cda:	08 95       	ret
	}else{
		sen = sen%400;
     cdc:	60 e9       	ldi	r22, 0x90	; 144
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
		if(sen>200) sen = 200-(sen%200);
     ce4:	89 3c       	cpi	r24, 0xC9	; 201
     ce6:	91 05       	cpc	r25, r1
     ce8:	4c f0       	brlt	.+18     	; 0xcfc <calcularSen+0x6e>
     cea:	28 ec       	ldi	r18, 0xC8	; 200
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	b9 01       	movw	r22, r18
     cf0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     cf4:	a9 01       	movw	r20, r18
     cf6:	48 1b       	sub	r20, r24
     cf8:	59 0b       	sbc	r21, r25
     cfa:	ca 01       	movw	r24, r20
		sen = sen2[sen];
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	fc 01       	movw	r30, r24
     d02:	e8 5e       	subi	r30, 0xE8	; 232
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
	}
	return sen;
}
     d0a:	08 95       	ret

00000d0c <calcularDerivada_angulo>:

void calcularDerivada_angulo(int16_t e){
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
	calcularDerivada_encoder();
     d1a:	0e 94 55 05 	call	0xaaa	; 0xaaa <calcularDerivada_encoder>
	derivada_angulo = calcularSen(e+200)*(derivada_encoder/1000);
     d1e:	ce 01       	movw	r24, r28
     d20:	88 53       	subi	r24, 0x38	; 56
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	0e 94 47 06 	call	0xc8e	; 0xc8e <calcularSen>
     d28:	ec 01       	movw	r28, r24
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a e7       	ldi	r20, 0x7A	; 122
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <derivada_encoder>
     d36:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <derivada_encoder+0x1>
     d3a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <derivada_encoder+0x2>
     d3e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <derivada_encoder+0x3>
     d42:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divsf3>
     d46:	6b 01       	movw	r12, r22
     d48:	7c 01       	movw	r14, r24
     d4a:	be 01       	movw	r22, r28
     d4c:	dd 0f       	add	r29, r29
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     d56:	a7 01       	movw	r20, r14
     d58:	96 01       	movw	r18, r12
     d5a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     d5e:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <derivada_angulo>
     d62:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <derivada_angulo+0x1>
     d66:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <derivada_angulo+0x2>
     d6a:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <derivada_angulo+0x3>
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <ec_basico>:

float ec_basico(){
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	cf 93       	push	r28
	int8_t multi=1;
	puntosAngulo = e;
     d8e:	e0 90 00 03 	lds	r14, 0x0300	; 0x800300 <e>
     d92:	f0 90 01 03 	lds	r15, 0x0301	; 0x800301 <e+0x1>
     d96:	f0 92 02 05 	sts	0x0502, r15	; 0x800502 <puntosAngulo+0x1>
     d9a:	e0 92 01 05 	sts	0x0501, r14	; 0x800501 <puntosAngulo>
	e = e % 800;
     d9e:	c7 01       	movw	r24, r14
     da0:	60 e2       	ldi	r22, 0x20	; 32
     da2:	73 e0       	ldi	r23, 0x03	; 3
     da4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     da8:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <e+0x1>
     dac:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <e>
	if(e<0){
     db0:	99 23       	and	r25, r25
     db2:	34 f4       	brge	.+12     	; 0xdc0 <ec_basico+0x44>
		e = 800+e;
     db4:	80 5e       	subi	r24, 0xE0	; 224
     db6:	9c 4f       	sbci	r25, 0xFC	; 252
     db8:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <e+0x1>
     dbc:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <e>
	}
	if(e > 350 && e < 450){
     dc0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <e>
     dc4:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <e+0x1>
     dc8:	9c 01       	movw	r18, r24
     dca:	2f 55       	subi	r18, 0x5F	; 95
     dcc:	31 40       	sbci	r19, 0x01	; 1
     dce:	23 36       	cpi	r18, 0x63	; 99
     dd0:	31 05       	cpc	r19, r1
     dd2:	10 f0       	brcs	.+4      	; 0xdd8 <ec_basico+0x5c>
	calcularDerivada_encoder();
	derivada_angulo = calcularSen(e+200)*(derivada_encoder/1000);
}

float ec_basico(){
	int8_t multi=1;
     dd4:	c1 e0       	ldi	r28, 0x01	; 1
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <ec_basico+0x5e>
	e = e % 800;
	if(e<0){
		e = 800+e;
	}
	if(e > 350 && e < 450){
		multi = -1;
     dd8:	cf ef       	ldi	r28, 0xFF	; 255
	}
	e=calcularSen(e);
     dda:	0e 94 47 06 	call	0xc8e	; 0xc8e <calcularSen>
     dde:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <e+0x1>
     de2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <e>
	valor = e;
     de6:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <valor+0x1>
     dea:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <valor>
	calcularDerivada_angulo(puntosAngulo);
     dee:	c7 01       	movw	r24, r14
     df0:	0e 94 86 06 	call	0xd0c	; 0xd0c <calcularDerivada_angulo>
	calcularIntegral(e);
     df4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <e>
     df8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <e+0x1>
     dfc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <calcularIntegral>
	derivada = derivada_angulo;
     e00:	80 90 06 03 	lds	r8, 0x0306	; 0x800306 <derivada_angulo>
     e04:	90 90 07 03 	lds	r9, 0x0307	; 0x800307 <derivada_angulo+0x1>
     e08:	a0 90 08 03 	lds	r10, 0x0308	; 0x800308 <derivada_angulo+0x2>
     e0c:	b0 90 09 03 	lds	r11, 0x0309	; 0x800309 <derivada_angulo+0x3>
     e10:	80 92 0e 03 	sts	0x030E, r8	; 0x80030e <derivada>
     e14:	90 92 0f 03 	sts	0x030F, r9	; 0x80030f <derivada+0x1>
     e18:	a0 92 10 03 	sts	0x0310, r10	; 0x800310 <derivada+0x2>
     e1c:	b0 92 11 03 	sts	0x0311, r11	; 0x800311 <derivada+0x3>
	
	return( (multi*Kp)*e + Kd*derivada + Ki*s);
     e20:	6c 2f       	mov	r22, r28
     e22:	cc 0f       	add	r28, r28
     e24:	77 0b       	sbc	r23, r23
     e26:	88 0b       	sbc	r24, r24
     e28:	99 0b       	sbc	r25, r25
     e2a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     e2e:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Kp>
     e32:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <Kp+0x1>
     e36:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <Kp+0x2>
     e3a:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <Kp+0x3>
     e3e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     e42:	6b 01       	movw	r12, r22
     e44:	7c 01       	movw	r14, r24
     e46:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <e>
     e4a:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <e+0x1>
     e4e:	07 2e       	mov	r0, r23
     e50:	00 0c       	add	r0, r0
     e52:	88 0b       	sbc	r24, r24
     e54:	99 0b       	sbc	r25, r25
     e56:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     e5a:	a7 01       	movw	r20, r14
     e5c:	96 01       	movw	r18, r12
     e5e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     e62:	6b 01       	movw	r12, r22
     e64:	7c 01       	movw	r14, r24
     e66:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <Kd>
     e6a:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <Kd+0x1>
     e6e:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <Kd+0x2>
     e72:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <Kd+0x3>
     e76:	c5 01       	movw	r24, r10
     e78:	b4 01       	movw	r22, r8
     e7a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     e8a:	6b 01       	movw	r12, r22
     e8c:	7c 01       	movw	r14, r24
     e8e:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <s>
     e92:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <s+0x1>
     e96:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <s+0x2>
     e9a:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <s+0x3>
     e9e:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <Ki>
     ea2:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <Ki+0x1>
     ea6:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Ki+0x2>
     eaa:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <Ki+0x3>
     eae:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c7 01       	movw	r24, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
}
     ebe:	cf 91       	pop	r28
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	af 90       	pop	r10
     ecc:	9f 90       	pop	r9
     ece:	8f 90       	pop	r8
     ed0:	08 95       	ret

00000ed2 <calcularDerivada_pos>:

void calcularDerivada_pos(int16_t e){
	//antes de esto hacer lo de mandar mensajes
	//falta poner que cos(a)*derivada del angulo - vel
	//con eso tendria que andar 10 puntos
	calcularDerivada_angulo(e);
     ed2:	0e 94 86 06 	call	0xd0c	; 0xd0c <calcularDerivada_angulo>
	derivada = vel+derivada_angulo;
     ed6:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <derivada_angulo>
     eda:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <derivada_angulo+0x1>
     ede:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <derivada_angulo+0x2>
     ee2:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <derivada_angulo+0x3>
     ee6:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <vel>
     eea:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <vel+0x1>
     eee:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <vel+0x2>
     ef2:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <vel+0x3>
     ef6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     efa:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <derivada>
     efe:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <derivada+0x1>
     f02:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <derivada+0x2>
     f06:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <derivada+0x3>
     f0a:	08 95       	ret

00000f0c <ec_pos>:
	//eant = e;
	//derivada = (float)(0.02)*(float)calculoAxi+(float)(0.98)*derivada;
}


float ec_pos(){
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
	puntosAngulo = e;
     f14:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <e>
     f18:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <e+0x1>
     f1c:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <puntosAngulo+0x1>
     f20:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <puntosAngulo>
	e=calcularSen(e);
     f24:	0e 94 47 06 	call	0xc8e	; 0xc8e <calcularSen>
     f28:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <e+0x1>
     f2c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <e>
	//					x  ---->x*6500/1000= x*6.5
	//e = 7000-getPos()-e*6.5;//+
	
	//cambiar este fragmento por
	// 1024 ----> 13616   x----> x*13616/1024 = x*13.3
	posRef = getSlideResistor()*13.3;
     f30:	0e 94 88 0b 	call	0x1710	; 0x1710 <getSlideResistor>
     f34:	bc 01       	movw	r22, r24
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__floatunsisf>
     f3e:	2d ec       	ldi	r18, 0xCD	; 205
     f40:	3c ec       	ldi	r19, 0xCC	; 204
     f42:	44 e5       	ldi	r20, 0x54	; 84
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     f4a:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <posRef>
     f4e:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <posRef+0x1>
     f52:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <posRef+0x2>
     f56:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <posRef+0x3>
	
	//Para derivada y posRef
	e = e*6.5;	//el lagro es: 20
     f5a:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <e>
     f5e:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <e+0x1>
     f62:	07 2e       	mov	r0, r23
     f64:	00 0c       	add	r0, r0
     f66:	88 0b       	sbc	r24, r24
     f68:	99 0b       	sbc	r25, r25
     f6a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 ed       	ldi	r20, 0xD0	; 208
     f74:	50 e4       	ldi	r21, 0x40	; 64
     f76:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
     f7a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     f7e:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <e+0x1>
     f82:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <e>
	valor = getPos()+e;
     f86:	0e 94 b3 03 	call	0x766	; 0x766 <getPos>
     f8a:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <e>
     f8e:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <e+0x1>
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <valor+0x1>
     f9a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <valor>
	// y el error para la derivada es sin el posRef y capaz un cambio de signo
	
	
	calcularDerivada_pos(puntosAngulo);		//por ahora dejo fuera la pos
     f9e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <puntosAngulo>
     fa2:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <puntosAngulo+0x1>
     fa6:	0e 94 69 07 	call	0xed2	; 0xed2 <calcularDerivada_pos>
	
	//Para derivada y posRef
	e = posRef-getPos()+e;		//e = posRef-getPos()+e*6.5; lo hago por partes
     faa:	c0 90 12 03 	lds	r12, 0x0312	; 0x800312 <posRef>
     fae:	d0 90 13 03 	lds	r13, 0x0313	; 0x800313 <posRef+0x1>
     fb2:	e0 90 14 03 	lds	r14, 0x0314	; 0x800314 <posRef+0x2>
     fb6:	f0 90 15 03 	lds	r15, 0x0315	; 0x800315 <posRef+0x3>
     fba:	0e 94 b3 03 	call	0x766	; 0x766 <getPos>
     fbe:	bc 01       	movw	r22, r24
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__floatunsisf>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c7 01       	movw	r24, r14
     fce:	b6 01       	movw	r22, r12
     fd0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__subsf3>
     fd4:	6b 01       	movw	r12, r22
     fd6:	7c 01       	movw	r14, r24
     fd8:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <e>
     fdc:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <e+0x1>
     fe0:	07 2e       	mov	r0, r23
     fe2:	00 0c       	add	r0, r0
     fe4:	88 0b       	sbc	r24, r24
     fe6:	99 0b       	sbc	r25, r25
     fe8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
     fec:	a7 01       	movw	r20, r14
     fee:	96 01       	movw	r18, r12
     ff0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
     ff4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__fixsfsi>
     ff8:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <e+0x1>
     ffc:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <e>
	
	//quieto en un punto y para que suba
	//posRef = 7000;
	//e = posRef-getPos()-e;
	
	derivada = derivada_pos;
    1000:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <derivada>
    1004:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <derivada+0x1>
    1008:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <derivada+0x2>
    100c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <derivada+0x3>
	
	calcularIntegral(e);
    1010:	cb 01       	movw	r24, r22
    1012:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <calcularIntegral>
	return( Kp*e + Kd*derivada + Ki*s );
    1016:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <e>
    101a:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <e+0x1>
    101e:	07 2e       	mov	r0, r23
    1020:	00 0c       	add	r0, r0
    1022:	88 0b       	sbc	r24, r24
    1024:	99 0b       	sbc	r25, r25
    1026:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
    102a:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Kp>
    102e:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <Kp+0x1>
    1032:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <Kp+0x2>
    1036:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <Kp+0x3>
    103a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
    103e:	6b 01       	movw	r12, r22
    1040:	7c 01       	movw	r14, r24
    1042:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <derivada>
    1046:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <derivada+0x1>
    104a:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <derivada+0x2>
    104e:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <derivada+0x3>
    1052:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <Kd>
    1056:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <Kd+0x1>
    105a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <Kd+0x2>
    105e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <Kd+0x3>
    1062:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	c7 01       	movw	r24, r14
    106c:	b6 01       	movw	r22, r12
    106e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
    1072:	6b 01       	movw	r12, r22
    1074:	7c 01       	movw	r14, r24
    1076:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <s>
    107a:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <s+0x1>
    107e:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <s+0x2>
    1082:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <s+0x3>
    1086:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <Ki>
    108a:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <Ki+0x1>
    108e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Ki+0x2>
    1092:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <Ki+0x3>
    1096:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__mulsf3>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	08 95       	ret

000010b0 <f00>:
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
}

void f00(void){
	if(DER){
    10b0:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <DER>
    10b4:	88 23       	and	r24, r24
    10b6:	91 f0       	breq	.+36     	; 0x10dc <f00+0x2c>
		angulo--;
    10b8:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    10bc:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    10c6:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=-1;
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	9f ef       	ldi	r25, 0xFF	; 255
    10ce:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    10d2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = CeroUno;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	}
	if (IZQ){
    10dc:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <IZQ>
    10e0:	88 23       	and	r24, r24
    10e2:	89 f0       	breq	.+34     	; 0x1106 <f00+0x56>
		angulo++;
    10e4:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    10e8:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    10f2:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    10fe:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = UnoCero;
    1102:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
    1106:	08 95       	ret

00001108 <f10>:
	}
}
void f10(void){
	if(DER){
    1108:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <DER>
    110c:	88 23       	and	r24, r24
    110e:	91 f0       	breq	.+36     	; 0x1134 <f10+0x2c>
		angulo++;
    1110:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    1114:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    111e:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    112a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = UnoUno;
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	}
	if(!IZQ){
    1134:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <IZQ>
    1138:	81 11       	cpse	r24, r1
    113a:	11 c0       	rjmp	.+34     	; 0x115e <f10+0x56>
		angulo--;
    113c:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    1140:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    114a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=-1;
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    1156:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = CeroCero;
    115a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <estado>
    115e:	08 95       	ret

00001160 <f01>:
	}
}
void f01(void){
	if(!DER){
    1160:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <DER>
    1164:	81 11       	cpse	r24, r1
    1166:	11 c0       	rjmp	.+34     	; 0x118a <f01+0x2a>
		angulo++;
    1168:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    116c:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    1176:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    1182:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = CeroCero;
    1186:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <estado>
	}
	if(IZQ){
    118a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <IZQ>
    118e:	88 23       	and	r24, r24
    1190:	91 f0       	breq	.+36     	; 0x11b6 <f01+0x56>
		angulo--;
    1192:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    1196:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    11a0:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=-1;
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    11ac:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = UnoUno;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
    11b6:	08 95       	ret

000011b8 <f11>:
	}
}
void f11(void){
	if(!DER){
    11b8:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <DER>
    11bc:	81 11       	cpse	r24, r1
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <f11+0x2c>
		angulo--;
    11c0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    11c4:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    11ce:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=-1;
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    11da:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = UnoCero;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	}
	if(!IZQ){
    11e4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <IZQ>
    11e8:	81 11       	cpse	r24, r1
    11ea:	12 c0       	rjmp	.+36     	; 0x1210 <f11+0x58>
		angulo++;
    11ec:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <angulo>
    11f0:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <angulo+0x1>
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <angulo+0x1>
    11fa:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <angulo>
		anguloANt=1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <anguloANt+0x1>
    1206:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <anguloANt>
		estado = CeroUno;
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
    1210:	08 95       	ret

00001212 <getAnguloEncoder>:

//puede ser que tenga que agragar aca a un vector circular
//y pasar el vector circular y filtrarlo en el PID
//puede que le lleve much procesamiento y se haga muy lento porque lo tengoque hacer en la maquina de estado

void getAnguloEncoder(int16_t *anguloOUT, int16_t *tiempoMuestraOUT){
    1212:	fb 01       	movw	r30, r22
	*anguloOUT = angulo;
    1214:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <angulo>
    1218:	30 91 34 03 	lds	r19, 0x0334	; 0x800334 <angulo+0x1>
    121c:	dc 01       	movw	r26, r24
    121e:	2d 93       	st	X+, r18
    1220:	3c 93       	st	X, r19
	if(tiempoMuestraOUT!=0){
    1222:	30 97       	sbiw	r30, 0x00	; 0
    1224:	09 f4       	brne	.+2      	; 0x1228 <getAnguloEncoder+0x16>
    1226:	54 c0       	rjmp	.+168    	; 0x12d0 <getAnguloEncoder+0xbe>
		*tiempoMuestraOUT =anguloANt*(derivate_D + derivate_I)/2;
    1228:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <derivate_D>
    122c:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <derivate_D+0x1>
    1230:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <derivate_I>
    1234:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <derivate_I+0x1>
    1238:	28 0f       	add	r18, r24
    123a:	39 1f       	adc	r19, r25
    123c:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <anguloANt>
    1240:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <anguloANt+0x1>
    1244:	24 9f       	mul	r18, r20
    1246:	c0 01       	movw	r24, r0
    1248:	25 9f       	mul	r18, r21
    124a:	90 0d       	add	r25, r0
    124c:	34 9f       	mul	r19, r20
    124e:	90 0d       	add	r25, r0
    1250:	11 24       	eor	r1, r1
    1252:	99 23       	and	r25, r25
    1254:	0c f4       	brge	.+2      	; 0x1258 <getAnguloEncoder+0x46>
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	95 95       	asr	r25
    125a:	87 95       	ror	r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
		
		if(*tiempoMuestraOUT == axiAnt){
    1260:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <axiAnt>
    1264:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <axiAnt+0x1>
    1268:	82 17       	cp	r24, r18
    126a:	93 07       	cpc	r25, r19
    126c:	59 f5       	brne	.+86     	; 0x12c4 <getAnguloEncoder+0xb2>
			*tiempoMuestraOUT = anguloANt*(derivate_D + derivate_I)/2+ anguloANt*derivate_counter_D/2;
    126e:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <derivate_D>
    1272:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <derivate_D+0x1>
    1276:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <derivate_I>
    127a:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <derivate_I+0x1>
    127e:	28 0f       	add	r18, r24
    1280:	39 1f       	adc	r19, r25
    1282:	42 9f       	mul	r20, r18
    1284:	c0 01       	movw	r24, r0
    1286:	43 9f       	mul	r20, r19
    1288:	90 0d       	add	r25, r0
    128a:	52 9f       	mul	r21, r18
    128c:	90 0d       	add	r25, r0
    128e:	11 24       	eor	r1, r1
    1290:	99 23       	and	r25, r25
    1292:	0c f4       	brge	.+2      	; 0x1296 <getAnguloEncoder+0x84>
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	9c 01       	movw	r18, r24
    1298:	35 95       	asr	r19
    129a:	27 95       	ror	r18
    129c:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <derivate_counter_D>
    12a0:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <derivate_counter_D+0x1>
    12a4:	46 9f       	mul	r20, r22
    12a6:	c0 01       	movw	r24, r0
    12a8:	47 9f       	mul	r20, r23
    12aa:	90 0d       	add	r25, r0
    12ac:	56 9f       	mul	r21, r22
    12ae:	90 0d       	add	r25, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	99 23       	and	r25, r25
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <getAnguloEncoder+0xa6>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	95 95       	asr	r25
    12ba:	87 95       	ror	r24
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
		}
		signoAnt= anguloANt;
		axiAnt= *tiempoMuestraOUT;
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <axiAnt+0x1>
    12cc:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <axiAnt>
    12d0:	08 95       	ret

000012d2 <set_origen>:
	}
}

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
    12d2:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <DER>
    12d6:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <IZQ>
    12da:	89 23       	and	r24, r25
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <set_origen+0x12>
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	if ((!DER) & IZQ) estado = CeroUno;
    12e4:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <DER>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	22 23       	and	r18, r18
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <set_origen+0x22>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <IZQ>
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	82 23       	and	r24, r18
    12fc:	93 23       	and	r25, r19
    12fe:	89 2b       	or	r24, r25
    1300:	19 f0       	breq	.+6      	; 0x1308 <set_origen+0x36>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	if (DER & (!IZQ)) estado = UnoCero;
    1308:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <DER>
    130c:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <IZQ>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	33 23       	and	r19, r19
    1316:	11 f0       	breq	.+4      	; 0x131c <set_origen+0x4a>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	82 23       	and	r24, r18
    1320:	93 23       	and	r25, r19
    1322:	89 2b       	or	r24, r25
    1324:	19 f0       	breq	.+6      	; 0x132c <set_origen+0x5a>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <estado>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
    132c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <DER>
    1330:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <IZQ>
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	81 11       	cpse	r24, r1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	21 11       	cpse	r18, r1
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	89 23       	and	r24, r25
    1342:	11 f0       	breq	.+4      	; 0x1348 <set_origen+0x76>
    1344:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <estado>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	80 e7       	ldi	r24, 0x70	; 112
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	21 50       	subi	r18, 0x01	; 1
    1350:	80 40       	sbci	r24, 0x00	; 0
    1352:	90 40       	sbci	r25, 0x00	; 0
    1354:	e1 f7       	brne	.-8      	; 0x134e <set_origen+0x7c>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <set_origen+0x86>
    1358:	00 00       	nop
	
	_delay_ms(50);
	IZQ = LEERIZQ;
    135a:	89 b1       	in	r24, 0x09	; 9
    135c:	88 70       	andi	r24, 0x08	; 8
    135e:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <IZQ>
	DER = LEERDER;
    1362:	89 b1       	in	r24, 0x09	; 9
    1364:	84 70       	andi	r24, 0x04	; 4
    1366:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <DER>
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    136a:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <estado>
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	e0 55       	subi	r30, 0x50	; 80
    1376:	fd 4f       	sbci	r31, 0xFD	; 253
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	09 95       	icall
	
	angulo = 0;	
    1380:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <angulo+0x1>
    1384:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <angulo>
    1388:	08 95       	ret

0000138a <SensorEncoder_init>:
calcular con un clock mucho mas mejor
*/

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
    138a:	8a b1       	in	r24, 0x0a	; 10
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
    1390:	8b b1       	in	r24, 0x0b	; 11
    1392:	84 60       	ori	r24, 0x04	; 4
    1394:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
    1396:	8a b1       	in	r24, 0x0a	; 10
    1398:	87 7f       	andi	r24, 0xF7	; 247
    139a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
    139c:	8b b1       	in	r24, 0x0b	; 11
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK |= (1<<INT0); //habilito INT0
    13a2:	8d b3       	in	r24, 0x1d	; 29
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
    13a8:	e9 e6       	ldi	r30, 0x69	; 105
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
    13b2:	80 81       	ld	r24, Z
    13b4:	8d 7f       	andi	r24, 0xFD	; 253
    13b6:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
    13b8:	8d b3       	in	r24, 0x1d	; 29
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
    13be:	80 81       	ld	r24, Z
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
    13c4:	80 81       	ld	r24, Z
    13c6:	87 7f       	andi	r24, 0xF7	; 247
    13c8:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	// Configuración del Timer 2 en modo CTC (Clear Timer on Compare Match)
	TCCR2A = (1 << WGM21);  // Configuración del Timer 2 en modo CTC
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);   // Prescaler de 256
    13d0:	94 e0       	ldi	r25, 0x04	; 4
    13d2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 4;             // Valor de comparación para contar hasta 4
    13d6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar la interrupción de comparación A
    13da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	set_origen();
    13de:	0e 94 69 09 	call	0x12d2	; 0x12d2 <set_origen>
    13e2:	08 95       	ret

000013e4 <__vector_2>:
	
	angulo = 0;	
}

//se toma el tiempo para saber cuando ocurrio la toma del dato
ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	2f 93       	push	r18
    13f0:	3f 93       	push	r19
    13f2:	4f 93       	push	r20
    13f4:	5f 93       	push	r21
    13f6:	6f 93       	push	r22
    13f8:	7f 93       	push	r23
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	af 93       	push	r26
    1400:	bf 93       	push	r27
    1402:	ef 93       	push	r30
    1404:	ff 93       	push	r31
	//	leer entradas
	derivate_I = derivate_counter_I;
    1406:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <derivate_counter_I>
    140a:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <derivate_counter_I+0x1>
    140e:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <derivate_I+0x1>
    1412:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <derivate_I>
	derivate_counter_I = 0;
    1416:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <derivate_counter_I+0x1>
    141a:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <derivate_counter_I>
	IZQ = LEERIZQ;
    141e:	89 b1       	in	r24, 0x09	; 9
    1420:	88 70       	andi	r24, 0x08	; 8
    1422:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <IZQ>
	DER = LEERDER;
    1426:	89 b1       	in	r24, 0x09	; 9
    1428:	84 70       	andi	r24, 0x04	; 4
    142a:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    142e:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <estado>
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e0 55       	subi	r30, 0x50	; 80
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	01 90       	ld	r0, Z+
    143e:	f0 81       	ld	r31, Z
    1440:	e0 2d       	mov	r30, r0
    1442:	09 95       	icall
}
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <__vector_1>:

//sensor derecho
ISR(INT0_vect){
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
	//leer entradas
	derivate_D = derivate_counter_D;
    1488:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <derivate_counter_D>
    148c:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <derivate_counter_D+0x1>
    1490:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <derivate_D+0x1>
    1494:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <derivate_D>
	derivate_counter_D = 0;
    1498:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <derivate_counter_D+0x1>
    149c:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <derivate_counter_D>
	IZQ = LEERIZQ;
    14a0:	89 b1       	in	r24, 0x09	; 9
    14a2:	88 70       	andi	r24, 0x08	; 8
    14a4:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <IZQ>
	DER = LEERDER;
    14a8:	89 b1       	in	r24, 0x09	; 9
    14aa:	84 70       	andi	r24, 0x04	; 4
    14ac:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <DER>
	//tiempoMuestra = tiempoSEOS;
	(*MEF[estado])(); //ejecuta la funcion correspondiente
    14b0:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <estado>
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	e0 55       	subi	r30, 0x50	; 80
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	01 90       	ld	r0, Z+
    14c0:	f0 81       	ld	r31, Z
    14c2:	e0 2d       	mov	r30, r0
    14c4:	09 95       	icall
}
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_7>:
		anguloANt=1;
		estado = CeroUno;
	}
}

ISR(TIMER2_COMPA_vect) {
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
// 	derivate_counter_D=derivate_counter_D+derivate_counter_D==32000;
// 	derivate_counter_I=derivate_counter_I+derivate_counter_I==32000;
	if(derivate_counter_D!=32000)derivate_counter_D++;
    14f8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <derivate_counter_D>
    14fc:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <derivate_counter_D+0x1>
    1500:	81 15       	cp	r24, r1
    1502:	9d 47       	sbci	r25, 0x7D	; 125
    1504:	49 f0       	breq	.+18     	; 0x1518 <__vector_7+0x30>
    1506:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <derivate_counter_D>
    150a:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <derivate_counter_D+0x1>
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <derivate_counter_D+0x1>
    1514:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <derivate_counter_D>
	if(derivate_counter_I!=32000)derivate_counter_I++;
    1518:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <derivate_counter_I>
    151c:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <derivate_counter_I+0x1>
    1520:	81 15       	cp	r24, r1
    1522:	9d 47       	sbci	r25, 0x7D	; 125
    1524:	49 f0       	breq	.+18     	; 0x1538 <__vector_7+0x50>
    1526:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <derivate_counter_I>
    152a:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <derivate_counter_I+0x1>
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <derivate_counter_I+0x1>
    1534:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <derivate_counter_I>
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <getTiempoInforme>:
	return tiempoInforme;
}

uint32_t getTiempoSEOS(){
	return tiempoSEOS;
}
    1548:	60 91 35 03 	lds	r22, 0x0335	; 0x800335 <tiempoInforme>
    154c:	70 91 36 03 	lds	r23, 0x0336	; 0x800336 <tiempoInforme+0x1>
    1550:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <tiempoInforme+0x2>
    1554:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <tiempoInforme+0x3>
    1558:	08 95       	ret

0000155a <SEOS_SCH_Tasks>:
void SEOS_SCH_Tasks (void)
{
	/*
	  llamo a las tareas que tengo que hacer
	*/
	if (++contPID==2) {
    155a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <contPID>
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <contPID>
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	29 f4       	brne	.+10     	; 0x1572 <SEOS_SCH_Tasks+0x18>
		Flag_PID=1;				//Tarea programada cada 1ms
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <Flag_PID>
		contPID=0;
    156e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <contPID>
	}
	if (++contInformo==10*MULTIPLICADOR_MS) {
    1572:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <contInformo>
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <contInformo>
    157c:	84 31       	cpi	r24, 0x14	; 20
    157e:	29 f4       	brne	.+10     	; 0x158a <SEOS_SCH_Tasks+0x30>
		Flag_Informo=1;			//Tarea programada cada 10 ms
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <Flag_Informo>
		contInformo=0;
    1586:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <contInformo>
	}
	if (++contButtton==5*MULTIPLICADOR_MS) {
    158a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <contButtton>
    158e:	8f 5f       	subi	r24, 0xFF	; 255
    1590:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <contButtton>
    1594:	8a 30       	cpi	r24, 0x0A	; 10
    1596:	29 f4       	brne	.+10     	; 0x15a2 <SEOS_SCH_Tasks+0x48>
		Flag_Button=1;			//Tarea programada cada 5 ms
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <Flag_Button>
		contButtton=0;
    159e:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <contButtton>
	}
	if (++contLeerDatos==20*MULTIPLICADOR_MS) {
    15a2:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <contLeerDatos>
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <contLeerDatos>
    15ac:	88 32       	cpi	r24, 0x28	; 40
    15ae:	29 f4       	brne	.+10     	; 0x15ba <SEOS_SCH_Tasks+0x60>
		Flag_leerDatos=1;			//Tarea programada cada 20 ms
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <Flag_leerDatos>
		contLeerDatos=0;
    15b6:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <contLeerDatos>
    15ba:	08 95       	ret

000015bc <SEOS_Dispatch_Tasks>:
}



void SEOS_Dispatch_Tasks(void){
	if(Flag_PID){
    15bc:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <Flag_PID>
    15c0:	88 23       	and	r24, r24
    15c2:	21 f0       	breq	.+8      	; 0x15cc <SEOS_Dispatch_Tasks+0x10>
		Actulizar_PID();
    15c4:	0e 94 17 04 	call	0x82e	; 0x82e <Actulizar_PID>
		Flag_PID = 0;
    15c8:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <Flag_PID>
	}
	if(Flag_Informo){
    15cc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <Flag_Informo>
    15d0:	88 23       	and	r24, r24
    15d2:	21 f0       	breq	.+8      	; 0x15dc <SEOS_Dispatch_Tasks+0x20>
		Informar_Actulizar();
    15d4:	0e 94 14 01 	call	0x228	; 0x228 <Informar_Actulizar>
		Flag_Informo = 0;
    15d8:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <Flag_Informo>
	}
	if(Flag_Button){
    15dc:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <Flag_Button>
    15e0:	88 23       	and	r24, r24
    15e2:	21 f0       	breq	.+8      	; 0x15ec <SEOS_Dispatch_Tasks+0x30>
		button_Actulizar();
    15e4:	0e 94 60 00 	call	0xc0	; 0xc0 <button_Actulizar>
		Flag_Button = 0;
    15e8:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <Flag_Button>
	}
	if(Flag_leerDatos){
    15ec:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <Flag_leerDatos>
    15f0:	88 23       	and	r24, r24
    15f2:	21 f0       	breq	.+8      	; 0x15fc <SEOS_Dispatch_Tasks+0x40>
		actulizar_leerDatos();
    15f4:	0e 94 94 01 	call	0x328	; 0x328 <actulizar_leerDatos>
		Flag_leerDatos=0;
    15f8:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <Flag_leerDatos>
    15fc:	08 95       	ret

000015fe <SEOS_Init>:
		configurar el reloj
		el reloj tiene que funcionar cada 50ms, ya que es el tiempo mas chico
		como no llega a 50ms, cuento hasta 50 cada 1ms
		para tener mayor exactitud uso 1 ms
	*/
	TCCR0A = (1 << WGM01);  // Modo CTC
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = (1 << CS01);   // Prescaler de 8
	//OCR0A = 199;            // Valor de comparación para una frecuencia de 10 kHz;
	TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler de 64
    1602:	93 e0       	ldi	r25, 0x03	; 3
    1604:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;              // Valor de comparación para una frecuencia de 2000 Hz
    1606:	9c e7       	ldi	r25, 0x7C	; 124
    1608:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);					//habilitamos interrpución COMPA
    160a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    160e:	08 95       	ret

00001610 <__vector_14>:
}


//configurar la interrupción del clock
//interrupción periódica cada 50kHz= 0.05ms
ISR(TIMER0_COMPA_vect){
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
	SEOS_SCH_Tasks();
    1632:	0e 94 ad 0a 	call	0x155a	; 0x155a <SEOS_SCH_Tasks>
	tiempoSEOS++;
    1636:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <tiempoSEOS>
    163a:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <tiempoSEOS+0x1>
    163e:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <tiempoSEOS+0x2>
    1642:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <tiempoSEOS+0x3>
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	a1 1d       	adc	r26, r1
    164a:	b1 1d       	adc	r27, r1
    164c:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <tiempoSEOS>
    1650:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <tiempoSEOS+0x1>
    1654:	a0 93 3b 03 	sts	0x033B, r26	; 0x80033b <tiempoSEOS+0x2>
    1658:	b0 93 3c 03 	sts	0x033C, r27	; 0x80033c <tiempoSEOS+0x3>
	if(contTiempo++>MULTIPLICADOR_MS){
    165c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <contTiempo>
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	98 0f       	add	r25, r24
    1664:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <contTiempo>
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	a8 f0       	brcs	.+42     	; 0x1696 <__vector_14+0x86>
		tiempoInforme++;	//cuenta ms
    166c:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <tiempoInforme>
    1670:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <tiempoInforme+0x1>
    1674:	a0 91 37 03 	lds	r26, 0x0337	; 0x800337 <tiempoInforme+0x2>
    1678:	b0 91 38 03 	lds	r27, 0x0338	; 0x800338 <tiempoInforme+0x3>
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	a1 1d       	adc	r26, r1
    1680:	b1 1d       	adc	r27, r1
    1682:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <tiempoInforme>
    1686:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <tiempoInforme+0x1>
    168a:	a0 93 37 03 	sts	0x0337, r26	; 0x800337 <tiempoInforme+0x2>
    168e:	b0 93 38 03 	sts	0x0338, r27	; 0x800338 <tiempoInforme+0x3>
		contTiempo=0;
    1692:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <contTiempo>
	}
}
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_21>:
	ADCSRA |= (1<<ADSC);//start conversion
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
	ADCSRA |= (1<<ADIF); //borrar flag
	
	return ADC;
}
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    16ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    16ce:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <valor+0x1>
    16d2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <valor>
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <Inicializacion_slideResistor>:
    16e4:	87 b1       	in	r24, 0x07	; 7
    16e6:	8e 7f       	andi	r24, 0xFE	; 254
    16e8:	87 b9       	out	0x07, r24	; 7
    16ea:	88 b1       	in	r24, 0x08	; 8
    16ec:	8e 7f       	andi	r24, 0xFE	; 254
    16ee:	88 b9       	out	0x08, r24	; 8
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
    16f6:	ea e7       	ldi	r30, 0x7A	; 122
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8f ea       	ldi	r24, 0xAF	; 175
    16fc:	80 83       	st	Z, r24
    16fe:	ac e7       	ldi	r26, 0x7C	; 124
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	8c 91       	ld	r24, X
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	8c 93       	st	X, r24
    1708:	80 81       	ld	r24, Z
    170a:	80 64       	ori	r24, 0x40	; 64
    170c:	80 83       	st	Z, r24
    170e:	08 95       	ret

00001710 <getSlideResistor>:

uint16_t getSlideResistor(){
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
	//getSliderResistor necesita una zona muerta para actualizarce porque tiene muchi ruido
// 	if(valor>valorAnt+ZONAMUERTA || valor<valorAnt-ZONAMUERTA){
// 		valorAnt = valor;
// 	}
	i = i % (CANT*10);
    1714:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <i>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	96 39       	cpi	r25, 0x96	; 150
    171c:	08 f4       	brcc	.+2      	; 0x1720 <getSlideResistor+0x10>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	2a e6       	ldi	r18, 0x6A	; 106
    1722:	82 9f       	mul	r24, r18
    1724:	90 0d       	add	r25, r0
    1726:	11 24       	eor	r1, r1
    1728:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <i>
	i = (i+1)%CANT;
    172c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <i>
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	6f e0       	ldi	r22, 0x0F	; 15
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    173c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <i>
	valores[i]=valor;
    1740:	c0 91 43 03 	lds	r28, 0x0343	; 0x800343 <i>
    1744:	d0 e0       	ldi	r29, 0x00	; 0
    1746:	cc 0f       	add	r28, r28
    1748:	dd 1f       	adc	r29, r29
    174a:	cc 0f       	add	r28, r28
    174c:	dd 1f       	adc	r29, r29
    174e:	c8 5b       	subi	r28, 0xB8	; 184
    1750:	dc 4f       	sbci	r29, 0xFC	; 252
    1752:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <valor>
    1756:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <valor+0x1>
    175a:	07 2e       	mov	r0, r23
    175c:	00 0c       	add	r0, r0
    175e:	88 0b       	sbc	r24, r24
    1760:	99 0b       	sbc	r25, r25
    1762:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatsisf>
    1766:	68 83       	st	Y, r22
    1768:	79 83       	std	Y+1, r23	; 0x01
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t k;
	total = 0;
    176e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <total>
    1772:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <total+0x1>
    1776:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <total+0x2>
    177a:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <total+0x3>
	for(k=0;k<CANT;k++){
    177e:	c0 e0       	ldi	r28, 0x00	; 0
    1780:	28 c0       	rjmp	.+80     	; 0x17d2 <getSlideResistor+0xc2>
		total = total + valores[(i+CANT-k)%CANT];
    1782:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <i>
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0f 96       	adiw	r24, 0x0f	; 15
    178a:	8c 1b       	sub	r24, r28
    178c:	91 09       	sbc	r25, r1
    178e:	6f e0       	ldi	r22, 0x0F	; 15
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    1796:	fc 01       	movw	r30, r24
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	e8 5b       	subi	r30, 0xB8	; 184
    17a2:	fc 4f       	sbci	r31, 0xFC	; 252
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <total>
    17b0:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <total+0x1>
    17b4:	40 91 46 03 	lds	r20, 0x0346	; 0x800346 <total+0x2>
    17b8:	50 91 47 03 	lds	r21, 0x0347	; 0x800347 <total+0x3>
    17bc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__addsf3>
    17c0:	60 93 44 03 	sts	0x0344, r22	; 0x800344 <total>
    17c4:	70 93 45 03 	sts	0x0345, r23	; 0x800345 <total+0x1>
    17c8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <total+0x2>
    17cc:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <total+0x3>
	i = i % (CANT*10);
	i = (i+1)%CANT;
	valores[i]=valor;
	uint8_t k;
	total = 0;
	for(k=0;k<CANT;k++){
    17d0:	cf 5f       	subi	r28, 0xFF	; 255
    17d2:	cf 30       	cpi	r28, 0x0F	; 15
    17d4:	b0 f2       	brcs	.-84     	; 0x1782 <getSlideResistor+0x72>
		total = total + valores[(i+CANT-k)%CANT];
	}
	return total/CANT;
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e7       	ldi	r20, 0x70	; 112
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <total>
    17e2:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <total+0x1>
    17e6:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <total+0x2>
    17ea:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <total+0x3>
    17ee:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divsf3>
    17f2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fixunssfsi>
    17f6:	cb 01       	movw	r24, r22
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <UART_Init>:
		rx_buffer_read = (rx_buffer_read + 1) % UART_BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente					de ultima saco los qe entren
	datos[i] = '\0';
}
    17fe:	86 e0       	ldi	r24, 0x06	; 6
    1800:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    180a:	e1 ec       	ldi	r30, 0xC1	; 193
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 61       	ori	r24, 0x10	; 16
    1812:	80 83       	st	Z, r24
    1814:	80 81       	ld	r24, Z
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	80 83       	st	Z, r24
    181a:	80 81       	ld	r24, Z
    181c:	88 60       	ori	r24, 0x08	; 8
    181e:	80 83       	st	Z, r24
    1820:	80 81       	ld	r24, Z
    1822:	80 62       	ori	r24, 0x20	; 32
    1824:	80 83       	st	Z, r24
    1826:	e0 ec       	ldi	r30, 0xC0	; 192
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 62       	ori	r24, 0x20	; 32
    182e:	80 83       	st	Z, r24
    1830:	08 95       	ret

00001832 <getEspacioDisponibleBuffer>:
    1832:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <tx_buffer_write>
    1836:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tx_buffer_read>
    183a:	98 17       	cp	r25, r24
    183c:	18 f0       	brcs	.+6      	; 0x1844 <getEspacioDisponibleBuffer+0x12>
    183e:	89 1b       	sub	r24, r25
    1840:	8a 51       	subi	r24, 0x1A	; 26
    1842:	08 95       	ret
    1844:	89 1b       	sub	r24, r25
    1846:	08 95       	ret

00001848 <UART_TransmitChar>:
    1848:	48 2f       	mov	r20, r24
    184a:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <tx_buffer_write>
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	c9 01       	movw	r24, r18
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	66 ee       	ldi	r22, 0xE6	; 230
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    185c:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <tx_buffer_read>
    1860:	98 17       	cp	r25, r24
    1862:	59 f0       	breq	.+22     	; 0x187a <UART_TransmitChar+0x32>
    1864:	f9 01       	movw	r30, r18
    1866:	e1 51       	subi	r30, 0x11	; 17
    1868:	fc 4f       	sbci	r31, 0xFC	; 252
    186a:	40 83       	st	Z, r20
    186c:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <tx_buffer_write>
    1870:	e1 ec       	ldi	r30, 0xC1	; 193
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 62       	ori	r24, 0x20	; 32
    1878:	80 83       	st	Z, r24
    187a:	08 95       	ret

0000187c <UART_TransmitString>:
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	ec 01       	movw	r28, r24
    1884:	16 2f       	mov	r17, r22
    1886:	0e 94 19 0c 	call	0x1832	; 0x1832 <getEspacioDisponibleBuffer>
    188a:	18 17       	cp	r17, r24
    188c:	20 f0       	brcs	.+8      	; 0x1896 <UART_TransmitString+0x1a>
    188e:	06 c0       	rjmp	.+12     	; 0x189c <UART_TransmitString+0x20>
    1890:	0e 94 24 0c 	call	0x1848	; 0x1848 <UART_TransmitChar>
    1894:	21 96       	adiw	r28, 0x01	; 1
    1896:	88 81       	ld	r24, Y
    1898:	81 11       	cpse	r24, r1
    189a:	fa cf       	rjmp	.-12     	; 0x1890 <UART_TransmitString+0x14>
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	08 95       	ret

000018a4 <__vector_19>:
    18a4:	1f 92       	push	r1
    18a6:	0f 92       	push	r0
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
    18c0:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <tx_buffer_read>
    18c4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <tx_buffer_write>
    18c8:	e8 17       	cp	r30, r24
    18ca:	89 f0       	breq	.+34     	; 0x18ee <__vector_19+0x4a>
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	e1 51       	subi	r30, 0x11	; 17
    18d0:	fc 4f       	sbci	r31, 0xFC	; 252
    18d2:	80 81       	ld	r24, Z
    18d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18d8:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tx_buffer_read>
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	66 ee       	ldi	r22, 0xE6	; 230
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    18e8:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <tx_buffer_read>
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <__vector_19+0x54>
    18ee:	e1 ec       	ldi	r30, 0xC1	; 193
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7d       	andi	r24, 0xDF	; 223
    18f6:	80 83       	st	Z, r24
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <SacarDatosBufferEnter>:
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	ec 01       	movw	r28, r24
    191a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <recibioEnter>
    191e:	88 23       	and	r24, r24
    1920:	21 f1       	breq	.+72     	; 0x196a <SacarDatosBufferEnter+0x56>
    1922:	f8 94       	cli
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	11 c0       	rjmp	.+34     	; 0x194a <SacarDatosBufferEnter+0x36>
    1928:	fe 01       	movw	r30, r28
    192a:	e2 0f       	add	r30, r18
    192c:	f1 1d       	adc	r31, r1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	dc 01       	movw	r26, r24
    1932:	a7 57       	subi	r26, 0x77	; 119
    1934:	bc 4f       	sbci	r27, 0xFC	; 252
    1936:	3c 91       	ld	r19, X
    1938:	30 83       	st	Z, r19
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	64 e6       	ldi	r22, 0x64	; 100
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    1944:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <rx_buffer_read>
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <rx_buffer_write>
    194e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rx_buffer_read>
    1952:	98 17       	cp	r25, r24
    1954:	11 f0       	breq	.+4      	; 0x195a <SacarDatosBufferEnter+0x46>
    1956:	23 36       	cpi	r18, 0x63	; 99
    1958:	38 f3       	brcs	.-50     	; 0x1928 <SacarDatosBufferEnter+0x14>
    195a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <recibioEnter>
    195e:	78 94       	sei
    1960:	c2 0f       	add	r28, r18
    1962:	d1 1d       	adc	r29, r1
    1964:	18 82       	st	Y, r1
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	01 c0       	rjmp	.+2      	; 0x196c <SacarDatosBufferEnter+0x58>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <__vector_18>:

ISR(USART_RX_vect){
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	5f 93       	push	r21
    1982:	6f 93       	push	r22
    1984:	7f 93       	push	r23
    1986:	8f 93       	push	r24
    1988:	9f 93       	push	r25
    198a:	af 93       	push	r26
    198c:	bf 93       	push	r27
    198e:	ef 93       	push	r30
    1990:	ff 93       	push	r31
	uint8_t newRxHead = (rx_buffer_write + 1) % UART_BUFFER_SIZE_RX;
    1992:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <rx_buffer_write>
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	64 e6       	ldi	r22, 0x64	; 100
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
	uint8_t receivedChar = UDR0;
    19a2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != rx_buffer_read) {
    19a6:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <rx_buffer_read>
    19aa:	28 17       	cp	r18, r24
    19ac:	a9 f0       	breq	.+42     	; 0x19d8 <__vector_18+0x66>
		if(receivedChar == '\n' || receivedChar == '\r') recibioEnter = 1;
    19ae:	9a 30       	cpi	r25, 0x0A	; 10
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <__vector_18+0x44>
    19b2:	9d 30       	cpi	r25, 0x0D	; 13
    19b4:	21 f4       	brne	.+8      	; 0x19be <__vector_18+0x4c>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <recibioEnter>
    19bc:	0d c0       	rjmp	.+26     	; 0x19d8 <__vector_18+0x66>
		else{
			if(recibioEnter) rx_buffer_write = rx_buffer_read;		  //hago esto para cuando llegue un mensaje 
    19be:	30 91 86 03 	lds	r19, 0x0386	; 0x800386 <recibioEnter>
    19c2:	31 11       	cpse	r19, r1
    19c4:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <rx_buffer_write>
			rx_buffer[rx_buffer_write] = receivedChar;
    19c8:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <rx_buffer_write>
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	e7 57       	subi	r30, 0x77	; 119
    19d0:	fc 4f       	sbci	r31, 0xFC	; 252
    19d2:	90 83       	st	Z, r25
			rx_buffer_write = newRxHead;
    19d4:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <rx_buffer_write>
		}
	}
}
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__subsf3>:
    19f8:	50 58       	subi	r21, 0x80	; 128

000019fa <__addsf3>:
    19fa:	bb 27       	eor	r27, r27
    19fc:	aa 27       	eor	r26, r26
    19fe:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__addsf3x>
    1a02:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_round>
    1a06:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscA>
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <__addsf3+0x20>
    1a0c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_pscB>
    1a10:	20 f0       	brcs	.+8      	; 0x1a1a <__addsf3+0x20>
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <__addsf3+0x28>
    1a14:	9f 3f       	cpi	r25, 0xFF	; 255
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <__addsf3+0x24>
    1a18:	26 f4       	brtc	.+8      	; 0x1a22 <__addsf3+0x28>
    1a1a:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__fp_nan>
    1a1e:	0e f4       	brtc	.+2      	; 0x1a22 <__addsf3+0x28>
    1a20:	e0 95       	com	r30
    1a22:	e7 fb       	bst	r30, 7
    1a24:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_inf>

00001a28 <__addsf3x>:
    1a28:	e9 2f       	mov	r30, r25
    1a2a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_split3>
    1a2e:	58 f3       	brcs	.-42     	; 0x1a06 <__addsf3+0xc>
    1a30:	ba 17       	cp	r27, r26
    1a32:	62 07       	cpc	r22, r18
    1a34:	73 07       	cpc	r23, r19
    1a36:	84 07       	cpc	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <__addsf3x+0x1c>
    1a3c:	79 f4       	brne	.+30     	; 0x1a5c <__addsf3x+0x34>
    1a3e:	a6 f5       	brtc	.+104    	; 0x1aa8 <__addsf3x+0x80>
    1a40:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__fp_zero>
    1a44:	0e f4       	brtc	.+2      	; 0x1a48 <__addsf3x+0x20>
    1a46:	e0 95       	com	r30
    1a48:	0b 2e       	mov	r0, r27
    1a4a:	ba 2f       	mov	r27, r26
    1a4c:	a0 2d       	mov	r26, r0
    1a4e:	0b 01       	movw	r0, r22
    1a50:	b9 01       	movw	r22, r18
    1a52:	90 01       	movw	r18, r0
    1a54:	0c 01       	movw	r0, r24
    1a56:	ca 01       	movw	r24, r20
    1a58:	a0 01       	movw	r20, r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	ff 27       	eor	r31, r31
    1a5e:	59 1b       	sub	r21, r25
    1a60:	99 f0       	breq	.+38     	; 0x1a88 <__addsf3x+0x60>
    1a62:	59 3f       	cpi	r21, 0xF9	; 249
    1a64:	50 f4       	brcc	.+20     	; 0x1a7a <__addsf3x+0x52>
    1a66:	50 3e       	cpi	r21, 0xE0	; 224
    1a68:	68 f1       	brcs	.+90     	; 0x1ac4 <__addsf3x+0x9c>
    1a6a:	1a 16       	cp	r1, r26
    1a6c:	f0 40       	sbci	r31, 0x00	; 0
    1a6e:	a2 2f       	mov	r26, r18
    1a70:	23 2f       	mov	r18, r19
    1a72:	34 2f       	mov	r19, r20
    1a74:	44 27       	eor	r20, r20
    1a76:	58 5f       	subi	r21, 0xF8	; 248
    1a78:	f3 cf       	rjmp	.-26     	; 0x1a60 <__addsf3x+0x38>
    1a7a:	46 95       	lsr	r20
    1a7c:	37 95       	ror	r19
    1a7e:	27 95       	ror	r18
    1a80:	a7 95       	ror	r26
    1a82:	f0 40       	sbci	r31, 0x00	; 0
    1a84:	53 95       	inc	r21
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__addsf3x+0x52>
    1a88:	7e f4       	brtc	.+30     	; 0x1aa8 <__addsf3x+0x80>
    1a8a:	1f 16       	cp	r1, r31
    1a8c:	ba 0b       	sbc	r27, r26
    1a8e:	62 0b       	sbc	r22, r18
    1a90:	73 0b       	sbc	r23, r19
    1a92:	84 0b       	sbc	r24, r20
    1a94:	ba f0       	brmi	.+46     	; 0x1ac4 <__addsf3x+0x9c>
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	a1 f0       	breq	.+40     	; 0x1ac2 <__addsf3x+0x9a>
    1a9a:	ff 0f       	add	r31, r31
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	66 1f       	adc	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	c2 f7       	brpl	.-16     	; 0x1a96 <__addsf3x+0x6e>
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <__addsf3x+0x9c>
    1aa8:	ba 0f       	add	r27, r26
    1aaa:	62 1f       	adc	r22, r18
    1aac:	73 1f       	adc	r23, r19
    1aae:	84 1f       	adc	r24, r20
    1ab0:	48 f4       	brcc	.+18     	; 0x1ac4 <__addsf3x+0x9c>
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f7 95       	ror	r31
    1abc:	9e 3f       	cpi	r25, 0xFE	; 254
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <__addsf3x+0x9a>
    1ac0:	b0 cf       	rjmp	.-160    	; 0x1a22 <__addsf3+0x28>
    1ac2:	93 95       	inc	r25
    1ac4:	88 0f       	add	r24, r24
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <__addsf3x+0xa2>
    1ac8:	99 27       	eor	r25, r25
    1aca:	ee 0f       	add	r30, r30
    1acc:	97 95       	ror	r25
    1ace:	87 95       	ror	r24
    1ad0:	08 95       	ret

00001ad2 <__cmpsf2>:
    1ad2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_cmp>
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <__cmpsf2+0x8>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	08 95       	ret

00001adc <__divsf3>:
    1adc:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__divsf3x>
    1ae0:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_round>
    1ae4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_pscB>
    1ae8:	58 f0       	brcs	.+22     	; 0x1b00 <__divsf3+0x24>
    1aea:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscA>
    1aee:	40 f0       	brcs	.+16     	; 0x1b00 <__divsf3+0x24>
    1af0:	29 f4       	brne	.+10     	; 0x1afc <__divsf3+0x20>
    1af2:	5f 3f       	cpi	r21, 0xFF	; 255
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <__divsf3+0x24>
    1af6:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_inf>
    1afa:	51 11       	cpse	r21, r1
    1afc:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_szero>
    1b00:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__fp_nan>

00001b04 <__divsf3x>:
    1b04:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_split3>
    1b08:	68 f3       	brcs	.-38     	; 0x1ae4 <__divsf3+0x8>

00001b0a <__divsf3_pse>:
    1b0a:	99 23       	and	r25, r25
    1b0c:	b1 f3       	breq	.-20     	; 0x1afa <__divsf3+0x1e>
    1b0e:	55 23       	and	r21, r21
    1b10:	91 f3       	breq	.-28     	; 0x1af6 <__divsf3+0x1a>
    1b12:	95 1b       	sub	r25, r21
    1b14:	55 0b       	sbc	r21, r21
    1b16:	bb 27       	eor	r27, r27
    1b18:	aa 27       	eor	r26, r26
    1b1a:	62 17       	cp	r22, r18
    1b1c:	73 07       	cpc	r23, r19
    1b1e:	84 07       	cpc	r24, r20
    1b20:	38 f0       	brcs	.+14     	; 0x1b30 <__divsf3_pse+0x26>
    1b22:	9f 5f       	subi	r25, 0xFF	; 255
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	22 0f       	add	r18, r18
    1b28:	33 1f       	adc	r19, r19
    1b2a:	44 1f       	adc	r20, r20
    1b2c:	aa 1f       	adc	r26, r26
    1b2e:	a9 f3       	breq	.-22     	; 0x1b1a <__divsf3_pse+0x10>
    1b30:	35 d0       	rcall	.+106    	; 0x1b9c <__divsf3_pse+0x92>
    1b32:	0e 2e       	mov	r0, r30
    1b34:	3a f0       	brmi	.+14     	; 0x1b44 <__divsf3_pse+0x3a>
    1b36:	e0 e8       	ldi	r30, 0x80	; 128
    1b38:	32 d0       	rcall	.+100    	; 0x1b9e <__divsf3_pse+0x94>
    1b3a:	91 50       	subi	r25, 0x01	; 1
    1b3c:	50 40       	sbci	r21, 0x00	; 0
    1b3e:	e6 95       	lsr	r30
    1b40:	00 1c       	adc	r0, r0
    1b42:	ca f7       	brpl	.-14     	; 0x1b36 <__divsf3_pse+0x2c>
    1b44:	2b d0       	rcall	.+86     	; 0x1b9c <__divsf3_pse+0x92>
    1b46:	fe 2f       	mov	r31, r30
    1b48:	29 d0       	rcall	.+82     	; 0x1b9c <__divsf3_pse+0x92>
    1b4a:	66 0f       	add	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 1f       	adc	r24, r24
    1b50:	bb 1f       	adc	r27, r27
    1b52:	26 17       	cp	r18, r22
    1b54:	37 07       	cpc	r19, r23
    1b56:	48 07       	cpc	r20, r24
    1b58:	ab 07       	cpc	r26, r27
    1b5a:	b0 e8       	ldi	r27, 0x80	; 128
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <__divsf3_pse+0x56>
    1b5e:	bb 0b       	sbc	r27, r27
    1b60:	80 2d       	mov	r24, r0
    1b62:	bf 01       	movw	r22, r30
    1b64:	ff 27       	eor	r31, r31
    1b66:	93 58       	subi	r25, 0x83	; 131
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6a:	3a f0       	brmi	.+14     	; 0x1b7a <__divsf3_pse+0x70>
    1b6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6e:	51 05       	cpc	r21, r1
    1b70:	78 f0       	brcs	.+30     	; 0x1b90 <__divsf3_pse+0x86>
    1b72:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_inf>
    1b76:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_szero>
    1b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7c:	e4 f3       	brlt	.-8      	; 0x1b76 <__divsf3_pse+0x6c>
    1b7e:	98 3e       	cpi	r25, 0xE8	; 232
    1b80:	d4 f3       	brlt	.-12     	; 0x1b76 <__divsf3_pse+0x6c>
    1b82:	86 95       	lsr	r24
    1b84:	77 95       	ror	r23
    1b86:	67 95       	ror	r22
    1b88:	b7 95       	ror	r27
    1b8a:	f7 95       	ror	r31
    1b8c:	9f 5f       	subi	r25, 0xFF	; 255
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <__divsf3_pse+0x78>
    1b90:	88 0f       	add	r24, r24
    1b92:	91 1d       	adc	r25, r1
    1b94:	96 95       	lsr	r25
    1b96:	87 95       	ror	r24
    1b98:	97 f9       	bld	r25, 7
    1b9a:	08 95       	ret
    1b9c:	e1 e0       	ldi	r30, 0x01	; 1
    1b9e:	66 0f       	add	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	bb 1f       	adc	r27, r27
    1ba6:	62 17       	cp	r22, r18
    1ba8:	73 07       	cpc	r23, r19
    1baa:	84 07       	cpc	r24, r20
    1bac:	ba 07       	cpc	r27, r26
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <__divsf3_pse+0xae>
    1bb0:	62 1b       	sub	r22, r18
    1bb2:	73 0b       	sbc	r23, r19
    1bb4:	84 0b       	sbc	r24, r20
    1bb6:	ba 0b       	sbc	r27, r26
    1bb8:	ee 1f       	adc	r30, r30
    1bba:	88 f7       	brcc	.-30     	; 0x1b9e <__divsf3_pse+0x94>
    1bbc:	e0 95       	com	r30
    1bbe:	08 95       	ret

00001bc0 <__fixsfsi>:
    1bc0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fixunssfsi>
    1bc4:	68 94       	set
    1bc6:	b1 11       	cpse	r27, r1
    1bc8:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_szero>
    1bcc:	08 95       	ret

00001bce <__fixunssfsi>:
    1bce:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__fp_splitA>
    1bd2:	88 f0       	brcs	.+34     	; 0x1bf6 <__fixunssfsi+0x28>
    1bd4:	9f 57       	subi	r25, 0x7F	; 127
    1bd6:	98 f0       	brcs	.+38     	; 0x1bfe <__fixunssfsi+0x30>
    1bd8:	b9 2f       	mov	r27, r25
    1bda:	99 27       	eor	r25, r25
    1bdc:	b7 51       	subi	r27, 0x17	; 23
    1bde:	b0 f0       	brcs	.+44     	; 0x1c0c <__fixunssfsi+0x3e>
    1be0:	e1 f0       	breq	.+56     	; 0x1c1a <__fixunssfsi+0x4c>
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	1a f0       	brmi	.+6      	; 0x1bf2 <__fixunssfsi+0x24>
    1bec:	ba 95       	dec	r27
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__fixunssfsi+0x14>
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <__fixunssfsi+0x4c>
    1bf2:	b1 30       	cpi	r27, 0x01	; 1
    1bf4:	91 f0       	breq	.+36     	; 0x1c1a <__fixunssfsi+0x4c>
    1bf6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_zero>
    1bfa:	b1 e0       	ldi	r27, 0x01	; 1
    1bfc:	08 95       	ret
    1bfe:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__fp_zero>
    1c02:	67 2f       	mov	r22, r23
    1c04:	78 2f       	mov	r23, r24
    1c06:	88 27       	eor	r24, r24
    1c08:	b8 5f       	subi	r27, 0xF8	; 248
    1c0a:	39 f0       	breq	.+14     	; 0x1c1a <__fixunssfsi+0x4c>
    1c0c:	b9 3f       	cpi	r27, 0xF9	; 249
    1c0e:	cc f3       	brlt	.-14     	; 0x1c02 <__fixunssfsi+0x34>
    1c10:	86 95       	lsr	r24
    1c12:	77 95       	ror	r23
    1c14:	67 95       	ror	r22
    1c16:	b3 95       	inc	r27
    1c18:	d9 f7       	brne	.-10     	; 0x1c10 <__fixunssfsi+0x42>
    1c1a:	3e f4       	brtc	.+14     	; 0x1c2a <__fixunssfsi+0x5c>
    1c1c:	90 95       	com	r25
    1c1e:	80 95       	com	r24
    1c20:	70 95       	com	r23
    1c22:	61 95       	neg	r22
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	8f 4f       	sbci	r24, 0xFF	; 255
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	08 95       	ret

00001c2c <__floatunsisf>:
    1c2c:	e8 94       	clt
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <__floatsisf+0x12>

00001c30 <__floatsisf>:
    1c30:	97 fb       	bst	r25, 7
    1c32:	3e f4       	brtc	.+14     	; 0x1c42 <__floatsisf+0x12>
    1c34:	90 95       	com	r25
    1c36:	80 95       	com	r24
    1c38:	70 95       	com	r23
    1c3a:	61 95       	neg	r22
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	99 23       	and	r25, r25
    1c44:	a9 f0       	breq	.+42     	; 0x1c70 <__floatsisf+0x40>
    1c46:	f9 2f       	mov	r31, r25
    1c48:	96 e9       	ldi	r25, 0x96	; 150
    1c4a:	bb 27       	eor	r27, r27
    1c4c:	93 95       	inc	r25
    1c4e:	f6 95       	lsr	r31
    1c50:	87 95       	ror	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b7 95       	ror	r27
    1c58:	f1 11       	cpse	r31, r1
    1c5a:	f8 cf       	rjmp	.-16     	; 0x1c4c <__floatsisf+0x1c>
    1c5c:	fa f4       	brpl	.+62     	; 0x1c9c <__floatsisf+0x6c>
    1c5e:	bb 0f       	add	r27, r27
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__floatsisf+0x36>
    1c62:	60 ff       	sbrs	r22, 0
    1c64:	1b c0       	rjmp	.+54     	; 0x1c9c <__floatsisf+0x6c>
    1c66:	6f 5f       	subi	r22, 0xFF	; 255
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <__floatsisf+0x6c>
    1c70:	88 23       	and	r24, r24
    1c72:	11 f0       	breq	.+4      	; 0x1c78 <__floatsisf+0x48>
    1c74:	96 e9       	ldi	r25, 0x96	; 150
    1c76:	11 c0       	rjmp	.+34     	; 0x1c9a <__floatsisf+0x6a>
    1c78:	77 23       	and	r23, r23
    1c7a:	21 f0       	breq	.+8      	; 0x1c84 <__floatsisf+0x54>
    1c7c:	9e e8       	ldi	r25, 0x8E	; 142
    1c7e:	87 2f       	mov	r24, r23
    1c80:	76 2f       	mov	r23, r22
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <__floatsisf+0x5e>
    1c84:	66 23       	and	r22, r22
    1c86:	71 f0       	breq	.+28     	; 0x1ca4 <__floatsisf+0x74>
    1c88:	96 e8       	ldi	r25, 0x86	; 134
    1c8a:	86 2f       	mov	r24, r22
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	2a f0       	brmi	.+10     	; 0x1c9c <__floatsisf+0x6c>
    1c92:	9a 95       	dec	r25
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	da f7       	brpl	.-10     	; 0x1c92 <__floatsisf+0x62>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	97 f9       	bld	r25, 7
    1ca4:	08 95       	ret

00001ca6 <__fp_cmp>:
    1ca6:	99 0f       	add	r25, r25
    1ca8:	00 08       	sbc	r0, r0
    1caa:	55 0f       	add	r21, r21
    1cac:	aa 0b       	sbc	r26, r26
    1cae:	e0 e8       	ldi	r30, 0x80	; 128
    1cb0:	fe ef       	ldi	r31, 0xFE	; 254
    1cb2:	16 16       	cp	r1, r22
    1cb4:	17 06       	cpc	r1, r23
    1cb6:	e8 07       	cpc	r30, r24
    1cb8:	f9 07       	cpc	r31, r25
    1cba:	c0 f0       	brcs	.+48     	; 0x1cec <__fp_cmp+0x46>
    1cbc:	12 16       	cp	r1, r18
    1cbe:	13 06       	cpc	r1, r19
    1cc0:	e4 07       	cpc	r30, r20
    1cc2:	f5 07       	cpc	r31, r21
    1cc4:	98 f0       	brcs	.+38     	; 0x1cec <__fp_cmp+0x46>
    1cc6:	62 1b       	sub	r22, r18
    1cc8:	73 0b       	sbc	r23, r19
    1cca:	84 0b       	sbc	r24, r20
    1ccc:	95 0b       	sbc	r25, r21
    1cce:	39 f4       	brne	.+14     	; 0x1cde <__fp_cmp+0x38>
    1cd0:	0a 26       	eor	r0, r26
    1cd2:	61 f0       	breq	.+24     	; 0x1cec <__fp_cmp+0x46>
    1cd4:	23 2b       	or	r18, r19
    1cd6:	24 2b       	or	r18, r20
    1cd8:	25 2b       	or	r18, r21
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <__fp_cmp+0x3e>
    1cdc:	08 95       	ret
    1cde:	0a 26       	eor	r0, r26
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <__fp_cmp+0x3e>
    1ce2:	a1 40       	sbci	r26, 0x01	; 1
    1ce4:	a6 95       	lsr	r26
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	81 1d       	adc	r24, r1
    1cea:	81 1d       	adc	r24, r1
    1cec:	08 95       	ret

00001cee <__fp_inf>:
    1cee:	97 f9       	bld	r25, 7
    1cf0:	9f 67       	ori	r25, 0x7F	; 127
    1cf2:	80 e8       	ldi	r24, 0x80	; 128
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	08 95       	ret

00001cfa <__fp_nan>:
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	80 ec       	ldi	r24, 0xC0	; 192
    1cfe:	08 95       	ret

00001d00 <__fp_pscA>:
    1d00:	00 24       	eor	r0, r0
    1d02:	0a 94       	dec	r0
    1d04:	16 16       	cp	r1, r22
    1d06:	17 06       	cpc	r1, r23
    1d08:	18 06       	cpc	r1, r24
    1d0a:	09 06       	cpc	r0, r25
    1d0c:	08 95       	ret

00001d0e <__fp_pscB>:
    1d0e:	00 24       	eor	r0, r0
    1d10:	0a 94       	dec	r0
    1d12:	12 16       	cp	r1, r18
    1d14:	13 06       	cpc	r1, r19
    1d16:	14 06       	cpc	r1, r20
    1d18:	05 06       	cpc	r0, r21
    1d1a:	08 95       	ret

00001d1c <__fp_round>:
    1d1c:	09 2e       	mov	r0, r25
    1d1e:	03 94       	inc	r0
    1d20:	00 0c       	add	r0, r0
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <__fp_round+0xc>
    1d24:	88 23       	and	r24, r24
    1d26:	52 f0       	brmi	.+20     	; 0x1d3c <__fp_round+0x20>
    1d28:	bb 0f       	add	r27, r27
    1d2a:	40 f4       	brcc	.+16     	; 0x1d3c <__fp_round+0x20>
    1d2c:	bf 2b       	or	r27, r31
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <__fp_round+0x18>
    1d30:	60 ff       	sbrs	r22, 0
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <__fp_round+0x20>
    1d34:	6f 5f       	subi	r22, 0xFF	; 255
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	08 95       	ret

00001d3e <__fp_split3>:
    1d3e:	57 fd       	sbrc	r21, 7
    1d40:	90 58       	subi	r25, 0x80	; 128
    1d42:	44 0f       	add	r20, r20
    1d44:	55 1f       	adc	r21, r21
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <__fp_splitA+0x10>
    1d48:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4a:	71 f0       	breq	.+28     	; 0x1d68 <__fp_splitA+0x1a>
    1d4c:	47 95       	ror	r20

00001d4e <__fp_splitA>:
    1d4e:	88 0f       	add	r24, r24
    1d50:	97 fb       	bst	r25, 7
    1d52:	99 1f       	adc	r25, r25
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <__fp_splitA+0x20>
    1d56:	9f 3f       	cpi	r25, 0xFF	; 255
    1d58:	79 f0       	breq	.+30     	; 0x1d78 <__fp_splitA+0x2a>
    1d5a:	87 95       	ror	r24
    1d5c:	08 95       	ret
    1d5e:	12 16       	cp	r1, r18
    1d60:	13 06       	cpc	r1, r19
    1d62:	14 06       	cpc	r1, r20
    1d64:	55 1f       	adc	r21, r21
    1d66:	f2 cf       	rjmp	.-28     	; 0x1d4c <__fp_split3+0xe>
    1d68:	46 95       	lsr	r20
    1d6a:	f1 df       	rcall	.-30     	; 0x1d4e <__fp_splitA>
    1d6c:	08 c0       	rjmp	.+16     	; 0x1d7e <__fp_splitA+0x30>
    1d6e:	16 16       	cp	r1, r22
    1d70:	17 06       	cpc	r1, r23
    1d72:	18 06       	cpc	r1, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	f1 cf       	rjmp	.-30     	; 0x1d5a <__fp_splitA+0xc>
    1d78:	86 95       	lsr	r24
    1d7a:	71 05       	cpc	r23, r1
    1d7c:	61 05       	cpc	r22, r1
    1d7e:	08 94       	sec
    1d80:	08 95       	ret

00001d82 <__fp_zero>:
    1d82:	e8 94       	clt

00001d84 <__fp_szero>:
    1d84:	bb 27       	eor	r27, r27
    1d86:	66 27       	eor	r22, r22
    1d88:	77 27       	eor	r23, r23
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	97 f9       	bld	r25, 7
    1d8e:	08 95       	ret

00001d90 <__gesf2>:
    1d90:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_cmp>
    1d94:	08 f4       	brcc	.+2      	; 0x1d98 <__gesf2+0x8>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	08 95       	ret

00001d9a <__mulsf3>:
    1d9a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3x>
    1d9e:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_round>
    1da2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fp_pscA>
    1da6:	38 f0       	brcs	.+14     	; 0x1db6 <__mulsf3+0x1c>
    1da8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_pscB>
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <__mulsf3+0x1c>
    1dae:	95 23       	and	r25, r21
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <__mulsf3+0x1c>
    1db2:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_inf>
    1db6:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__fp_nan>
    1dba:	11 24       	eor	r1, r1
    1dbc:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_szero>

00001dc0 <__mulsf3x>:
    1dc0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_split3>
    1dc4:	70 f3       	brcs	.-36     	; 0x1da2 <__mulsf3+0x8>

00001dc6 <__mulsf3_pse>:
    1dc6:	95 9f       	mul	r25, r21
    1dc8:	c1 f3       	breq	.-16     	; 0x1dba <__mulsf3+0x20>
    1dca:	95 0f       	add	r25, r21
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	55 1f       	adc	r21, r21
    1dd0:	62 9f       	mul	r22, r18
    1dd2:	f0 01       	movw	r30, r0
    1dd4:	72 9f       	mul	r23, r18
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	f0 0d       	add	r31, r0
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	63 9f       	mul	r22, r19
    1dde:	aa 27       	eor	r26, r26
    1de0:	f0 0d       	add	r31, r0
    1de2:	b1 1d       	adc	r27, r1
    1de4:	aa 1f       	adc	r26, r26
    1de6:	64 9f       	mul	r22, r20
    1de8:	66 27       	eor	r22, r22
    1dea:	b0 0d       	add	r27, r0
    1dec:	a1 1d       	adc	r26, r1
    1dee:	66 1f       	adc	r22, r22
    1df0:	82 9f       	mul	r24, r18
    1df2:	22 27       	eor	r18, r18
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	62 1f       	adc	r22, r18
    1dfa:	73 9f       	mul	r23, r19
    1dfc:	b0 0d       	add	r27, r0
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	62 1f       	adc	r22, r18
    1e02:	83 9f       	mul	r24, r19
    1e04:	a0 0d       	add	r26, r0
    1e06:	61 1d       	adc	r22, r1
    1e08:	22 1f       	adc	r18, r18
    1e0a:	74 9f       	mul	r23, r20
    1e0c:	33 27       	eor	r19, r19
    1e0e:	a0 0d       	add	r26, r0
    1e10:	61 1d       	adc	r22, r1
    1e12:	23 1f       	adc	r18, r19
    1e14:	84 9f       	mul	r24, r20
    1e16:	60 0d       	add	r22, r0
    1e18:	21 1d       	adc	r18, r1
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	76 2f       	mov	r23, r22
    1e1e:	6a 2f       	mov	r22, r26
    1e20:	11 24       	eor	r1, r1
    1e22:	9f 57       	subi	r25, 0x7F	; 127
    1e24:	50 40       	sbci	r21, 0x00	; 0
    1e26:	9a f0       	brmi	.+38     	; 0x1e4e <__mulsf3_pse+0x88>
    1e28:	f1 f0       	breq	.+60     	; 0x1e66 <__mulsf3_pse+0xa0>
    1e2a:	88 23       	and	r24, r24
    1e2c:	4a f0       	brmi	.+18     	; 0x1e40 <__mulsf3_pse+0x7a>
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	bb 1f       	adc	r27, r27
    1e34:	66 1f       	adc	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	a9 f7       	brne	.-22     	; 0x1e2a <__mulsf3_pse+0x64>
    1e40:	9e 3f       	cpi	r25, 0xFE	; 254
    1e42:	51 05       	cpc	r21, r1
    1e44:	80 f0       	brcs	.+32     	; 0x1e66 <__mulsf3_pse+0xa0>
    1e46:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__fp_inf>
    1e4a:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_szero>
    1e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e50:	e4 f3       	brlt	.-8      	; 0x1e4a <__mulsf3_pse+0x84>
    1e52:	98 3e       	cpi	r25, 0xE8	; 232
    1e54:	d4 f3       	brlt	.-12     	; 0x1e4a <__mulsf3_pse+0x84>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	f7 95       	ror	r31
    1e60:	e7 95       	ror	r30
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <__mulsf3_pse+0x90>
    1e66:	fe 2b       	or	r31, r30
    1e68:	88 0f       	add	r24, r24
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	96 95       	lsr	r25
    1e6e:	87 95       	ror	r24
    1e70:	97 f9       	bld	r25, 7
    1e72:	08 95       	ret

00001e74 <__udivmodhi4>:
    1e74:	aa 1b       	sub	r26, r26
    1e76:	bb 1b       	sub	r27, r27
    1e78:	51 e1       	ldi	r21, 0x11	; 17
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <__udivmodhi4_ep>

00001e7c <__udivmodhi4_loop>:
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	a6 17       	cp	r26, r22
    1e82:	b7 07       	cpc	r27, r23
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__udivmodhi4_ep>
    1e86:	a6 1b       	sub	r26, r22
    1e88:	b7 0b       	sbc	r27, r23

00001e8a <__udivmodhi4_ep>:
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	5a 95       	dec	r21
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__udivmodhi4_loop>
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	08 95       	ret

00001e9c <__divmodhi4>:
    1e9c:	97 fb       	bst	r25, 7
    1e9e:	07 2e       	mov	r0, r23
    1ea0:	16 f4       	brtc	.+4      	; 0x1ea6 <__divmodhi4+0xa>
    1ea2:	00 94       	com	r0
    1ea4:	07 d0       	rcall	.+14     	; 0x1eb4 <__divmodhi4_neg1>
    1ea6:	77 fd       	sbrc	r23, 7
    1ea8:	09 d0       	rcall	.+18     	; 0x1ebc <__divmodhi4_neg2>
    1eaa:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
    1eae:	07 fc       	sbrc	r0, 7
    1eb0:	05 d0       	rcall	.+10     	; 0x1ebc <__divmodhi4_neg2>
    1eb2:	3e f4       	brtc	.+14     	; 0x1ec2 <__divmodhi4_exit>

00001eb4 <__divmodhi4_neg1>:
    1eb4:	90 95       	com	r25
    1eb6:	81 95       	neg	r24
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	08 95       	ret

00001ebc <__divmodhi4_neg2>:
    1ebc:	70 95       	com	r23
    1ebe:	61 95       	neg	r22
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ec2 <__divmodhi4_exit>:
    1ec2:	08 95       	ret

00001ec4 <_exit>:
    1ec4:	f8 94       	cli

00001ec6 <__stop_program>:
    1ec6:	ff cf       	rjmp	.-2      	; 0x1ec6 <__stop_program>
